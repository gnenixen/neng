/*
 * Copyright (c) 2017 Derelict Developers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the names 'Derelict', 'DerelictImgui', nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
module engine.thirdparty.derelict.imgui.imgui;

/* generated by:
from mako.template import Template
print(Template(filename='funcs_template.txt').render())
open("imgui.d", "wb").write(Template(filename='funcs_template.txt').render().encode('utf-8'))
*/

private
{
    import engine.thirdparty.derelict.util.system;
    import core.stdc.stdarg:va_list;
}

// Helpers macros to generate 32-bits encoded colors
version(IMGUI_USE_BGRA_PACKED_COLOR) {
    enum IM_COL32_R_SHIFT    = 16;
    enum IM_COL32_G_SHIFT    = 8;
    enum IM_COL32_B_SHIFT    = 0;
    enum IM_COL32_A_SHIFT    = 24;
    enum IM_COL32_A_MASK     = 0xFF000000;
} else {
    enum IM_COL32_R_SHIFT    = 0;
    enum IM_COL32_G_SHIFT    = 8;
    enum IM_COL32_B_SHIFT    = 16;
    enum IM_COL32_A_SHIFT    = 24;
    enum IM_COL32_A_MASK     = 0xFF000000;
}
uint IM_COL32(ubyte R, ubyte G, ubyte B, ubyte A = 255) {
    return (
            (cast(ImU32)(A)<<IM_COL32_A_SHIFT) | 
            (cast(ImU32)(B)<<IM_COL32_B_SHIFT) | 
            (cast(ImU32)(G)<<IM_COL32_G_SHIFT) | 
            (cast(ImU32)(R)<<IM_COL32_R_SHIFT)
            );
}
@property uint IM_COL32_WHITE() {
    return IM_COL32(255,255,255,255);   // Opaque white = 0xFFFFFFFF
}
@property uint IM_COL32_BLACK() {
    return IM_COL32(0,0,0,255);         // Opaque black
}
@property uint IM_COL32_BLACK_TRANS() {
    return IM_COL32(0,0,0,0);           // Transparent black = 0x00000000
}



alias ImU64                = ulong;
alias ImGuiKey             = int;
alias ImS32                = int;
alias ImGuiTreeNodeFlags   = int;
alias ImGuiNavInput        = int;
alias ImGuiMouseButton     = int;
alias ImGuiMouseCursor     = int;
alias ImGuiBackendFlags    = int;
alias ImS16                = short;
alias ImFontAtlasFlags     = int;
alias ImS8                 = char;
alias ImGuiWindowFlags     = int;
alias ImDrawListFlags      = int;
alias ImGuiInputTextFlags  = int;
alias ImGuiHoveredFlags    = int;
alias ImGuiStyleVar        = int;
alias ImGuiDataType        = int;
alias ImU32                = uint;
alias ImGuiSelectableFlags = int;
alias ImDrawCornerFlags    = int;
alias ImDrawIdx            = ushort;
alias ImGuiCol             = int;
alias ImGuiComboFlags      = int;
alias ImU16                = ushort;
alias ImGuiDir             = int;
alias ImGuiDragDropFlags   = int;
alias ImGuiColorEditFlags  = int;
alias ImGuiDockNodeFlags   = int;
alias ImU8                 = char;
alias ImTextureID          = void*;
alias ImGuiViewportFlags   = int;
alias ImS64                = long;
alias ImWchar              = ushort;
alias ImGuiTabItemFlags    = int;
alias ImGuiTabBarFlags     = int;
alias ImGuiCond            = int;
alias ImGuiID              = uint;
alias ImGuiConfigFlags     = int;
alias ImGuiFocusedFlags    = int;
// special internal alias
alias ImDrawListSharedData = void;
alias ImGuiContext = void;

enum {
    ImDrawListFlags_None                               = 0,
    ImDrawListFlags_AntiAliasedLines                   = 1 << 0,
    ImDrawListFlags_AntiAliasedFill                    = 1 << 1,
    ImDrawListFlags_AllowVtxOffset                     = 1 << 2,
}

enum {
    ImGuiDockNodeFlags_None                            = 0,
    ImGuiDockNodeFlags_KeepAliveOnly                   = 1 << 0,
    ImGuiDockNodeFlags_NoDockingInCentralNode          = 1 << 2,
    ImGuiDockNodeFlags_PassthruCentralNode             = 1 << 3,
    ImGuiDockNodeFlags_NoSplit                         = 1 << 4,
    ImGuiDockNodeFlags_NoResize                        = 1 << 5,
    ImGuiDockNodeFlags_AutoHideTabBar                  = 1 << 6,
}

enum {
    ImGuiInputTextFlags_None                           = 0,
    ImGuiInputTextFlags_CharsDecimal                   = 1 << 0,
    ImGuiInputTextFlags_CharsHexadecimal               = 1 << 1,
    ImGuiInputTextFlags_CharsUppercase                 = 1 << 2,
    ImGuiInputTextFlags_CharsNoBlank                   = 1 << 3,
    ImGuiInputTextFlags_AutoSelectAll                  = 1 << 4,
    ImGuiInputTextFlags_EnterReturnsTrue               = 1 << 5,
    ImGuiInputTextFlags_CallbackCompletion             = 1 << 6,
    ImGuiInputTextFlags_CallbackHistory                = 1 << 7,
    ImGuiInputTextFlags_CallbackAlways                 = 1 << 8,
    ImGuiInputTextFlags_CallbackCharFilter             = 1 << 9,
    ImGuiInputTextFlags_AllowTabInput                  = 1 << 10,
    ImGuiInputTextFlags_CtrlEnterForNewLine            = 1 << 11,
    ImGuiInputTextFlags_NoHorizontalScroll             = 1 << 12,
    ImGuiInputTextFlags_AlwaysInsertMode               = 1 << 13,
    ImGuiInputTextFlags_ReadOnly                       = 1 << 14,
    ImGuiInputTextFlags_Password                       = 1 << 15,
    ImGuiInputTextFlags_NoUndoRedo                     = 1 << 16,
    ImGuiInputTextFlags_CharsScientific                = 1 << 17,
    ImGuiInputTextFlags_CallbackResize                 = 1 << 18,
    ImGuiInputTextFlags_Multiline                      = 1 << 20,
    ImGuiInputTextFlags_NoMarkEdited                   = 1 << 21,
}

enum {
    ImGuiComboFlags_None                               = 0,
    ImGuiComboFlags_PopupAlignLeft                     = 1 << 0,
    ImGuiComboFlags_HeightSmall                        = 1 << 1,
    ImGuiComboFlags_HeightRegular                      = 1 << 2,
    ImGuiComboFlags_HeightLarge                        = 1 << 3,
    ImGuiComboFlags_HeightLargest                      = 1 << 4,
    ImGuiComboFlags_NoArrowButton                      = 1 << 5,
    ImGuiComboFlags_NoPreview                          = 1 << 6,
    ImGuiComboFlags_HeightMask_                        = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest,
}

enum {
    ImGuiTreeNodeFlags_None                            = 0,
    ImGuiTreeNodeFlags_Selected                        = 1 << 0,
    ImGuiTreeNodeFlags_Framed                          = 1 << 1,
    ImGuiTreeNodeFlags_AllowItemOverlap                = 1 << 2,
    ImGuiTreeNodeFlags_NoTreePushOnOpen                = 1 << 3,
    ImGuiTreeNodeFlags_NoAutoOpenOnLog                 = 1 << 4,
    ImGuiTreeNodeFlags_DefaultOpen                     = 1 << 5,
    ImGuiTreeNodeFlags_OpenOnDoubleClick               = 1 << 6,
    ImGuiTreeNodeFlags_OpenOnArrow                     = 1 << 7,
    ImGuiTreeNodeFlags_Leaf                            = 1 << 8,
    ImGuiTreeNodeFlags_Bullet                          = 1 << 9,
    ImGuiTreeNodeFlags_FramePadding                    = 1 << 10,
    ImGuiTreeNodeFlags_SpanAvailWidth                  = 1 << 11,
    ImGuiTreeNodeFlags_SpanFullWidth                   = 1 << 12,
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere            = 1 << 13,
    ImGuiTreeNodeFlags_CollapsingHeader                = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,
}

enum {
    ImFontAtlasFlags_None                              = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight                = 1 << 0,
    ImFontAtlasFlags_NoMouseCursors                    = 1 << 1,
}

enum {
    ImGuiViewportFlags_None                            = 0,
    ImGuiViewportFlags_NoDecoration                    = 1 << 0,
    ImGuiViewportFlags_NoTaskBarIcon                   = 1 << 1,
    ImGuiViewportFlags_NoFocusOnAppearing              = 1 << 2,
    ImGuiViewportFlags_NoFocusOnClick                  = 1 << 3,
    ImGuiViewportFlags_NoInputs                        = 1 << 4,
    ImGuiViewportFlags_NoRendererClear                 = 1 << 5,
    ImGuiViewportFlags_TopMost                         = 1 << 6,
    ImGuiViewportFlags_Minimized                       = 1 << 7,
    ImGuiViewportFlags_NoAutoMerge                     = 1 << 8,
    ImGuiViewportFlags_CanHostOtherWindows             = 1 << 9,
}

enum {
    ImGuiDataType_S8                                   = 0,
    ImGuiDataType_U8                                   = 1,
    ImGuiDataType_S16                                  = 2,
    ImGuiDataType_U16                                  = 3,
    ImGuiDataType_S32                                  = 4,
    ImGuiDataType_U32                                  = 5,
    ImGuiDataType_S64                                  = 6,
    ImGuiDataType_U64                                  = 7,
    ImGuiDataType_Float                                = 8,
    ImGuiDataType_Double                               = 9,
    ImGuiDataType_COUNT                                = 10,
}

enum {
    ImDrawCornerFlags_None                             = 0,
    ImDrawCornerFlags_TopLeft                          = 1 << 0,
    ImDrawCornerFlags_TopRight                         = 1 << 1,
    ImDrawCornerFlags_BotLeft                          = 1 << 2,
    ImDrawCornerFlags_BotRight                         = 1 << 3,
    ImDrawCornerFlags_Top                              = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
    ImDrawCornerFlags_Bot                              = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_Left                             = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
    ImDrawCornerFlags_Right                            = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_All                              = 0xF,
}

enum {
    ImGuiTabItemFlags_None                             = 0,
    ImGuiTabItemFlags_UnsavedDocument                  = 1 << 0,
    ImGuiTabItemFlags_SetSelected                      = 1 << 1,
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton     = 1 << 2,
    ImGuiTabItemFlags_NoPushId                         = 1 << 3,
}

enum {
    ImGuiKey_Tab                                       = 0,
    ImGuiKey_LeftArrow                                 = 1,
    ImGuiKey_RightArrow                                = 2,
    ImGuiKey_UpArrow                                   = 3,
    ImGuiKey_DownArrow                                 = 4,
    ImGuiKey_PageUp                                    = 5,
    ImGuiKey_PageDown                                  = 6,
    ImGuiKey_Home                                      = 7,
    ImGuiKey_End                                       = 8,
    ImGuiKey_Insert                                    = 9,
    ImGuiKey_Delete                                    = 10,
    ImGuiKey_Backspace                                 = 11,
    ImGuiKey_Space                                     = 12,
    ImGuiKey_Enter                                     = 13,
    ImGuiKey_Escape                                    = 14,
    ImGuiKey_KeyPadEnter                               = 15,
    ImGuiKey_A                                         = 16,
    ImGuiKey_C                                         = 17,
    ImGuiKey_V                                         = 18,
    ImGuiKey_X                                         = 19,
    ImGuiKey_Y                                         = 20,
    ImGuiKey_Z                                         = 21,
    ImGuiKey_COUNT                                     = 22,
}

enum {
    ImGuiBackendFlags_None                             = 0,
    ImGuiBackendFlags_HasGamepad                       = 1 << 0,
    ImGuiBackendFlags_HasMouseCursors                  = 1 << 1,
    ImGuiBackendFlags_HasSetMousePos                   = 1 << 2,
    ImGuiBackendFlags_RendererHasVtxOffset             = 1 << 3,
    ImGuiBackendFlags_PlatformHasViewports             = 1 << 10,
    ImGuiBackendFlags_HasMouseHoveredViewport          = 1 << 11,
    ImGuiBackendFlags_RendererHasViewports             = 1 << 12,
}

enum {
    ImGuiFocusedFlags_None                             = 0,
    ImGuiFocusedFlags_ChildWindows                     = 1 << 0,
    ImGuiFocusedFlags_RootWindow                       = 1 << 1,
    ImGuiFocusedFlags_AnyWindow                        = 1 << 2,
    ImGuiFocusedFlags_RootAndChildWindows              = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows,
}

enum {
    ImGuiDir_None                                      = -1,
    ImGuiDir_Left                                      = 0,
    ImGuiDir_Right                                     = 1,
    ImGuiDir_Up                                        = 2,
    ImGuiDir_Down                                      = 3,
    ImGuiDir_COUNT                                     = 4,
}

enum {
    ImGuiColorEditFlags_None                           = 0,
    ImGuiColorEditFlags_NoAlpha                        = 1 << 1,
    ImGuiColorEditFlags_NoPicker                       = 1 << 2,
    ImGuiColorEditFlags_NoOptions                      = 1 << 3,
    ImGuiColorEditFlags_NoSmallPreview                 = 1 << 4,
    ImGuiColorEditFlags_NoInputs                       = 1 << 5,
    ImGuiColorEditFlags_NoTooltip                      = 1 << 6,
    ImGuiColorEditFlags_NoLabel                        = 1 << 7,
    ImGuiColorEditFlags_NoSidePreview                  = 1 << 8,
    ImGuiColorEditFlags_NoDragDrop                     = 1 << 9,
    ImGuiColorEditFlags_NoBorder                       = 1 << 10,
    ImGuiColorEditFlags_AlphaBar                       = 1 << 16,
    ImGuiColorEditFlags_AlphaPreview                   = 1 << 17,
    ImGuiColorEditFlags_AlphaPreviewHalf               = 1 << 18,
    ImGuiColorEditFlags_HDR                            = 1 << 19,
    ImGuiColorEditFlags_DisplayRGB                     = 1 << 20,
    ImGuiColorEditFlags_DisplayHSV                     = 1 << 21,
    ImGuiColorEditFlags_DisplayHex                     = 1 << 22,
    ImGuiColorEditFlags_Uint8                          = 1 << 23,
    ImGuiColorEditFlags_Float                          = 1 << 24,
    ImGuiColorEditFlags_PickerHueBar                   = 1 << 25,
    ImGuiColorEditFlags_PickerHueWheel                 = 1 << 26,
    ImGuiColorEditFlags_InputRGB                       = 1 << 27,
    ImGuiColorEditFlags_InputHSV                       = 1 << 28,
    ImGuiColorEditFlags__OptionsDefault                = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags__DisplayMask                   = ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_DisplayHSV|ImGuiColorEditFlags_DisplayHex,
    ImGuiColorEditFlags__DataTypeMask                  = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags__PickerMask                    = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags__InputMask                     = ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_InputHSV,
}

enum {
    ImGuiMouseCursor_None                              = -1,
    ImGuiMouseCursor_Arrow                             = 0,
    ImGuiMouseCursor_TextInput                         = 1,
    ImGuiMouseCursor_ResizeAll                         = 2,
    ImGuiMouseCursor_ResizeNS                          = 3,
    ImGuiMouseCursor_ResizeEW                          = 4,
    ImGuiMouseCursor_ResizeNESW                        = 5,
    ImGuiMouseCursor_ResizeNWSE                        = 6,
    ImGuiMouseCursor_Hand                              = 7,
    ImGuiMouseCursor_NotAllowed                        = 8,
    ImGuiMouseCursor_COUNT                             = 9,
}

enum {
    ImGuiSelectableFlags_None                          = 0,
    ImGuiSelectableFlags_DontClosePopups               = 1 << 0,
    ImGuiSelectableFlags_SpanAllColumns                = 1 << 1,
    ImGuiSelectableFlags_AllowDoubleClick              = 1 << 2,
    ImGuiSelectableFlags_Disabled                      = 1 << 3,
    ImGuiSelectableFlags_AllowItemOverlap              = 1 << 4,
}

enum {
    ImGuiMouseButton_Left                              = 0,
    ImGuiMouseButton_Right                             = 1,
    ImGuiMouseButton_Middle                            = 2,
    ImGuiMouseButton_COUNT                             = 5,
}

enum {
    ImGuiNavInput_Activate                             = 0,
    ImGuiNavInput_Cancel                               = 1,
    ImGuiNavInput_Input                                = 2,
    ImGuiNavInput_Menu                                 = 3,
    ImGuiNavInput_DpadLeft                             = 4,
    ImGuiNavInput_DpadRight                            = 5,
    ImGuiNavInput_DpadUp                               = 6,
    ImGuiNavInput_DpadDown                             = 7,
    ImGuiNavInput_LStickLeft                           = 8,
    ImGuiNavInput_LStickRight                          = 9,
    ImGuiNavInput_LStickUp                             = 10,
    ImGuiNavInput_LStickDown                           = 11,
    ImGuiNavInput_FocusPrev                            = 12,
    ImGuiNavInput_FocusNext                            = 13,
    ImGuiNavInput_TweakSlow                            = 14,
    ImGuiNavInput_TweakFast                            = 15,
    ImGuiNavInput_KeyMenu_                             = 16,
    ImGuiNavInput_KeyLeft_                             = 17,
    ImGuiNavInput_KeyRight_                            = 18,
    ImGuiNavInput_KeyUp_                               = 19,
    ImGuiNavInput_KeyDown_                             = 20,
    ImGuiNavInput_COUNT                                = 21,
    ImGuiNavInput_InternalStart_                       = ImGuiNavInput_KeyMenu_,
}

enum {
    ImGuiDragDropFlags_None                            = 0,
    ImGuiDragDropFlags_SourceNoPreviewTooltip          = 1 << 0,
    ImGuiDragDropFlags_SourceNoDisableHover            = 1 << 1,
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers        = 1 << 2,
    ImGuiDragDropFlags_SourceAllowNullID               = 1 << 3,
    ImGuiDragDropFlags_SourceExtern                    = 1 << 4,
    ImGuiDragDropFlags_SourceAutoExpirePayload         = 1 << 5,
    ImGuiDragDropFlags_AcceptBeforeDelivery            = 1 << 10,
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect         = 1 << 11,
    ImGuiDragDropFlags_AcceptNoPreviewTooltip          = 1 << 12,
    ImGuiDragDropFlags_AcceptPeekOnly                  = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect,
}

enum {
    ImGuiCond_Always                                   = 1 << 0,
    ImGuiCond_Once                                     = 1 << 1,
    ImGuiCond_FirstUseEver                             = 1 << 2,
    ImGuiCond_Appearing                                = 1 << 3,
}

enum {
    ImGuiHoveredFlags_None                             = 0,
    ImGuiHoveredFlags_ChildWindows                     = 1 << 0,
    ImGuiHoveredFlags_RootWindow                       = 1 << 1,
    ImGuiHoveredFlags_AnyWindow                        = 1 << 2,
    ImGuiHoveredFlags_AllowWhenBlockedByPopup          = 1 << 3,
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem     = 1 << 5,
    ImGuiHoveredFlags_AllowWhenOverlapped              = 1 << 6,
    ImGuiHoveredFlags_AllowWhenDisabled                = 1 << 7,
    ImGuiHoveredFlags_RectOnly                         = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows              = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,
}

enum {
    ImGuiTabBarFlags_None                              = 0,
    ImGuiTabBarFlags_Reorderable                       = 1 << 0,
    ImGuiTabBarFlags_AutoSelectNewTabs                 = 1 << 1,
    ImGuiTabBarFlags_TabListPopupButton                = 1 << 2,
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton      = 1 << 3,
    ImGuiTabBarFlags_NoTabListScrollingButtons         = 1 << 4,
    ImGuiTabBarFlags_NoTooltip                         = 1 << 5,
    ImGuiTabBarFlags_FittingPolicyResizeDown           = 1 << 6,
    ImGuiTabBarFlags_FittingPolicyScroll               = 1 << 7,
    ImGuiTabBarFlags_FittingPolicyMask_                = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    ImGuiTabBarFlags_FittingPolicyDefault_             = ImGuiTabBarFlags_FittingPolicyResizeDown,
}

enum {
    ImGuiConfigFlags_None                              = 0,
    ImGuiConfigFlags_NavEnableKeyboard                 = 1 << 0,
    ImGuiConfigFlags_NavEnableGamepad                  = 1 << 1,
    ImGuiConfigFlags_NavEnableSetMousePos              = 1 << 2,
    ImGuiConfigFlags_NavNoCaptureKeyboard              = 1 << 3,
    ImGuiConfigFlags_NoMouse                           = 1 << 4,
    ImGuiConfigFlags_NoMouseCursorChange               = 1 << 5,
    ImGuiConfigFlags_DockingEnable                     = 1 << 6,
    ImGuiConfigFlags_ViewportsEnable                   = 1 << 10,
    ImGuiConfigFlags_DpiEnableScaleViewports           = 1 << 14,
    ImGuiConfigFlags_DpiEnableScaleFonts               = 1 << 15,
    ImGuiConfigFlags_IsSRGB                            = 1 << 20,
    ImGuiConfigFlags_IsTouchScreen                     = 1 << 21,
}

enum {
    ImGuiStyleVar_Alpha                                = 0,
    ImGuiStyleVar_WindowPadding                        = 1,
    ImGuiStyleVar_WindowRounding                       = 2,
    ImGuiStyleVar_WindowBorderSize                     = 3,
    ImGuiStyleVar_WindowMinSize                        = 4,
    ImGuiStyleVar_WindowTitleAlign                     = 5,
    ImGuiStyleVar_ChildRounding                        = 6,
    ImGuiStyleVar_ChildBorderSize                      = 7,
    ImGuiStyleVar_PopupRounding                        = 8,
    ImGuiStyleVar_PopupBorderSize                      = 9,
    ImGuiStyleVar_FramePadding                         = 10,
    ImGuiStyleVar_FrameRounding                        = 11,
    ImGuiStyleVar_FrameBorderSize                      = 12,
    ImGuiStyleVar_ItemSpacing                          = 13,
    ImGuiStyleVar_ItemInnerSpacing                     = 14,
    ImGuiStyleVar_IndentSpacing                        = 15,
    ImGuiStyleVar_ScrollbarSize                        = 16,
    ImGuiStyleVar_ScrollbarRounding                    = 17,
    ImGuiStyleVar_GrabMinSize                          = 18,
    ImGuiStyleVar_GrabRounding                         = 19,
    ImGuiStyleVar_TabRounding                          = 20,
    ImGuiStyleVar_ButtonTextAlign                      = 21,
    ImGuiStyleVar_SelectableTextAlign                  = 22,
    ImGuiStyleVar_COUNT                                = 23,
}

enum {
    ImGuiCol_Text                                      = 0,
    ImGuiCol_TextDisabled                              = 1,
    ImGuiCol_WindowBg                                  = 2,
    ImGuiCol_ChildBg                                   = 3,
    ImGuiCol_PopupBg                                   = 4,
    ImGuiCol_Border                                    = 5,
    ImGuiCol_BorderShadow                              = 6,
    ImGuiCol_FrameBg                                   = 7,
    ImGuiCol_FrameBgHovered                            = 8,
    ImGuiCol_FrameBgActive                             = 9,
    ImGuiCol_TitleBg                                   = 10,
    ImGuiCol_TitleBgActive                             = 11,
    ImGuiCol_TitleBgCollapsed                          = 12,
    ImGuiCol_MenuBarBg                                 = 13,
    ImGuiCol_ScrollbarBg                               = 14,
    ImGuiCol_ScrollbarGrab                             = 15,
    ImGuiCol_ScrollbarGrabHovered                      = 16,
    ImGuiCol_ScrollbarGrabActive                       = 17,
    ImGuiCol_CheckMark                                 = 18,
    ImGuiCol_SliderGrab                                = 19,
    ImGuiCol_SliderGrabActive                          = 20,
    ImGuiCol_Button                                    = 21,
    ImGuiCol_ButtonHovered                             = 22,
    ImGuiCol_ButtonActive                              = 23,
    ImGuiCol_Header                                    = 24,
    ImGuiCol_HeaderHovered                             = 25,
    ImGuiCol_HeaderActive                              = 26,
    ImGuiCol_Separator                                 = 27,
    ImGuiCol_SeparatorHovered                          = 28,
    ImGuiCol_SeparatorActive                           = 29,
    ImGuiCol_ResizeGrip                                = 30,
    ImGuiCol_ResizeGripHovered                         = 31,
    ImGuiCol_ResizeGripActive                          = 32,
    ImGuiCol_Tab                                       = 33,
    ImGuiCol_TabHovered                                = 34,
    ImGuiCol_TabActive                                 = 35,
    ImGuiCol_TabUnfocused                              = 36,
    ImGuiCol_TabUnfocusedActive                        = 37,
    ImGuiCol_DockingPreview                            = 38,
    ImGuiCol_DockingEmptyBg                            = 39,
    ImGuiCol_PlotLines                                 = 40,
    ImGuiCol_PlotLinesHovered                          = 41,
    ImGuiCol_PlotHistogram                             = 42,
    ImGuiCol_PlotHistogramHovered                      = 43,
    ImGuiCol_TextSelectedBg                            = 44,
    ImGuiCol_DragDropTarget                            = 45,
    ImGuiCol_NavHighlight                              = 46,
    ImGuiCol_NavWindowingHighlight                     = 47,
    ImGuiCol_NavWindowingDimBg                         = 48,
    ImGuiCol_ModalWindowDimBg                          = 49,
    ImGuiCol_COUNT                                     = 50,
}

enum {
    ImGuiWindowFlags_None                              = 0,
    ImGuiWindowFlags_NoTitleBar                        = 1 << 0,
    ImGuiWindowFlags_NoResize                          = 1 << 1,
    ImGuiWindowFlags_NoMove                            = 1 << 2,
    ImGuiWindowFlags_NoScrollbar                       = 1 << 3,
    ImGuiWindowFlags_NoScrollWithMouse                 = 1 << 4,
    ImGuiWindowFlags_NoCollapse                        = 1 << 5,
    ImGuiWindowFlags_AlwaysAutoResize                  = 1 << 6,
    ImGuiWindowFlags_NoBackground                      = 1 << 7,
    ImGuiWindowFlags_NoSavedSettings                   = 1 << 8,
    ImGuiWindowFlags_NoMouseInputs                     = 1 << 9,
    ImGuiWindowFlags_MenuBar                           = 1 << 10,
    ImGuiWindowFlags_HorizontalScrollbar               = 1 << 11,
    ImGuiWindowFlags_NoFocusOnAppearing                = 1 << 12,
    ImGuiWindowFlags_NoBringToFrontOnFocus             = 1 << 13,
    ImGuiWindowFlags_AlwaysVerticalScrollbar           = 1 << 14,
    ImGuiWindowFlags_AlwaysHorizontalScrollbar         = 1<< 15,
    ImGuiWindowFlags_AlwaysUseWindowPadding            = 1 << 16,
    ImGuiWindowFlags_NoNavInputs                       = 1 << 18,
    ImGuiWindowFlags_NoNavFocus                        = 1 << 19,
    ImGuiWindowFlags_UnsavedDocument                   = 1 << 20,
    ImGuiWindowFlags_NoDocking                         = 1 << 21,
    ImGuiWindowFlags_NoNav                             = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NoDecoration                      = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    ImGuiWindowFlags_NoInputs                          = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NavFlattened                      = 1 << 23,
    ImGuiWindowFlags_ChildWindow                       = 1 << 24,
    ImGuiWindowFlags_Tooltip                           = 1 << 25,
    ImGuiWindowFlags_Popup                             = 1 << 26,
    ImGuiWindowFlags_Modal                             = 1 << 27,
    ImGuiWindowFlags_ChildMenu                         = 1 << 28,
    ImGuiWindowFlags_DockNodeHost                      = 1 << 29,
}


struct ImVector(T)
{
    int                         Size = 0;
    int                         Capacity = 0;
    T*                          Data = null;

    ~this()
    {
        import core.stdc.stdlib;
        if (Data !is null) free(Data);
    }
    this(this)
    {
        reserve(Capacity);
    }
    void clear()
    {
        Size = 0;
    }
    void reserve(int newcap)
    {
        import core.stdc.stdlib;
        import std.algorithm;
        T* newData = cast(T*)(malloc(T.sizeof * newcap));
        auto copysize = min(newcap, Size);
        newData[0..copysize] = Data[0..copysize];
        newData[copysize..newcap] = T();
        Data = newData;
        Size = copysize;
        Capacity = newcap;
    }
    void resize(int newsize)
    {
        if (newsize > Capacity) 
            reserve(newsize);
        if (newsize < Capacity)
            Data[Size..newsize] = T();
        Size = newsize;
    }
    void push_back(ref T item)
    {
        if (Size >= Capacity)
            reserve(Size + 32);
        range()[Size++] = item;
    }
    T pop_back()
    {
        return range()[--Size];
    }
    T[] range() { return Data[0..Size]; }
    const(T[]) range() const { return Data[0..Size]; }
    ref T opIndex(int index) {
        return range()[index];
    }
    ref const(T) opIndex(int index) const {
        return range()[index];
    }
}

alias ImVector_ImDrawVert = ImVector!(ImDrawVert);
alias ImVector_ImGuiTextRange = ImVector!(ImGuiTextRange);
alias ImVector_ImTextureID = ImVector!(ImTextureID);
alias ImVector_ImVec2 = ImVector!(ImVec2);
alias ImVector_ImFontConfig = ImVector!(ImFontConfig);
alias ImVector_ImFontPtr = ImVector!(ImFont*);
alias ImVector_ImDrawIdx = ImVector!(ImDrawIdx);
alias ImVector_ImGuiStoragePair = ImVector!(ImGuiStoragePair);
alias ImVector_ImWchar = ImVector!(ImWchar);
alias ImVector_ImU32 = ImVector!(ImU32);
alias ImVector_float = ImVector!(float);
alias ImVector_char = ImVector!(char);
alias ImVector_ImDrawCmd = ImVector!(ImDrawCmd);
alias ImVector_ImFontAtlasCustomRect = ImVector!(ImFontAtlasCustomRect);
alias ImVector_ImGuiViewportPtr = ImVector!(ImGuiViewport*);
alias ImVector_ImGuiPlatformMonitor = ImVector!(ImGuiPlatformMonitor);
alias ImVector_ImFontGlyph = ImVector!(ImFontGlyph);
alias ImVector_ImDrawChannel = ImVector!(ImDrawChannel);
alias ImVector_ImVec4 = ImVector!(ImVec4);

struct ImGuiSizeCallbackData
{
    void* UserData;
    ImVec2 Pos;
    ImVec2 CurrentSize;
    ImVec2 DesiredSize;


}

struct ImFontAtlas
{
    bool Locked;
    ImFontAtlasFlags Flags;
    ImTextureID TexID;
    int TexDesiredWidth;
    int TexGlyphPadding;
    char* TexPixelsAlpha8;
    uint* TexPixelsRGBA32;
    int TexWidth;
    int TexHeight;
    ImVec2 TexUvScale;
    ImVec2 TexUvWhitePixel;
    ImVector_ImFontPtr Fonts;
    ImVector_ImFontAtlasCustomRect CustomRects;
    ImVector_ImFontConfig ConfigData;
    int[1] CustomRectIds;


//    void function() }
    void ClearFonts(A...)(A a) { ImFontAtlas_ClearFonts(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesJapanese(A...)(A a) { return ImFontAtlas_GetGlyphRangesJapanese(&this, a); }
//    void function() }
    void ClearTexData(A...)(A a) { ImFontAtlas_ClearTexData(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesVietnamese(A...)(A a) { return ImFontAtlas_GetGlyphRangesVietnamese(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesDefault(A...)(A a) { return ImFontAtlas_GetGlyphRangesDefault(&this, a); }
//    void function(char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel = null) }
    void GetTexDataAsAlpha8(A...)(A a) { ImFontAtlas_GetTexDataAsAlpha8(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImFontAtlas_Clear(&this, a); }
//    ImFont* function(const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null) }
    ImFont* AddFontFromMemoryCompressedTTF(A...)(A a) { return ImFontAtlas_AddFontFromMemoryCompressedTTF(&this, a); }
//    bool function() }
    bool Build(A...)(A a) { return ImFontAtlas_Build(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesKorean(A...)(A a) { return ImFontAtlas_GetGlyphRangesKorean(&this, a); }
//    ImFont* function(const ImFontConfig* font_cfg) }
    ImFont* AddFont(A...)(A a) { return ImFontAtlas_AddFont(&this, a); }
//    ImFont* function(const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null) }
    ImFont* AddFontFromMemoryCompressedBase85TTF(A...)(A a) { return ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(&this, a); }
//    ImFontAtlas* function() }
    static ImFontAtlas* from(A...)(A a) { return ImFontAtlas_ImFontAtlas(a); }
//    void function() }
    void ClearInputData(A...)(A a) { ImFontAtlas_ClearInputData(&this, a); }
//    void function(char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel = null) }
    void GetTexDataAsRGBA32(A...)(A a) { ImFontAtlas_GetTexDataAsRGBA32(&this, a); }
//    const(ImFontAtlasCustomRect)* function(int index) }
    const(ImFontAtlasCustomRect)* GetCustomRectByIndex(A...)(A a) { return ImFontAtlas_GetCustomRectByIndex(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesChineseSimplifiedCommon(A...)(A a) { return ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(&this, a); }
//    int function(uint id,int width,int height) }
    int AddCustomRectRegular(A...)(A a) { return ImFontAtlas_AddCustomRectRegular(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesChineseFull(A...)(A a) { return ImFontAtlas_GetGlyphRangesChineseFull(&this, a); }
//    ImFont* function(const ImFontConfig* font_cfg = null) }
    ImFont* AddFontDefault(A...)(A a) { return ImFontAtlas_AddFontDefault(&this, a); }
//    bool function(ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ref ImVec2[2] out_uv_border,ref ImVec2[2] out_uv_fill) }
    bool GetMouseCursorTexData(A...)(A a) { return ImFontAtlas_GetMouseCursorTexData(&this, a); }
//    ImFont* function(void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null) }
    ImFont* AddFontFromMemoryTTF(A...)(A a) { return ImFontAtlas_AddFontFromMemoryTTF(&this, a); }
//    bool function() }
    bool IsBuilt(A...)(A a) { return ImFontAtlas_IsBuilt(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesThai(A...)(A a) { return ImFontAtlas_GetGlyphRangesThai(&this, a); }
//    ImFont* function(const char* filename,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null) }
    ImFont* AddFontFromFileTTF(A...)(A a) { return ImFontAtlas_AddFontFromFileTTF(&this, a); }
//    int function(ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset = ImVec2(0,0)) }
    int AddCustomRectFontGlyph(A...)(A a) { return ImFontAtlas_AddCustomRectFontGlyph(&this, a); }
//    void function(ImTextureID id) }
    void SetTexID(A...)(A a) { ImFontAtlas_SetTexID(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImFontAtlas_destroy(&this, a); }
//    const(ImWchar)* function() }
    const(ImWchar)* GetGlyphRangesCyrillic(A...)(A a) { return ImFontAtlas_GetGlyphRangesCyrillic(&this, a); }
//    void function(const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max) }
    void CalcCustomRectUV(A...)(A a) { ImFontAtlas_CalcCustomRectUV(&this, a); }
}

struct ImDrawCmd
{
    uint ElemCount;
    ImVec4 ClipRect;
    ImTextureID TextureId;
    uint VtxOffset;
    uint IdxOffset;
    ImDrawCallback UserCallback;
    void* UserCallbackData;


//    void function() }
    void destroy(A...)(A a) { ImDrawCmd_destroy(&this, a); }
//    ImDrawCmd* function() }
    static ImDrawCmd* from(A...)(A a) { return ImDrawCmd_ImDrawCmd(a); }
}

struct ImFontAtlasCustomRect
{
    uint ID;
    ushort Width;
    ushort Height;
    ushort X;
    ushort Y;
    float GlyphAdvanceX;
    ImVec2 GlyphOffset;
    ImFont* Font;


//    bool function() }
    bool IsPacked(A...)(A a) { return ImFontAtlasCustomRect_IsPacked(&this, a); }
//    ImFontAtlasCustomRect* function() }
    static ImFontAtlasCustomRect* from(A...)(A a) { return ImFontAtlasCustomRect_ImFontAtlasCustomRect(a); }
//    void function() }
    void destroy(A...)(A a) { ImFontAtlasCustomRect_destroy(&this, a); }
}

struct ImDrawData
{
    bool Valid;
    ImDrawList** CmdLists;
    int CmdListsCount;
    int TotalIdxCount;
    int TotalVtxCount;
    ImVec2 DisplayPos;
    ImVec2 DisplaySize;
    ImVec2 FramebufferScale;
    ImGuiViewport* OwnerViewport;


//    void function() }
    void DeIndexAllBuffers(A...)(A a) { ImDrawData_DeIndexAllBuffers(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImDrawData_destroy(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImDrawData_Clear(&this, a); }
//    ImDrawData* function() }
    static ImDrawData* from(A...)(A a) { return ImDrawData_ImDrawData(a); }
//    void function(const ImVec2 fb_scale) }
    void ScaleClipRects(A...)(A a) { ImDrawData_ScaleClipRects(&this, a); }
}

struct ImFontConfig
{
    void* FontData;
    int FontDataSize;
    bool FontDataOwnedByAtlas;
    int FontNo;
    float SizePixels;
    int OversampleH;
    int OversampleV;
    bool PixelSnapH;
    ImVec2 GlyphExtraSpacing;
    ImVec2 GlyphOffset;
    const(ImWchar)* GlyphRanges;
    float GlyphMinAdvanceX;
    float GlyphMaxAdvanceX;
    bool MergeMode;
    uint RasterizerFlags;
    float RasterizerMultiply;
    ImWchar EllipsisChar;
    char[40] Name;
    ImFont* DstFont;


//    ImFontConfig* function() }
    static ImFontConfig* from(A...)(A a) { return ImFontConfig_ImFontConfig(a); }
//    void function() }
    void destroy(A...)(A a) { ImFontConfig_destroy(&this, a); }
}

struct ImGuiStorage
{
    ImVector_ImGuiStoragePair Data;


//    float function(ImGuiID key,float default_val = 0.0f) }
    float GetFloat(A...)(A a) { return ImGuiStorage_GetFloat(&this, a); }
//    void** function(ImGuiID key,void* default_val = null) }
    void** GetVoidPtrRef(A...)(A a) { return ImGuiStorage_GetVoidPtrRef(&this, a); }
//    void function(ImGuiID key,bool val) }
    void SetBool(A...)(A a) { ImGuiStorage_SetBool(&this, a); }
//    void function(int val) }
    void SetAllInt(A...)(A a) { ImGuiStorage_SetAllInt(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImGuiStorage_Clear(&this, a); }
//    void function() }
    void BuildSortByKey(A...)(A a) { ImGuiStorage_BuildSortByKey(&this, a); }
//    int* function(ImGuiID key,int default_val = 0) }
    int* GetIntRef(A...)(A a) { return ImGuiStorage_GetIntRef(&this, a); }
//    void* function(ImGuiID key) }
    void* GetVoidPtr(A...)(A a) { return ImGuiStorage_GetVoidPtr(&this, a); }
//    float* function(ImGuiID key,float default_val = 0.0f) }
    float* GetFloatRef(A...)(A a) { return ImGuiStorage_GetFloatRef(&this, a); }
//    int function(ImGuiID key,int default_val = 0) }
    int GetInt(A...)(A a) { return ImGuiStorage_GetInt(&this, a); }
//    bool* function(ImGuiID key,bool default_val = false) }
    bool* GetBoolRef(A...)(A a) { return ImGuiStorage_GetBoolRef(&this, a); }
//    void function(ImGuiID key,void* val) }
    void SetVoidPtr(A...)(A a) { ImGuiStorage_SetVoidPtr(&this, a); }
//    bool function(ImGuiID key,bool default_val = false) }
    bool GetBool(A...)(A a) { return ImGuiStorage_GetBool(&this, a); }
//    void function(ImGuiID key,int val) }
    void SetInt(A...)(A a) { ImGuiStorage_SetInt(&this, a); }
//    void function(ImGuiID key,float val) }
    void SetFloat(A...)(A a) { ImGuiStorage_SetFloat(&this, a); }
}

struct ImGuiInputTextCallbackData
{
    ImGuiInputTextFlags EventFlag;
    ImGuiInputTextFlags Flags;
    void* UserData;
    ImWchar EventChar;
    ImGuiKey EventKey;
    char* Buf;
    int BufTextLen;
    int BufSize;
    bool BufDirty;
    int CursorPos;
    int SelectionStart;
    int SelectionEnd;


//    void function(int pos,const char* text,const char* text_end = null) }
    void InsertChars(A...)(A a) { ImGuiInputTextCallbackData_InsertChars(&this, a); }
//    ImGuiInputTextCallbackData* function() }
    static ImGuiInputTextCallbackData* from(A...)(A a) { return ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(a); }
//    void function() }
    void destroy(A...)(A a) { ImGuiInputTextCallbackData_destroy(&this, a); }
//    bool function() }
    bool HasSelection(A...)(A a) { return ImGuiInputTextCallbackData_HasSelection(&this, a); }
//    void function(int pos,int bytes_count) }
    void DeleteChars(A...)(A a) { ImGuiInputTextCallbackData_DeleteChars(&this, a); }
}

struct ImDrawList
{
    ImVector_ImDrawCmd CmdBuffer;
    ImVector_ImDrawIdx IdxBuffer;
    ImVector_ImDrawVert VtxBuffer;
    ImDrawListFlags Flags;
    const(ImDrawListSharedData)* _Data;
    const(char)* _OwnerName;
    uint _VtxCurrentOffset;
    uint _VtxCurrentIdx;
    ImDrawVert* _VtxWritePtr;
    ImDrawIdx* _IdxWritePtr;
    ImVector_ImVec4 _ClipRectStack;
    ImVector_ImTextureID _TextureIdStack;
    ImVector_ImVec2 _Path;
    ImDrawListSplitter _Splitter;


//    void function(const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness = 1.0f) }
    void AddLine(A...)(A a) { ImDrawList_AddLine(&this, a); }
//    void function() }
    void PathClear(A...)(A a) { ImDrawList_PathClear(&this, a); }
//    void function(ImDrawCallback callback,void* callback_data) }
    void AddCallback(A...)(A a) { ImDrawList_AddCallback(&this, a); }
//    void function(ImVec2 *pOut,) }
    ImVec2 GetClipRectMin(A...)(A a) { return ImDrawList_GetClipRectMin(&this, a); }
//    void function(const ImVec2 rect_min,const ImVec2 rect_max,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All) }
    void PathRect(A...)(A a) { ImDrawList_PathRect(&this, a); }
//    void function() }
    void PopClipRect(A...)(A a) { ImDrawList_PopClipRect(&this, a); }
//    void function(ImDrawIdx idx) }
    void PrimWriteIdx(A...)(A a) { ImDrawList_PrimWriteIdx(&this, a); }
//    void function() }
    void UpdateClipRect(A...)(A a) { ImDrawList_UpdateClipRect(&this, a); }
//    void function(const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end = null) }
    void AddText(A...)(A a) { ImDrawList_AddText(&this, a); }
//    void function(const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col) }
    void PrimRectUV(A...)(A a) { ImDrawList_PrimRectUV(&this, a); }
//    void function(int idx_count,int vtx_count) }
    void PrimReserve(A...)(A a) { ImDrawList_PrimReserve(&this, a); }
//    void function(const ImVec2 center,float radius,ImU32 col,int num_segments = 12) }
    void AddCircleFilled(A...)(A a) { ImDrawList_AddCircleFilled(&this, a); }
//    void function(int n) }
    void ChannelsSetCurrent(A...)(A a) { ImDrawList_ChannelsSetCurrent(&this, a); }
//    void function() }
    void ChannelsMerge(A...)(A a) { ImDrawList_ChannelsMerge(&this, a); }
//    void function(const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All) }
    void AddRectFilled(A...)(A a) { ImDrawList_AddRectFilled(&this, a); }
//    void function(const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12) }
    void PathArcToFast(A...)(A a) { ImDrawList_PathArcToFast(&this, a); }
//    void function(ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1 = ImVec2(0,0),const ImVec2 uv2 = ImVec2(1,0),const ImVec2 uv3 = ImVec2(1,1),const ImVec2 uv4 = ImVec2(0,1),ImU32 col = ((cast(ImU32)255<<24)|(cast(ImU32)255<<16)|(cast(ImU32)255<<8)|(cast(ImU32)255<<0))) }
    void AddImageQuad(A...)(A a) { ImDrawList_AddImageQuad(&this, a); }
//    void function(const ImVec2 pos) }
    void PathLineToMergeDuplicate(A...)(A a) { ImDrawList_PathLineToMergeDuplicate(&this, a); }
//    void function(ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect = false) }
    void PushClipRect(A...)(A a) { ImDrawList_PushClipRect(&this, a); }
//    void function(int idx_count,int vtx_count) }
    void PrimUnreserve(A...)(A a) { ImDrawList_PrimUnreserve(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImDrawList_Clear(&this, a); }
//    void function(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments = 0) }
    void AddBezierCurve(A...)(A a) { ImDrawList_AddBezierCurve(&this, a); }
//    void function(const ImVec2 center,float radius,float a_min,float a_max,int num_segments = 10) }
    void PathArcTo(A...)(A a) { ImDrawList_PathArcTo(&this, a); }
//    void function(ImU32 col,bool closed,float thickness = 1.0f) }
    void PathStroke(A...)(A a) { ImDrawList_PathStroke(&this, a); }
//    void function(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col) }
    void AddTriangleFilled(A...)(A a) { ImDrawList_AddTriangleFilled(&this, a); }
//    void function() }
    void PopTextureID(A...)(A a) { ImDrawList_PopTextureID(&this, a); }
//    void function(const ImVec2 center,float radius,ImU32 col,int num_segments) }
    void AddNgonFilled(A...)(A a) { ImDrawList_AddNgonFilled(&this, a); }
//    void function(const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments = 0) }
    void PathBezierCurveTo(A...)(A a) { ImDrawList_PathBezierCurveTo(&this, a); }
//    void function(const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left) }
    void AddRectFilledMultiColor(A...)(A a) { ImDrawList_AddRectFilledMultiColor(&this, a); }
//    void function(const ImVec2 pos,const ImVec2 uv,ImU32 col) }
    void PrimVtx(A...)(A a) { ImDrawList_PrimVtx(&this, a); }
//    ImDrawList* function(const ImDrawListSharedData* shared_data) }
    static ImDrawList* from(A...)(A a) { return ImDrawList_ImDrawList(a); }
//    void function() }
    void destroy(A...)(A a) { ImDrawList_destroy(&this, a); }
//    void function() }
    void UpdateTextureID(A...)(A a) { ImDrawList_UpdateTextureID(&this, a); }
//    void function(const ImVec2 a,const ImVec2 b,ImU32 col) }
    void PrimRect(A...)(A a) { ImDrawList_PrimRect(&this, a); }
//    void function(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness = 1.0f) }
    void AddQuad(A...)(A a) { ImDrawList_AddQuad(&this, a); }
//    void function(const ImVec2 pos,const ImVec2 uv,ImU32 col) }
    void PrimWriteVtx(A...)(A a) { ImDrawList_PrimWriteVtx(&this, a); }
//    void function(const ImVec2* points,int num_points,ImU32 col) }
    void AddConvexPolyFilled(A...)(A a) { ImDrawList_AddConvexPolyFilled(&this, a); }
//    void function(const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All,float thickness = 1.0f) }
    void AddRect(A...)(A a) { ImDrawList_AddRect(&this, a); }
//    void function(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness = 1.0f) }
    void AddTriangle(A...)(A a) { ImDrawList_AddTriangle(&this, a); }
//    ImDrawList* function() }
    ImDrawList* CloneOutput(A...)(A a) { return ImDrawList_CloneOutput(&this, a); }
//    void function(ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All) }
    void AddImageRounded(A...)(A a) { ImDrawList_AddImageRounded(&this, a); }
//    void function(int count) }
    void ChannelsSplit(A...)(A a) { ImDrawList_ChannelsSplit(&this, a); }
//    void function(ImVec2 *pOut,) }
    ImVec2 GetClipRectMax(A...)(A a) { return ImDrawList_GetClipRectMax(&this, a); }
//    void function() }
    void ClearFreeMemory(A...)(A a) { ImDrawList_ClearFreeMemory(&this, a); }
//    void function(const ImVec2 pos) }
    void PathLineTo(A...)(A a) { ImDrawList_PathLineTo(&this, a); }
//    void function(ImU32 col) }
    void PathFillConvex(A...)(A a) { ImDrawList_PathFillConvex(&this, a); }
//    void function(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col) }
    void PrimQuadUV(A...)(A a) { ImDrawList_PrimQuadUV(&this, a); }
//    void function(const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end = null,float wrap_width = 0.0f,const ImVec4* cpu_fine_clip_rect = null) }
    void AddTextFontPtr(A...)(A a) { ImDrawList_AddTextFontPtr(&this, a); }
//    void function(const ImVec2* points,int num_points,ImU32 col,bool closed,float thickness) }
    void AddPolyline(A...)(A a) { ImDrawList_AddPolyline(&this, a); }
//    void function(const ImVec2 center,float radius,ImU32 col,int num_segments = 12,float thickness = 1.0f) }
    void AddCircle(A...)(A a) { ImDrawList_AddCircle(&this, a); }
//    void function() }
    void AddDrawCmd(A...)(A a) { ImDrawList_AddDrawCmd(&this, a); }
//    void function(ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min = ImVec2(0,0),const ImVec2 uv_max = ImVec2(1,1),ImU32 col = ((cast(ImU32)255<<24)|(cast(ImU32)255<<16)|(cast(ImU32)255<<8)|(cast(ImU32)255<<0))) }
    void AddImage(A...)(A a) { ImDrawList_AddImage(&this, a); }
//    void function(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col) }
    void AddQuadFilled(A...)(A a) { ImDrawList_AddQuadFilled(&this, a); }
//    void function(ImTextureID texture_id) }
    void PushTextureID(A...)(A a) { ImDrawList_PushTextureID(&this, a); }
//    void function(const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness = 1.0f) }
    void AddNgon(A...)(A a) { ImDrawList_AddNgon(&this, a); }
//    void function() }
    void PushClipRectFullScreen(A...)(A a) { ImDrawList_PushClipRectFullScreen(&this, a); }
}

struct ImDrawListSplitter
{
    int _Current;
    int _Count;
    ImVector_ImDrawChannel _Channels;


//    void function() }
    void ClearFreeMemory(A...)(A a) { ImDrawListSplitter_ClearFreeMemory(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImDrawListSplitter_Clear(&this, a); }
//    void function(ImDrawList* draw_list,int channel_idx) }
    void SetCurrentChannel(A...)(A a) { ImDrawListSplitter_SetCurrentChannel(&this, a); }
//    ImDrawListSplitter* function() }
    static ImDrawListSplitter* from(A...)(A a) { return ImDrawListSplitter_ImDrawListSplitter(a); }
//    void function() }
    void destroy(A...)(A a) { ImDrawListSplitter_destroy(&this, a); }
//    void function(ImDrawList* draw_list,int count) }
    void Split(A...)(A a) { ImDrawListSplitter_Split(&this, a); }
//    void function(ImDrawList* draw_list) }
    void Merge(A...)(A a) { ImDrawListSplitter_Merge(&this, a); }
}

struct ImGuiWindowClass
{
    ImGuiID ClassId;
    ImGuiID ParentViewportId;
    ImGuiViewportFlags ViewportFlagsOverrideSet;
    ImGuiViewportFlags ViewportFlagsOverrideClear;
    ImGuiDockNodeFlags DockNodeFlagsOverrideSet;
    ImGuiDockNodeFlags DockNodeFlagsOverrideClear;
    bool DockingAlwaysTabBar;
    bool DockingAllowUnclassed;


//    ImGuiWindowClass* function() }
    static ImGuiWindowClass* from(A...)(A a) { return ImGuiWindowClass_ImGuiWindowClass(a); }
//    void function() }
    void destroy(A...)(A a) { ImGuiWindowClass_destroy(&this, a); }
}

struct ImGuiPlatformIO
{
    extern( C ) {
    void function( ImGuiViewport* ) Platform_CreateWindow;
    void function( ImGuiViewport* vp ) Platform_DestroyWindow;
    void function(ImGuiViewport* vp) Platform_ShowWindow;
    void function(ImGuiViewport* vp,ImVec2 pos) Platform_SetWindowPos;
    ImVec2 function(ImGuiViewport* vp) Platform_GetWindowPos;
    void function(ImGuiViewport* vp,ImVec2 size) Platform_SetWindowSize;
    ImVec2 function(ImGuiViewport* vp) Platform_GetWindowSize;
    void function(ImGuiViewport* vp) Platform_SetWindowFocus;
    bool function(ImGuiViewport* vp) Platform_GetWindowFocus;
    bool function(ImGuiViewport* vp) Platform_GetWindowMinimized;
    void function(ImGuiViewport* vp,const(char)* title) Platform_SetWindowTitle;
    void function(ImGuiViewport* vp,float alpha) Platform_SetWindowAlpha;
    void function(ImGuiViewport* vp) Platform_UpdateWindow;
    void function(ImGuiViewport* vp,void* render_arg) Platform_RenderWindow;
    void function(ImGuiViewport* vp,void* render_arg) Platform_SwapBuffers;
    float function(ImGuiViewport* vp) Platform_GetWindowDpiScale;
    void function(ImGuiViewport* vp) Platform_OnChangedViewport;
    void function(ImGuiViewport* vp,ImVec2 pos) Platform_SetImeInputPos;
    int function(ImGuiViewport* vp,ImU64 vk_inst,const(void)* vk_allocators,ImU64* out_vk_surface) Platform_CreateVkSurface;
    void function(ImGuiViewport* vp) Renderer_CreateWindow;
    void function(ImGuiViewport* vp) Renderer_DestroyWindow;
    void function(ImGuiViewport* vp,ImVec2 size) Renderer_SetWindowSize;
    void function(ImGuiViewport* vp,void* render_arg) Renderer_RenderWindow;
    void function(ImGuiViewport* vp,void* render_arg) Renderer_SwapBuffers;
    }
    ImVector_ImGuiPlatformMonitor Monitors;
    ImGuiViewport* MainViewport;
    ImVector_ImGuiViewportPtr Viewports;


//    void function() }
    void destroy(A...)(A a) { ImGuiPlatformIO_destroy(&this, a); }
//    ImGuiPlatformIO* function() }
    static ImGuiPlatformIO* from(A...)(A a) { return ImGuiPlatformIO_ImGuiPlatformIO(a); }
}

struct ImGuiStoragePair
{
    ImGuiID key;
    union { int val_i; float val_f; void* val_p;} ;


//    void function() }
    void destroy(A...)(A a) { ImGuiStoragePair_destroy(&this, a); }
//    ImGuiStoragePair* function(ImGuiID _key,int _val_i) }
    static ImGuiStoragePair* fromInt(A...)(A a) { return ImGuiStoragePair_ImGuiStoragePairInt(a); }
//    ImGuiStoragePair* function(ImGuiID _key,void* _val_p) }
    static ImGuiStoragePair* fromPtr(A...)(A a) { return ImGuiStoragePair_ImGuiStoragePairPtr(a); }
//    ImGuiStoragePair* function(ImGuiID _key,float _val_f) }
    static ImGuiStoragePair* fromFloat(A...)(A a) { return ImGuiStoragePair_ImGuiStoragePairFloat(a); }
}

struct ImFont
{
    ImVector_float IndexAdvanceX;
    float FallbackAdvanceX;
    float FontSize;
    ImVector_ImWchar IndexLookup;
    ImVector_ImFontGlyph Glyphs;
    const(ImFontGlyph)* FallbackGlyph;
    ImVec2 DisplayOffset;
    ImFontAtlas* ContainerAtlas;
    const(ImFontConfig)* ConfigData;
    short ConfigDataCount;
    ImWchar FallbackChar;
    ImWchar EllipsisChar;
    bool DirtyLookupTables;
    float Scale;
    float Ascent;
    float Descent;
    int MetricsTotalSurface;


//    void function(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,ImWchar c) }
    void RenderChar(A...)(A a) { ImFont_RenderChar(&this, a); }
//    bool function() }
    bool IsLoaded(A...)(A a) { return ImFont_IsLoaded(&this, a); }
//    const(ImFontGlyph)* function(ImWchar c) }
    const(ImFontGlyph)* FindGlyph(A...)(A a) { return ImFont_FindGlyph(&this, a); }
//    float function(ImWchar c) }
    float GetCharAdvance(A...)(A a) { return ImFont_GetCharAdvance(&this, a); }
//    void function(ImWchar c) }
    void SetFallbackChar(A...)(A a) { ImFont_SetFallbackChar(&this, a); }
//    void function(ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x) }
    void AddGlyph(A...)(A a) { ImFont_AddGlyph(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImFont_destroy(&this, a); }
//    void function(int new_size) }
    void GrowIndex(A...)(A a) { ImFont_GrowIndex(&this, a); }
//    void function(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width = 0.0f,bool cpu_fine_clip = false) }
    void RenderText(A...)(A a) { ImFont_RenderText(&this, a); }
//    const(char)* function() }
    const(char)* GetDebugName(A...)(A a) { return ImFont_GetDebugName(&this, a); }
//    const(ImFontGlyph)* function(ImWchar c) }
    const(ImFontGlyph)* FindGlyphNoFallback(A...)(A a) { return ImFont_FindGlyphNoFallback(&this, a); }
//    void function(ImWchar dst,ImWchar src,bool overwrite_dst = true) }
    void AddRemapChar(A...)(A a) { ImFont_AddRemapChar(&this, a); }
//    ImFont* function() }
    static ImFont* from(A...)(A a) { return ImFont_ImFont(a); }
//    void function(ImVec2 *pOut,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end = null,const char** remaining = null) }
    ImVec2 CalcTextSizeA(A...)(A a) { return ImFont_CalcTextSizeA(&this, a); }
//    void function(ImWchar c,bool visible) }
    void SetGlyphVisible(A...)(A a) { ImFont_SetGlyphVisible(&this, a); }
//    const(char)* function(float scale,const char* text,const char* text_end,float wrap_width) }
    const(char)* CalcWordWrapPositionA(A...)(A a) { return ImFont_CalcWordWrapPositionA(&this, a); }
//    void function() }
    void BuildLookupTable(A...)(A a) { ImFont_BuildLookupTable(&this, a); }
//    void function() }
    void ClearOutputData(A...)(A a) { ImFont_ClearOutputData(&this, a); }
}

struct ImGuiViewport
{
    ImGuiID ID;
    ImGuiViewportFlags Flags;
    ImVec2 Pos;
    ImVec2 Size;
    ImVec2 WorkOffsetMin;
    ImVec2 WorkOffsetMax;
    float DpiScale;
    ImDrawData* DrawData;
    ImGuiID ParentViewportId;
    void* RendererUserData;
    void* PlatformUserData;
    void* PlatformHandle;
    void* PlatformHandleRaw;
    bool PlatformRequestMove;
    bool PlatformRequestResize;
    bool PlatformRequestClose;


//    void function() }
    void destroy(A...)(A a) { ImGuiViewport_destroy(&this, a); }
//    void function(ImVec2 *pOut,) }
    ImVec2 GetWorkSize(A...)(A a) { return ImGuiViewport_GetWorkSize(&this, a); }
//    ImGuiViewport* function() }
    static ImGuiViewport* from(A...)(A a) { return ImGuiViewport_ImGuiViewport(a); }
//    void function(ImVec2 *pOut,) }
    ImVec2 GetWorkPos(A...)(A a) { return ImGuiViewport_GetWorkPos(&this, a); }
}

struct ImGuiTextFilter
{
    char[256] InputBuf;
    ImVector_ImGuiTextRange Filters;
    int CountGrep;


//    bool function(const char* text,const char* text_end = null) }
    bool PassFilter(A...)(A a) { return ImGuiTextFilter_PassFilter(&this, a); }
//    bool function() }
    bool IsActive(A...)(A a) { return ImGuiTextFilter_IsActive(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImGuiTextFilter_destroy(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImGuiTextFilter_Clear(&this, a); }
//    void function() }
    void Build(A...)(A a) { ImGuiTextFilter_Build(&this, a); }
//    bool function(const char* label = "Filter(inc,-exc)",float width = 0.0f) }
    bool Draw(A...)(A a) { return ImGuiTextFilter_Draw(&this, a); }
//    ImGuiTextFilter* function(const char* default_filter = "") }
    static ImGuiTextFilter* from(A...)(A a) { return ImGuiTextFilter_ImGuiTextFilter(a); }
}

struct ImFontGlyphRangesBuilder
{
    ImVector_ImU32 UsedChars;


//    ImFontGlyphRangesBuilder* function() }
    static ImFontGlyphRangesBuilder* from(A...)(A a) { return ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(a); }
//    void function(ImVector_ImWchar* out_ranges) }
    void BuildRanges(A...)(A a) { ImFontGlyphRangesBuilder_BuildRanges(&this, a); }
//    void function(ImWchar c) }
    void AddChar(A...)(A a) { ImFontGlyphRangesBuilder_AddChar(&this, a); }
//    bool function(int n) }
    bool GetBit(A...)(A a) { return ImFontGlyphRangesBuilder_GetBit(&this, a); }
//    void function(int n) }
    void SetBit(A...)(A a) { ImFontGlyphRangesBuilder_SetBit(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImFontGlyphRangesBuilder_Clear(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImFontGlyphRangesBuilder_destroy(&this, a); }
//    void function(const char* text,const char* text_end = null) }
    void AddText(A...)(A a) { ImFontGlyphRangesBuilder_AddText(&this, a); }
//    void function(const ImWchar* ranges) }
    void AddRanges(A...)(A a) { ImFontGlyphRangesBuilder_AddRanges(&this, a); }
}

struct ImColor
{
    ImVec4 Value;


//    ImColor* function() }
    static ImColor* from(A...)(A a) { return ImColor_ImColor(a); }
//    ImColor* function(int r,int g,int b,int a = 255) }
    static ImColor* fromInt(A...)(A a) { return ImColor_ImColorInt(a); }
//    void function(float h,float s,float v,float a = 1.0f) }
    void SetHSV(A...)(A a) { ImColor_SetHSV(&this, a); }
//    void function(ImColor *pOut,float h,float s,float v,float a = 1.0f) }
    ImColor HSV(A...)(A a) { return ImColor_HSV(&this, a); }
//    ImColor* function(ImU32 rgba) }
    static ImColor* fromU32(A...)(A a) { return ImColor_ImColorU32(a); }
//    ImColor* function(const ImVec4 col) }
    static ImColor* fromVec4(A...)(A a) { return ImColor_ImColorVec4(a); }
//    ImColor* function(float r,float g,float b,float a = 1.0f) }
    static ImColor* fromFloat(A...)(A a) { return ImColor_ImColorFloat(a); }
//    void function() }
    void destroy(A...)(A a) { ImColor_destroy(&this, a); }
}

struct ImFontGlyph
{
    uint Codepoint;
    uint Visible;
    float AdvanceX;
    float X0;
    float Y0;
    float X1;
    float Y1;
    float U0;
    float V0;
    float U1;
    float V1;


}

struct ImDrawVert
{
    ImVec2 pos;
    ImVec2 uv;
    ImU32 col;


}

struct ImGuiListClipper
{
    int DisplayStart;
    int DisplayEnd;
    int ItemsCount;
    int StepNo;
    float ItemsHeight;
    float StartPosY;


//    void function() }
    void destroy(A...)(A a) { ImGuiListClipper_destroy(&this, a); }
//    void function(int items_count,float items_height = -1.0f) }
    void Begin(A...)(A a) { ImGuiListClipper_Begin(&this, a); }
//    void function() }
    void End(A...)(A a) { ImGuiListClipper_End(&this, a); }
//    ImGuiListClipper* function(int items_count = -1,float items_height = -1.0f) }
    static ImGuiListClipper* from(A...)(A a) { return ImGuiListClipper_ImGuiListClipper(a); }
//    bool function() }
    bool Step(A...)(A a) { return ImGuiListClipper_Step(&this, a); }
}

struct ImGuiPayload
{
    void* Data;
    int DataSize;
    ImGuiID SourceId;
    ImGuiID SourceParentId;
    int DataFrameCount;
    char[32+1] DataType;
    bool Preview;
    bool Delivery;


//    void function() }
    void destroy(A...)(A a) { ImGuiPayload_destroy(&this, a); }
//    void function() }
    void Clear(A...)(A a) { ImGuiPayload_Clear(&this, a); }
//    bool function() }
    bool IsDelivery(A...)(A a) { return ImGuiPayload_IsDelivery(&this, a); }
//    bool function(const char* type) }
    bool IsDataType(A...)(A a) { return ImGuiPayload_IsDataType(&this, a); }
//    ImGuiPayload* function() }
    static ImGuiPayload* from(A...)(A a) { return ImGuiPayload_ImGuiPayload(a); }
//    bool function() }
    bool IsPreview(A...)(A a) { return ImGuiPayload_IsPreview(&this, a); }
}

struct ImGuiTextBuffer
{
    ImVector_char Buf;


//    void function() }
    void destroy(A...)(A a) { ImGuiTextBuffer_destroy(&this, a); }
//    void function(const char* fmt,...) }
    void appendf(A...)(A a) { ImGuiTextBuffer_appendf(&this, a); }
//    void function() }
    void clear(A...)(A a) { ImGuiTextBuffer_clear(&this, a); }
//    const(char)* function() }
    const(char)* c_str(A...)(A a) { return ImGuiTextBuffer_c_str(&this, a); }
//    const(char)* function() }
    const(char)* end(A...)(A a) { return ImGuiTextBuffer_end(&this, a); }
//    void function(int capacity) }
    void reserve(A...)(A a) { ImGuiTextBuffer_reserve(&this, a); }
//    const(char)* function() }
    const(char)* begin(A...)(A a) { return ImGuiTextBuffer_begin(&this, a); }
//    int function() }
    int size(A...)(A a) { return ImGuiTextBuffer_size(&this, a); }
//    bool function() }
    bool empty(A...)(A a) { return ImGuiTextBuffer_empty(&this, a); }
//    void function(const char* str,const char* str_end = null) }
    void append(A...)(A a) { ImGuiTextBuffer_append(&this, a); }
//    ImGuiTextBuffer* function() }
    static ImGuiTextBuffer* from(A...)(A a) { return ImGuiTextBuffer_ImGuiTextBuffer(a); }
//    void function(const char* fmt,va_list args) }
    void appendfv(A...)(A a) { ImGuiTextBuffer_appendfv(&this, a); }
}

struct ImGuiPlatformMonitor
{
    ImVec2 MainPos;
    ImVec2 MainSize;
    ImVec2 WorkPos;
    ImVec2 WorkSize;
    float DpiScale;


//    ImGuiPlatformMonitor* function() }
    static ImGuiPlatformMonitor* from(A...)(A a) { return ImGuiPlatformMonitor_ImGuiPlatformMonitor(a); }
//    void function() }
    void destroy(A...)(A a) { ImGuiPlatformMonitor_destroy(&this, a); }
}

struct ImVec4
{
    float x;
    float y;
    float z;
    float w;


//    ImVec4* function() }
    static ImVec4* from(A...)(A a) { return ImVec4_ImVec4(a); }
//    void function() }
    void destroy(A...)(A a) { ImVec4_destroy(&this, a); }
//    ImVec4* function(float _x,float _y,float _z,float _w) }
    static ImVec4* fromFloat(A...)(A a) { return ImVec4_ImVec4Float(a); }
}

struct ImGuiTextRange
{
    const(char)* b;
    const(char)* e;


//    ImGuiTextRange* function() }
    static ImGuiTextRange* from(A...)(A a) { return ImGuiTextRange_ImGuiTextRange(a); }
//    void function(char separator,ImVector_ImGuiTextRange* out_) }
    void split(A...)(A a) { ImGuiTextRange_split(&this, a); }
//    ImGuiTextRange* function(const char* _b,const char* _e) }
    static ImGuiTextRange* fromStr(A...)(A a) { return ImGuiTextRange_ImGuiTextRangeStr(a); }
//    bool function() }
    bool empty(A...)(A a) { return ImGuiTextRange_empty(&this, a); }
//    void function() }
    void destroy(A...)(A a) { ImGuiTextRange_destroy(&this, a); }
}

struct ImVec2
{
    float x;
    float y;


//    ImVec2* function(float _x,float _y) }
    static ImVec2* fromFloat(A...)(A a) { return ImVec2_ImVec2Float(a); }
//    ImVec2* function() }
    static ImVec2* from(A...)(A a) { return ImVec2_ImVec2(a); }
//    void function() }
    void destroy(A...)(A a) { ImVec2_destroy(&this, a); }
}

struct ImGuiOnceUponAFrame
{
    int RefFrame;


//    void function() }
    void destroy(A...)(A a) { ImGuiOnceUponAFrame_destroy(&this, a); }
//    ImGuiOnceUponAFrame* function() }
    static ImGuiOnceUponAFrame* from(A...)(A a) { return ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(a); }
}

struct ImGuiStyle
{
    float Alpha;
    ImVec2 WindowPadding;
    float WindowRounding;
    float WindowBorderSize;
    ImVec2 WindowMinSize;
    ImVec2 WindowTitleAlign;
    ImGuiDir WindowMenuButtonPosition;
    float ChildRounding;
    float ChildBorderSize;
    float PopupRounding;
    float PopupBorderSize;
    ImVec2 FramePadding;
    float FrameRounding;
    float FrameBorderSize;
    ImVec2 ItemSpacing;
    ImVec2 ItemInnerSpacing;
    ImVec2 TouchExtraPadding;
    float IndentSpacing;
    float ColumnsMinSpacing;
    float ScrollbarSize;
    float ScrollbarRounding;
    float GrabMinSize;
    float GrabRounding;
    float TabRounding;
    float TabBorderSize;
    ImGuiDir ColorButtonPosition;
    ImVec2 ButtonTextAlign;
    ImVec2 SelectableTextAlign;
    ImVec2 DisplayWindowPadding;
    ImVec2 DisplaySafeAreaPadding;
    float MouseCursorScale;
    bool AntiAliasedLines;
    bool AntiAliasedFill;
    float CurveTessellationTol;
    float CircleSegmentMaxError;
    ImVec4[ImGuiCol_COUNT] Colors;


//    void function() }
    void destroy(A...)(A a) { ImGuiStyle_destroy(&this, a); }
//    void function(float scale_factor) }
    void ScaleAllSizes(A...)(A a) { ImGuiStyle_ScaleAllSizes(&this, a); }
//    ImGuiStyle* function() }
    static ImGuiStyle* from(A...)(A a) { return ImGuiStyle_ImGuiStyle(a); }
}

struct ImDrawChannel
{
    ImVector_ImDrawCmd _CmdBuffer;
    ImVector_ImDrawIdx _IdxBuffer;


}

struct ImGuiIO
{
    ImGuiConfigFlags ConfigFlags;
    ImGuiBackendFlags BackendFlags;
    ImVec2 DisplaySize;
    float DeltaTime;
    float IniSavingRate;
    const(char)* IniFilename;
    const(char)* LogFilename;
    float MouseDoubleClickTime;
    float MouseDoubleClickMaxDist;
    float MouseDragThreshold;
    int[ImGuiKey_COUNT] KeyMap;
    float KeyRepeatDelay;
    float KeyRepeatRate;
    void* UserData;
    ImFontAtlas* Fonts;
    float FontGlobalScale;
    bool FontAllowUserScaling;
    ImFont* FontDefault;
    ImVec2 DisplayFramebufferScale;
    bool ConfigDockingNoSplit;
    bool ConfigDockingWithShift;
    bool ConfigDockingAlwaysTabBar;
    bool ConfigDockingTransparentPayload;
    bool ConfigViewportsNoAutoMerge;
    bool ConfigViewportsNoTaskBarIcon;
    bool ConfigViewportsNoDecoration;
    bool ConfigViewportsNoDefaultParent;
    bool MouseDrawCursor;
    bool ConfigMacOSXBehaviors;
    bool ConfigInputTextCursorBlink;
    bool ConfigWindowsResizeFromEdges;
    bool ConfigWindowsMoveFromTitleBarOnly;
    float ConfigWindowsMemoryCompactTimer;
    const(char)* BackendPlatformName;
    const(char)* BackendRendererName;
    void* BackendPlatformUserData;
    void* BackendRendererUserData;
    void* BackendLanguageUserData;
    GetClipboardTextFunc GetClipboardTextFn;
    SetClipboardTextFunc SetClipboardTextFn;
    void* ClipboardUserData;
    void* RenderDrawListsFnUnused;
    ImVec2 MousePos;
    bool[5] MouseDown;
    float MouseWheel;
    float MouseWheelH;
    ImGuiID MouseHoveredViewport;
    bool KeyCtrl;
    bool KeyShift;
    bool KeyAlt;
    bool KeySuper;
    bool[512] KeysDown;
    float[ImGuiNavInput_COUNT] NavInputs;
    bool WantCaptureMouse;
    bool WantCaptureKeyboard;
    bool WantTextInput;
    bool WantSetMousePos;
    bool WantSaveIniSettings;
    bool NavActive;
    bool NavVisible;
    float Framerate;
    int MetricsRenderVertices;
    int MetricsRenderIndices;
    int MetricsRenderWindows;
    int MetricsActiveWindows;
    int MetricsActiveAllocations;
    ImVec2 MouseDelta;
    ImVec2 MousePosPrev;
    ImVec2[5] MouseClickedPos;
    double[5] MouseClickedTime;
    bool[5] MouseClicked;
    bool[5] MouseDoubleClicked;
    bool[5] MouseReleased;
    bool[5] MouseDownOwned;
    bool[5] MouseDownWasDoubleClick;
    float[5] MouseDownDuration;
    float[5] MouseDownDurationPrev;
    ImVec2[5] MouseDragMaxDistanceAbs;
    float[5] MouseDragMaxDistanceSqr;
    float[512] KeysDownDuration;
    float[512] KeysDownDurationPrev;
    float[ImGuiNavInput_COUNT] NavInputsDownDuration;
    float[ImGuiNavInput_COUNT] NavInputsDownDurationPrev;
    ImVector_ImWchar InputQueueCharacters;


//    void function() }
    void destroy(A...)(A a) { ImGuiIO_destroy(&this, a); }
//    void function(uint c) }
    void AddInputCharacter(A...)(A a) { ImGuiIO_AddInputCharacter(&this, a); }
//    ImGuiIO* function() }
    static ImGuiIO* from(A...)(A a) { return ImGuiIO_ImGuiIO(a); }
//    void function() }
    void ClearInputCharacters(A...)(A a) { ImGuiIO_ClearInputCharacters(&this, a); }
//    void function(const char* str) }
    void AddInputCharactersUTF8(A...)(A a) { ImGuiIO_AddInputCharactersUTF8(&this, a); }
}


extern(C) {
    alias ImGuiAllocFunc = void* function(size_t sz, void* user_data);
	alias ImGuiFreeFunc = void function(void* ptr, void* user_data);
	alias ImGuiSizeCallback = void function(ImGuiSizeCallbackData* data);
	alias ImGuiInputTextCallback = int function(ImGuiInputTextCallbackData *data);
	alias ImDrawCallback = void function(const ImDrawList* parent_list,const ImDrawCmd* cmd);
	alias GetClipboardTextFunc = const(char)* function(void* user_data);
	alias SetClipboardTextFunc = void function(void* user_data,const char* text);
	alias ImeSetInputScreenPosFunc = void function(int x,int y);

	alias ImGuiItemGetter = bool function(void* data,int idx,const char** out_text);
	alias ImGuiValuesGetter = float function(void* data,int idx);
}

extern(C) @nogc nothrow
{
    alias da_ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder = ImFontGlyphRangesBuilder* function();
    alias da_ImGuiPayload_destroy = void function(ImGuiPayload* self);
    alias da_ImDrawList_AddCallback = void function(ImDrawList* self,ImDrawCallback callback,void* callback_data);
    alias da_ImGuiTextRange_ImGuiTextRange = ImGuiTextRange* function();
    alias da_igIsItemHovered = bool function(ImGuiHoveredFlags flags = 0);
    alias da_igSetCursorScreenPos = void function(const ImVec2 pos);
    alias da_igSetCursorPos = void function(const ImVec2 local_pos);
    alias da_ImDrawList_PopClipRect = void function(ImDrawList* self);
    alias da_igBeginDragDropSource = bool function(ImGuiDragDropFlags flags = 0);
    alias da_igTreeNodeExStr = bool function(const char* label,ImGuiTreeNodeFlags flags = 0);
    alias da_ImGuiStyle_ScaleAllSizes = void function(ImGuiStyle* self,float scale_factor);
    alias da_ImDrawList_ChannelsMerge = void function(ImDrawList* self);
    alias da_igPushIDRange = void function(const char* str_id_begin,const char* str_id_end);
    //alias //da_ImVector_find_erase = bool function(ImVector* self,const T v);
    alias da_igIsWindowAppearing = bool function();
    alias da_ImFont_BuildLookupTable = void function(ImFont* self);
    alias da_ImFontAtlas_GetGlyphRangesKorean = const(ImWchar)* function(ImFontAtlas* self);
    //alias //da_ImVector_back = T* function(ImVector* self);
    alias da_igShowDemoWindow = void function(bool* p_open = null);
    alias da_ImDrawList_PathBezierCurveTo = void function(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments = 0);
    alias da_igPushStyleVarVec2 = void function(ImGuiStyleVar idx,const ImVec2 val);
    //alias //da_ImVector_clear = void function(ImVector* self);
    alias da_ImFontAtlas_GetGlyphRangesChineseFull = const(ImWchar)* function(ImFontAtlas* self);
    alias da_igListBoxFnPtr = bool function(const char* label,int* current_item,ImGuiItemGetter getter,void* data,int items_count,int height_in_items = -1);
    alias da_igPushTextWrapPos = void function(float wrap_local_pos_x = 0.0f);
    alias da_igPopStyleColor = void function(int count = 1);
    alias da_ImDrawList_GetClipRectMax_nonUDT = void function(ImVec2 *pOut,ImDrawList* self);
    alias da_igSetWindowFontScale = void function(float scale);
    alias da_ImFontAtlas_ClearInputData = void function(ImFontAtlas* self);
    alias da_igIsItemActive = bool function();
    alias da_igBeginMenu = bool function(const char* label,bool enabled = true);
    alias da_igIsMouseClicked = bool function(ImGuiMouseButton button,bool repeat = false);
    alias da_igPlotHistogramFnPtr = void function(const char* label,ImGuiValuesGetter getter,void* data,int values_count,int values_offset = 0,const char* overlay_text = null,float scale_min = float.max,float scale_max = float.max,ImVec2 graph_size = ImVec2(0,0));
    alias da_igOpenPopupOnItemClick = bool function(const char* str_id = null,ImGuiMouseButton mouse_button = 1);
    alias da_ImDrawList_AddCircle = void function(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments = 12,float thickness = 1.0f);
    alias da_ImFontAtlas_AddFontFromFileTTF = ImFont* function(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null);
    alias da_igIsItemEdited = bool function();
    alias da_igMemAlloc = void* function(size_t size);
    alias da_igGetWindowPos_nonUDT = void function(ImVec2 *pOut);
    alias da_ImFontGlyphRangesBuilder_destroy = void function(ImFontGlyphRangesBuilder* self);
    alias da_igSetTooltipV = void function(const char* fmt,va_list args);
    alias da_ImGuiStoragePair_ImGuiStoragePairFloat = ImGuiStoragePair* function(ImGuiID _key,float _val_f);
    alias da_ImGuiTextBuffer_destroy = void function(ImGuiTextBuffer* self);
    alias da_ImGuiListClipper_destroy = void function(ImGuiListClipper* self);
    //alias //da_ImVector_size = int function(ImVector* self);
    alias da_ImDrawList_PathClear = void function(ImDrawList* self);
    alias da_ImDrawListSplitter_ClearFreeMemory = void function(ImDrawListSplitter* self);
    alias da_ImDrawList_PathLineToMergeDuplicate = void function(ImDrawList* self,const ImVec2 pos);
    //alias //da_ImVector_end = T* function(ImVector* self);
    alias da_igShowUserGuide = void function();
    //alias //da_ImVector_pop_back = void function(ImVector* self);
    alias da_igLabelTextV = void function(const char* label,const char* fmt,va_list args);
    alias da_ImDrawList_AddText = void function(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end = null);
    alias da_igGetDrawListSharedData = ImDrawListSharedData* function();
    alias da_ImDrawData_DeIndexAllBuffers = void function(ImDrawData* self);
    alias da_igSetScrollHereY = void function(float center_y_ratio = 0.5f);
    alias da_igSetScrollHereX = void function(float center_x_ratio = 0.5f);
    alias da_igGetClipboardText = const(char)* function();
    alias da_igSetWindowFocusStr = void function(const char* name);
    alias da_igBeginMainMenuBar = bool function();
    alias da_ImGuiPayload_ImGuiPayload = ImGuiPayload* function();
    alias da_ImDrawList_AddRectFilledMultiColor = void function(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
    alias da_igCheckbox = bool function(const char* label,bool* v);
    alias da_igStyleColorsDark = void function(ImGuiStyle* dst = null);
    alias da_ImFontConfig_ImFontConfig = ImFontConfig* function();
    alias da_igGetWindowDockID = ImGuiID function();
    alias da_ImGuiTextFilter_Draw = bool function(ImGuiTextFilter* self,const char* label = "Filter(inc,-exc)",float width = 0.0f);
    alias da_igGetCurrentContext = ImGuiContext* function();
    alias da_ImGuiWindowClass_destroy = void function(ImGuiWindowClass* self);
    alias da_ImDrawList_PrimQuadUV = void function(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
    alias da_ImGuiPayload_Clear = void function(ImGuiPayload* self);
    alias da_igTextWrapped = void function(const char* fmt,...);
    alias da_ImGuiPayload_IsDataType = bool function(ImGuiPayload* self,const char* type);
    alias da_ImDrawList_AddNgon = void function(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness = 1.0f);
    alias da_igGetCursorStartPos_nonUDT = void function(ImVec2 *pOut);
    alias da_igGetCursorScreenPos_nonUDT = void function(ImVec2 *pOut);
    alias da_igValueUint = void function(const char* prefix,uint v);
    alias da_ImFontAtlas_ClearTexData = void function(ImFontAtlas* self);
    alias da_igIsWindowFocused = bool function(ImGuiFocusedFlags flags = 0);
    alias da_igSetNextItemOpen = void function(bool is_open,ImGuiCond cond = 0);
    alias da_igPushItemWidth = void function(float item_width);
    alias da_igTreePushStr = void function(const char* str_id);
    alias da_ImFontGlyphRangesBuilder_AddText = void function(ImFontGlyphRangesBuilder* self,const char* text,const char* text_end = null);
    alias da_igSetScrollFromPosX = void function(float local_x,float center_x_ratio = 0.5f);
    //alias //da_ImVector_begin = T* function(ImVector* self);
    alias da_igCalcItemWidth = float function();
    alias da_igDragScalar = bool function(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min = null,const void* p_max = null,const char* format = null,float power = 1.0f);
    alias da_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF = ImFont* function(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null);
    //alias //da_ImVector_back_const = const(T)* function(ImVector* self);
    alias da_ImGuiTextRange_empty = bool function(ImGuiTextRange* self);
    alias da_igStyleColorsClassic = void function(ImGuiStyle* dst = null);
    alias da_ImFont_GetDebugName = const(char)* function(ImFont* self);
    alias da_ImColor_HSV_nonUDT = void function(ImColor *pOut,ImColor* self,float h,float s,float v,float a = 1.0f);
    alias da_ImDrawList_PathStroke = void function(ImDrawList* self,ImU32 col,bool closed,float thickness = 1.0f);
    alias da_igTreeNodeVStr = bool function(const char* str_id,const char* fmt,va_list args);
    alias da_igValueFloat = void function(const char* prefix,float v,const char* float_format = null);
    alias da_ImFont_IsLoaded = bool function(ImFont* self);
    alias da_igGetTreeNodeToLabelSpacing = float function();
    alias da_ImGuiViewport_GetWorkPos_nonUDT = void function(ImVec2 *pOut,ImGuiViewport* self);
    alias da_ImDrawList_UpdateTextureID = void function(ImDrawList* self);
    alias da_ImDrawList_PrimRect = void function(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
    alias da_ImFont_GrowIndex = void function(ImFont* self,int new_size);
    alias da_ImFont_ImFont = ImFont* function();
    alias da_ImDrawList_AddPolyline = void function(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,bool closed,float thickness);
    alias da_igGetWindowContentRegionMax_nonUDT = void function(ImVec2 *pOut);
    alias da_igNextColumn = void function();
    alias da_ImGuiStorage_SetInt = void function(ImGuiStorage* self,ImGuiID key,int val);
    alias da_igListBoxStr_arr = bool function(const char* label,int* current_item,const char** items,int items_count,int height_in_items = -1);
    alias da_igGetBackgroundDrawList = ImDrawList* function();
    alias da_igDragFloatRange2 = bool function(const char* label,float* v_current_min,float* v_current_max,float v_speed = 1.0f,float v_min = 0.0f,float v_max = 0.0f,const char* format = "%.3f",const char* format_max = null,float power = 1.0f);
    alias da_igAcceptDragDropPayload = const(ImGuiPayload)* function(const char* type,ImGuiDragDropFlags flags = 0);
    alias da_ImGuiOnceUponAFrame_destroy = void function(ImGuiOnceUponAFrame* self);
    alias da_ImGuiTextBuffer_end = const(char)* function(ImGuiTextBuffer* self);
    alias da_igBullet = void function();
    alias da_igBegin = bool function(const char* name,bool* p_open = null,ImGuiWindowFlags flags = 0);
    alias da_igShowStyleSelector = bool function(const char* label);
    //alias //da_ImVector_destroy = void function(ImVector* self);
    alias da_igSetWindowCollapsedBool = void function(bool collapsed,ImGuiCond cond = 0);
    alias da_igSliderFloat = bool function(const char* label,float* v,float v_min,float v_max,const char* format = "%.3f",float power = 1.0f);
    alias da_igGetFontTexUvWhitePixel_nonUDT = void function(ImVec2 *pOut);
    alias da_igComboStr = bool function(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items = -1);
    alias da_igDestroyPlatformWindows = void function();
    alias da_igListBoxHeaderVec2 = bool function(const char* label,const ImVec2 size = ImVec2(0,0));
    alias da_ImColor_destroy = void function(ImColor* self);
    alias da_igSetDragDropPayload = bool function(const char* type,const void* data,size_t sz,ImGuiCond cond = 0);
    alias da_ImGuiStorage_GetVoidPtrRef = void** function(ImGuiStorage* self,ImGuiID key,void* default_val = null);
    alias da_igSetWindowSizeVec2 = void function(const ImVec2 size,ImGuiCond cond = 0);
    alias da_igListBoxHeaderInt = bool function(const char* label,int items_count,int height_in_items = -1);
    //alias //da_ImVector_capacity = int function(ImVector* self);
    alias da_igLogToFile = void function(int auto_open_depth = -1,const char* filename = null);
    alias da_igBeginPopupContextWindow = bool function(const char* str_id = null,ImGuiMouseButton mouse_button = 1,bool also_over_items = true);
    alias da_ImGuiViewport_destroy = void function(ImGuiViewport* self);
    alias da_igInputFloat = bool function(const char* label,float* v,float step = 0.0f,float step_fast = 0.0f,const char* format = "%.3f",ImGuiInputTextFlags flags = 0);
    alias da_ImFont_CalcWordWrapPositionA = const(char)* function(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
    alias da_igShowFontSelector = void function(const char* label);
    alias da_igMemFree = void function(void* ptr);
    alias da_ImDrawData_Clear = void function(ImDrawData* self);
    alias da_ImFontAtlas_AddCustomRectRegular = int function(ImFontAtlas* self,uint id,int width,int height);
    alias da_igGetWindowContentRegionMin_nonUDT = void function(ImVec2 *pOut);
    alias da_igColorButton = bool function(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags = 0,ImVec2 size = ImVec2(0,0));
    alias da_igGetForegroundDrawList = ImDrawList* function();
    alias da_igIsMouseDoubleClicked = bool function(ImGuiMouseButton button);
    alias da_igSetNextWindowFocus = void function();
    alias da_igIsKeyPressed = bool function(int user_key_index,bool repeat = true);
    alias da_igInputScalar = bool function(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step = null,const void* p_step_fast = null,const char* format = null,ImGuiInputTextFlags flags = 0);
    alias da_ImDrawList_AddImageRounded = void function(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);
    alias da_igGetFont = ImFont* function();
    alias da_ImGuiStorage_SetVoidPtr = void function(ImGuiStorage* self,ImGuiID key,void* val);
    alias da_igIsPopupOpen = bool function(const char* str_id);
    alias da_igSelectable = bool function(const char* label,bool selected = false,ImGuiSelectableFlags flags = 0,const ImVec2 size = ImVec2(0,0));
    alias da_igGetPlatformIO = ImGuiPlatformIO* function();
    alias da_igEndTabBar = void function();
    alias da_igPopButtonRepeat = void function();
    alias da_igEndMenuBar = void function();
    alias da_ImGuiTextFilter_Build = void function(ImGuiTextFilter* self);
    alias da_ImGuiStorage_SetFloat = void function(ImGuiStorage* self,ImGuiID key,float val);
    alias da_igIsItemDeactivated = bool function();
    alias da_igDebugCheckVersionAndDataLayout = bool function(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
    alias da_ImFont_RenderChar = void function(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,ImWchar c);
    alias da_igBeginTabItem = bool function(const char* label,bool* p_open = null,ImGuiTabItemFlags flags = 0);
    alias da_igDragInt = bool function(const char* label,int* v,float v_speed = 1.0f,int v_min = 0,int v_max = 0,const char* format = "%d");
    alias da_igIsAnyItemHovered = bool function();
    alias da_igLoadIniSettingsFromMemory = void function(const char* ini_data,size_t ini_size = 0);
    alias da_igEndMenu = void function();
    alias da_igEndFrame = void function();
    alias da_ImFontAtlas_GetTexDataAsAlpha8 = void function(ImFontAtlas* self,ubyte** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel = null);
    alias da_igBeginChild = bool function(const char* str_id,const ImVec2 size = ImVec2(0,0),bool border = false,ImGuiWindowFlags flags = 0);
    alias da_igPushAllowKeyboardFocus = void function(bool allow_keyboard_focus);
    alias da_ImDrawList_destroy = void function(ImDrawList* self);
    alias da_igSeparator = void function();
    alias da_ImGuiTextBuffer_clear = void function(ImGuiTextBuffer* self);
    alias da_ImFont_destroy = void function(ImFont* self);
    alias da_igSetItemDefaultFocus = void function();
    alias da_igTreePushPtr = void function(const void* ptr_id = null);
    alias da_ImGuiWindowClass_ImGuiWindowClass = ImGuiWindowClass* function();
    alias da_ImColor_ImColorU32 = ImColor* function(ImU32 rgba);
    alias da_ImFontAtlas_GetTexDataAsRGBA32 = void function(ImFontAtlas* self,char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel = null);
    alias da_ImDrawList_PrimVtx = void function(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    alias da_igIsItemVisible = bool function();
    alias da_igGetItemRectSize_nonUDT = void function(ImVec2 *pOut);
    alias da_ImGuiTextRange_destroy = void function(ImGuiTextRange* self);
    alias da_ImGuiPlatformIO_destroy = void function(ImGuiPlatformIO* self);
    alias da_ImFont_RenderText = void function(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width = 0.0f,bool cpu_fine_clip = false);
    alias da_ImDrawList_AddTriangle = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness = 1.0f);
    alias da_igBulletText = void function(const char* fmt,...);
    alias da_igCaptureMouseFromApp = void function(bool want_capture_mouse_value = true);
    alias da_igRadioButtonIntPtr = bool function(const char* label,int* v,int v_button);
    alias da_igBeginCombo = bool function(const char* label,const char* preview_value,ImGuiComboFlags flags = 0);
    alias da_igPopTextWrapPos = void function();
    //alias //da_ImVector_reserve = void function(ImVector* self,int new_capacity);
    alias da_igGetFrameHeight = float function();
    alias da_igDragScalarN = bool function(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min = null,const void* p_max = null,const char* format = null,float power = 1.0f);
    alias da_igGetBackgroundDrawListViewportPtr = ImDrawList* function(ImGuiViewport* viewport);
    alias da_ImGuiStyle_destroy = void function(ImGuiStyle* self);
    alias da_igComboFnPtr = bool function(const char* label,int* current_item,ImGuiItemGetter getter,void* data,int items_count,int popup_max_height_in_items = -1);
    alias da_igEndPopup = void function();
    alias da_igGetVersion = const(char)* function();
    alias da_igIsAnyItemActive = bool function();
    alias da_ImFontGlyphRangesBuilder_Clear = void function(ImFontGlyphRangesBuilder* self);
    alias da_igTreeNodeExVPtr = bool function(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    alias da_ImDrawList_AddLine = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness = 1.0f);
    alias da_igSetKeyboardFocusHere = void function(int offset = 0);
    alias da_igEndTooltip = void function();
    alias da_ImGuiTextFilter_destroy = void function(ImGuiTextFilter* self);
    alias da_igBeginTooltip = void function();
    alias da_igSetColorEditOptions = void function(ImGuiColorEditFlags flags);
    alias da_ImGuiTextBuffer_ImGuiTextBuffer = ImGuiTextBuffer* function();
    alias da_igGetMouseCursor = ImGuiMouseCursor function();
    alias da_ImDrawList_PathArcToFast = void function(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
    alias da_igSetNextWindowPos = void function(const ImVec2 pos,ImGuiCond cond = 0,const ImVec2 pivot = ImVec2(0,0));
    alias da_ImFontConfig_destroy = void function(ImFontConfig* self);
    alias da_ImFontAtlas_ImFontAtlas = ImFontAtlas* function();
    alias da_igEndMainMenuBar = void function();
    //alias //da_ImVector_size_in_bytes = int function(ImVector* self);
    alias da_igSmallButton = bool function(const char* label);
    alias da_igInputDouble = bool function(const char* label,double* v,double step = 0.0,double step_fast = 0.0,const char* format = "%.6f",ImGuiInputTextFlags flags = 0);
    alias da_igTextColored = void function(const ImVec4 col,const char* fmt,...);
    alias da_igSetNextWindowBgAlpha = void function(float alpha);
    alias da_ImDrawList_ChannelsSplit = void function(ImDrawList* self,int count);
    alias da_igIsMouseDragging = bool function(ImGuiMouseButton button,float lock_threshold = -1.0f);
    alias da_igTextColoredV = void function(const ImVec4 col,const char* fmt,va_list args);
    alias da_igDockSpace = void function(ImGuiID id,const ImVec2 size = ImVec2(0,0),ImGuiDockNodeFlags flags = 0,const ImGuiWindowClass* window_class = null);
    alias da_igBeginPopupContextItem = bool function(const char* str_id = null,ImGuiMouseButton mouse_button = 1);
    alias da_igVSliderFloat = bool function(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format = "%.3f",float power = 1.0f);
    alias da_igColorConvertRGBtoHSV = void function(float r,float g,float b,float* out_h,float* out_s,float* out_v);
    alias da_ImColor_ImColor = ImColor* function();
    //alias //da_ImVector_ImVector = ImVector* function();
    alias da_igIsKeyReleased = bool function(int user_key_index);
    alias da_igText = void function(const char* fmt,...);
    alias da_ImFontAtlas_GetGlyphRangesCyrillic = const(ImWchar)* function(ImFontAtlas* self);
    //alias //da_ImVector_front = T* function(ImVector* self);
    alias da_igImage = void function(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0 = ImVec2(0,0),const ImVec2 uv1 = ImVec2(1,1),const ImVec4 tint_col = ImVec4(1,1,1,1),const ImVec4 border_col = ImVec4(0,0,0,0));
    alias da_igGetColumnOffset = float function(int column_index = -1);
    alias da_ImGuiIO_ClearInputCharacters = void function(ImGuiIO* self);
    alias da_igCloseCurrentPopup = void function();
    alias da_igPushStyleColorU32 = void function(ImGuiCol idx,ImU32 col);
    alias da_ImGuiTextBuffer_begin = const(char)* function(ImGuiTextBuffer* self);
    alias da_igColorPicker4 = bool function(const char* label,ref float[4] col,ImGuiColorEditFlags flags = 0,const float* ref_col = null);
    alias da_igColorPicker3 = bool function(const char* label,ref float[3] col,ImGuiColorEditFlags flags = 0);
    alias da_igPushFont = void function(ImFont* font);
    alias da_igEndDragDropTarget = void function();
    alias da_ImGuiTextRange_split = void function(ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out_);
    alias da_ImGuiTextFilter_ImGuiTextFilter = ImGuiTextFilter* function(const char* default_filter = "");
    alias da_ImDrawList_PrimReserve = void function(ImDrawList* self,int idx_count,int vtx_count);
    alias da_ImGuiPayload_IsPreview = bool function(ImGuiPayload* self);
    alias da_ImGuiStorage_SetAllInt = void function(ImGuiStorage* self,int val);
    alias da_igGetScrollY = float function();
    alias da_igGetScrollX = float function();
    alias da_ImFontAtlas_AddFont = ImFont* function(ImFontAtlas* self,const ImFontConfig* font_cfg);
    alias da_ImGuiStoragePair_ImGuiStoragePairPtr = ImGuiStoragePair* function(ImGuiID _key,void* _val_p);
    alias da_ImDrawList_Clear = void function(ImDrawList* self);
    alias da_igLogText = void function(const char* fmt,...);
    alias da_igInputTextMultiline = bool function(const char* label,char* buf,size_t buf_size,const ImVec2 size = ImVec2(0,0),ImGuiInputTextFlags flags = 0,ImGuiInputTextCallback callback = null,void* user_data = null);
    alias da_igLogButtons = void function();
    alias da_igDummy = void function(const ImVec2 size);
    alias da_ImFont_FindGlyph = const(ImFontGlyph)* function(ImFont* self,ImWchar c);
    alias da_igTreeNodeVPtr = bool function(const void* ptr_id,const char* fmt,va_list args);
    //alias //da_ImVector_erase_unsorted = T* function(ImVector* self,const T* it);
    alias da_igDragInt4 = bool function(const char* label,ref int[4] v,float v_speed = 1.0f,int v_min = 0,int v_max = 0,const char* format = "%d");
    alias da_igSetWindowCollapsedStr = void function(const char* name,bool collapsed,ImGuiCond cond = 0);
    alias da_igGetWindowDrawList = ImDrawList* function();
    alias da_igDragInt3 = bool function(const char* label,ref int[3] v,float v_speed = 1.0f,int v_min = 0,int v_max = 0,const char* format = "%d");
    alias da_igDragInt2 = bool function(const char* label,ref int[2] v,float v_speed = 1.0f,int v_min = 0,int v_max = 0,const char* format = "%d");
    alias da_ImFontAtlas_IsBuilt = bool function(ImFontAtlas* self);
    alias da_igDragIntRange2 = bool function(const char* label,int* v_current_min,int* v_current_max,float v_speed = 1.0f,int v_min = 0,int v_max = 0,const char* format = "%d",const char* format_max = null);
    //alias //da_ImVector_ImVectorVector = ImVector* function(const ImVector src);
    alias da_ImGuiPayload_IsDelivery = bool function(ImGuiPayload* self);
    alias da_igProgressBar = void function(float fraction,const ImVec2 size_arg = ImVec2(-1,0),const char* overlay = null);
    alias da_igSetCursorPosY = void function(float local_y);
    alias da_igSliderFloat4 = bool function(const char* label,ref float[4] v,float v_min,float v_max,const char* format = "%.3f",float power = 1.0f);
    alias da_igSliderFloat3 = bool function(const char* label,ref float[3] v,float v_min,float v_max,const char* format = "%.3f",float power = 1.0f);
    alias da_igSliderFloat2 = bool function(const char* label,ref float[2] v,float v_min,float v_max,const char* format = "%.3f",float power = 1.0f);
    alias da_ImFont_AddRemapChar = void function(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst = true);
    alias da_igGetForegroundDrawListViewportPtr = ImDrawList* function(ImGuiViewport* viewport);
    alias da_igTextDisabledV = void function(const char* fmt,va_list args);
    alias da_igSetColumnWidth = void function(int column_index,float width);
    alias da_igStyleColorsLight = void function(ImGuiStyle* dst = null);
    alias da_igColorConvertFloat4ToU32 = ImU32 function(const ImVec4 in_);
    alias da_ImFontAtlas_GetGlyphRangesVietnamese = const(ImWchar)* function(ImFontAtlas* self);
    alias da_igVSliderScalar = bool function(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format = null,float power = 1.0f);
    //alias //da_ImVector_find_const = const(T)* function(ImVector* self,const T v);
    //alias //da_ImVector_find_erase_unsorted = bool function(ImVector* self,const T v);
    alias da_igGetWindowDpiScale = float function();
    alias da_igGetCursorPosY = float function();
    alias da_igGetCursorPosX = float function();
    alias da_igGetStateStorage = ImGuiStorage* function();
    alias da_igGetWindowHeight = float function();
    alias da_ImGuiIO_AddInputCharactersUTF8 = void function(ImGuiIO* self,const char* str);
    alias da_igEndTabItem = void function();
    alias da_igGetStyleColorName = const(char)* function(ImGuiCol idx);
    alias da_igMenuItemBoolPtr = bool function(const char* label,const char* shortcut,bool* p_selected,bool enabled = true);
    alias da_ImFontGlyphRangesBuilder_SetBit = void function(ImFontGlyphRangesBuilder* self,int n);
    alias da_ImDrawList_AddBezierCurve = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments = 0);
    alias da_ImDrawList_PathArcTo = void function(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments = 10);
    alias da_igGetMouseDragDelta_nonUDT = void function(ImVec2 *pOut,ImGuiMouseButton button = 0,float lock_threshold = -1.0f);
    alias da_igEndCombo = void function();
    alias da_ImGuiStorage_GetVoidPtr = void* function(ImGuiStorage* self,ImGuiID key);
    alias da_igPushClipRect = void function(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
    alias da_igTreeNodePtr = bool function(const void* ptr_id,const char* fmt,...);
    alias da_ImDrawList_PushTextureID = void function(ImDrawList* self,ImTextureID texture_id);
    alias da_igButton = bool function(const char* label,const ImVec2 size = ImVec2(0,0));
    alias da_igIsItemFocused = bool function();
    //alias //da_ImVector_resizeT = void function(ImVector* self,int new_size,const T v);
    alias da_ImDrawList_GetClipRectMin_nonUDT = void function(ImVec2 *pOut,ImDrawList* self);
    alias da_ImDrawListSplitter_Split = void function(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
    alias da_ImGuiStoragePair_ImGuiStoragePairInt = ImGuiStoragePair* function(ImGuiID _key,int _val_i);
    alias da_igGetIDRange = ImGuiID function(const char* str_id_begin,const char* str_id_end);
    alias da_igGetDrawData = ImDrawData* function();
    alias da_ImFontGlyphRangesBuilder_AddChar = void function(ImFontGlyphRangesBuilder* self,ImWchar c);
    alias da_igFindViewportByID = ImGuiViewport* function(ImGuiID id);
    alias da_igIsRectVisible = bool function(const ImVec2 size);
    alias da_igPopStyleVar = void function(int count = 1);
    alias da_ImFontAtlas_SetTexID = void function(ImFontAtlas* self,ImTextureID id);
    alias da_ImGuiInputTextCallbackData_DeleteChars = void function(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
    alias da_igGetWindowWidth = float function();
    alias da_igIsMouseHoveringRect = bool function(const ImVec2 r_min,const ImVec2 r_max,bool clip = true);
    alias da_igGetColorU32U32 = ImU32 function(ImU32 col);
    alias da_igIsAnyMouseDown = bool function();
    alias da_ImGuiStorage_GetFloat = float function(ImGuiStorage* self,ImGuiID key,float default_val = 0.0f);
    alias da_ImFontAtlasCustomRect_ImFontAtlasCustomRect = ImFontAtlasCustomRect* function();
    alias da_igColorConvertHSVtoRGB = void function(float h,float s,float v,float* out_r,float* out_g,float* out_b);
    alias da_igTextWrappedV = void function(const char* fmt,va_list args);
    alias da_igSliderInt4 = bool function(const char* label,ref int[4] v,int v_min,int v_max,const char* format = "%d");
    alias da_ImDrawList_PathRect = void function(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);
    alias da_igSliderInt2 = bool function(const char* label,ref int[2] v,int v_min,int v_max,const char* format = "%d");
    alias da_igSliderInt3 = bool function(const char* label,ref int[3] v,int v_min,int v_max,const char* format = "%d");
    alias da_igCollapsingHeader = bool function(const char* label,ImGuiTreeNodeFlags flags = 0);
    alias da_ImGuiInputTextCallbackData_InsertChars = void function(ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end = null);
    alias da_igEndChild = void function();
    alias da_igGetTextLineHeightWithSpacing = float function();
    alias da_igGetColumnsCount = int function();
    alias da_ImDrawList_AddConvexPolyFilled = void function(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
    alias da_ImDrawListSplitter_Merge = void function(ImDrawListSplitter* self,ImDrawList* draw_list);
    alias da_igColorConvertU32ToFloat4_nonUDT = void function(ImVec4 *pOut,ImU32 in_);
    //alias //da_ImVector_resize = void function(ImVector* self,int new_size);
    alias da_ImVec2_ImVec2 = ImVec2* function();
    //alias //da_ImVector_index_from_ptr = int function(ImVector* self,const T* it);
    alias da_ImGuiViewport_ImGuiViewport = ImGuiViewport* function();
    alias da_igLogToTTY = void function(int auto_open_depth = -1);
    alias da_igSetNextWindowClass = void function(const ImGuiWindowClass* window_class);
    alias da_ImGuiListClipper_Begin = void function(ImGuiListClipper* self,int items_count,float items_height = -1.0f);
    alias da_igPopFont = void function();
    alias da_ImFontAtlas_GetCustomRectByIndex = const(ImFontAtlasCustomRect)* function(ImFontAtlas* self,int index);
    alias da_igGetIDStr = ImGuiID function(const char* str_id);
    alias da_igRender = void function();
    //alias //da_ImVector_erase = T* function(ImVector* self,const T* it);
    alias da_igPushStyleColor = void function(ImGuiCol idx,const ImVec4 col);
    alias da_ImDrawList_AddTriangleFilled = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
    alias da_ImDrawList_PushClipRectFullScreen = void function(ImDrawList* self);
    alias da_igGetColorU32Vec4 = ImU32 function(const ImVec4 col);
    alias da_igBeginPopupContextVoid = bool function(const char* str_id = null,ImGuiMouseButton mouse_button = 1);
    alias da_igGetFrameCount = int function();
    alias da_ImFontAtlas_AddFontFromMemoryTTF = ImFont* function(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null);
    alias da_igLogFinish = void function();
    alias da_igTreeNodeStrStr = bool function(const char* str_id,const char* fmt,...);
    alias da_igPopItemWidth = void function();
    alias da_ImVec2_ImVec2Float = ImVec2* function(float _x,float _y);
    alias da_igEndChildFrame = void function();
    alias da_ImGuiStorage_BuildSortByKey = void function(ImGuiStorage* self);
    alias da_ImDrawList_AddImage = void function(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min = ImVec2(0,0),const ImVec2 uv_max = ImVec2(1,1),ImU32 col = ((cast(ImU32)255<<24)|(cast(ImU32)255<<16)|(cast(ImU32)255<<8)|(cast(ImU32)255<<0)));
    alias da_ImGuiStyle_ImGuiStyle = ImGuiStyle* function();
    alias da_igNewLine = void function();
    alias da_igColumns = void function(int count = 1,const char* id = null,bool border = true);
    alias da_igAlignTextToFramePadding = void function();
    alias da_igGetWindowSize_nonUDT = void function(ImVec2 *pOut);
    alias da_ImFontGlyphRangesBuilder_AddRanges = void function(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
    alias da_igPopID = void function();
    alias da_igResetMouseDragDelta = void function(ImGuiMouseButton button = 0);
    alias da_ImFontAtlas_GetGlyphRangesJapanese = const(ImWchar)* function(ImFontAtlas* self);
    alias da_ImDrawListSplitter_ImDrawListSplitter = ImDrawListSplitter* function();
    //alias //da_ImVector_push_back = void function(ImVector* self,const T v);
    alias da_ImGuiStorage_GetBoolRef = bool* function(ImGuiStorage* self,ImGuiID key,bool default_val = false);
    alias da_igSetNextWindowContentSize = void function(const ImVec2 size);
    alias da_ImGuiPlatformIO_ImGuiPlatformIO = ImGuiPlatformIO* function();
    alias da_igOpenPopup = void function(const char* str_id);
    alias da_igGetMainViewport = ImGuiViewport* function();
    //alias //da_ImVector_empty = bool function(ImVector* self);
    alias da_ImFontAtlas_AddCustomRectFontGlyph = int function(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset = ImVec2(0,0));
    alias da_igShowAboutWindow = void function(bool* p_open = null);
    alias da_igSetCursorPosX = void function(float local_x);
    alias da_igBeginPopup = bool function(const char* str_id,ImGuiWindowFlags flags = 0);
    alias da_ImGuiStorage_GetBool = bool function(ImGuiStorage* self,ImGuiID key,bool default_val = false);
    alias da_igInputText = bool function(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags = 0,ImGuiInputTextCallback callback = null,void* user_data = null);
    alias da_igGetWindowViewport = ImGuiViewport* function();
    alias da_igValueBool = void function(const char* prefix,bool b);
    alias da_igSetWindowPosStr = void function(const char* name,const ImVec2 pos,ImGuiCond cond = 0);
    alias da_ImDrawList_AddRect = void function(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All,float thickness = 1.0f);
    alias da_ImDrawData_destroy = void function(ImDrawData* self);
    alias da_ImGuiStorage_GetIntRef = int* function(ImGuiStorage* self,ImGuiID key,int default_val = 0);
    alias da_igInputScalarN = bool function(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step = null,const void* p_step_fast = null,const char* format = null,ImGuiInputTextFlags flags = 0);
    alias da_igListBoxFooter = void function();
    alias da_ImGuiTextBuffer_append = void function(ImGuiTextBuffer* self,const char* str,const char* str_end = null);
    alias da_igIsWindowHovered = bool function(ImGuiHoveredFlags flags = 0);
    //alias //da_ImVector_swap = void function(ImVector* self,ImVector rhs);
    alias da_igSliderInt = bool function(const char* label,int* v,int v_min,int v_max,const char* format = "%d");
    alias da_igGetItemRectMin_nonUDT = void function(ImVec2 *pOut);
    alias da_igBeginTabBar = bool function(const char* str_id,ImGuiTabBarFlags flags = 0);
    alias da_igPushStyleVarFloat = void function(ImGuiStyleVar idx,float val);
    alias da_ImGuiInputTextCallbackData_ImGuiInputTextCallbackData = ImGuiInputTextCallbackData* function();
    alias da_ImFontAtlasCustomRect_IsPacked = bool function(ImFontAtlasCustomRect* self);
    alias da_igRadioButtonBool = bool function(const char* label,bool active);
    alias da_ImFont_AddGlyph = void function(ImFont* self,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
    alias da_igBeginPopupModal = bool function(const char* name,bool* p_open = null,ImGuiWindowFlags flags = 0);
    alias da_igBeginDragDropTarget = bool function();
    alias da_ImFontAtlas_GetGlyphRangesDefault = const(ImWchar)* function(ImFontAtlas* self);
    alias da_igPlotLinesFnPtr = void function(const char* label,ImGuiValuesGetter getter,void* data,int values_count,int values_offset = 0,const char* overlay_text = null,float scale_min = float.max,float scale_max = float.max,ImVec2 graph_size = ImVec2(0,0));
    alias da_ImFontGlyphRangesBuilder_GetBit = bool function(ImFontGlyphRangesBuilder* self,int n);
    alias da_ImDrawList_AddCircleFilled = void function(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments = 12);
    alias da_ImFont_CalcTextSizeA_nonUDT = void function(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end = null,const char** remaining = null);
    alias da_igSpacing = void function();
    alias da_ImDrawList_AddRectFilled = void function(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding = 0.0f,ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);
    //alias //da_ImVector__grow_capacity = int function(ImVector* self,int sz);
    alias da_igPushIDInt = void function(int int_id);
    alias da_igInputTextWithHint = bool function(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags = 0,ImGuiInputTextCallback callback = null,void* user_data = null);
    alias da_igGetColumnWidth = float function(int column_index = -1);
    alias da_ImGuiIO_AddInputCharacter = void function(ImGuiIO* self,uint c);
    alias da_igIndent = void function(float indent_w = 0.0f);
    alias da_igSetNextWindowViewport = void function(ImGuiID viewport_id);
    alias da_igGetScrollMaxX = float function();
    alias da_igGetScrollMaxY = float function();
    //alias //da_ImVector_contains = bool function(ImVector* self,const T v);
    //alias //da_ImVector_shrink = void function(ImVector* self,int new_size);
    alias da_ImGuiStoragePair_destroy = void function(ImGuiStoragePair* self);
    alias da_ImFontAtlas_AddFontDefault = ImFont* function(ImFontAtlas* self,const ImFontConfig* font_cfg = null);
    alias da_ImDrawList_CloneOutput = ImDrawList* function(ImDrawList* self);
    alias da_igIsItemToggledOpen = bool function();
    alias da_ImFont_SetGlyphVisible = void function(ImFont* self,ImWchar c,bool visible);
    alias da_ImDrawList_PathFillConvex = void function(ImDrawList* self,ImU32 col);
    alias da_igCaptureKeyboardFromApp = void function(bool want_capture_keyboard_value = true);
    alias da_ImGuiInputTextCallbackData_HasSelection = bool function(ImGuiInputTextCallbackData* self);
    alias da_igInputInt3 = bool function(const char* label,ref int[3] v,ImGuiInputTextFlags flags = 0);
    alias da_igSetClipboardText = void function(const char* text);
    alias da_ImFontGlyphRangesBuilder_BuildRanges = void function(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
    alias da_igGetStyleColorVec4 = const(ImVec4)* function(ImGuiCol idx);
    alias da_igSetAllocatorFunctions = void function(ImGuiAllocFunc,ImGuiFreeFunc,void* user_data = null);
    alias da_igGetFrameHeightWithSpacing = float function();
    alias da_igInvisibleButton = bool function(const char* str_id,const ImVec2 size);
    alias da_igSetTabItemClosed = void function(const char* tab_or_docked_window_label);
    alias da_igGetDragDropPayload = const(ImGuiPayload)* function();
    alias da_igGetMousePos_nonUDT = void function(ImVec2 *pOut);
    alias da_igGetWindowContentRegionWidth = float function();
    alias da_igArrowButton = bool function(const char* str_id,ImGuiDir dir);
    alias da_ImGuiInputTextCallbackData_destroy = void function(ImGuiInputTextCallbackData* self);
    alias da_ImGuiStorage_GetFloatRef = float* function(ImGuiStorage* self,ImGuiID key,float default_val = 0.0f);
    alias da_igSliderScalarN = bool function(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format = null,float power = 1.0f);
    alias da_ImDrawListSplitter_Clear = void function(ImDrawListSplitter* self);
    alias da_igTreeNodeStr = bool function(const char* label);
    alias da_igUpdatePlatformWindows = void function();
    alias da_igTextDisabled = void function(const char* fmt,...);
    alias da_igSetCurrentContext = void function(ImGuiContext* ctx);
    alias da_ImDrawList_AddQuad = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness = 1.0f);
    alias da_ImGuiOnceUponAFrame_ImGuiOnceUponAFrame = ImGuiOnceUponAFrame* function();
    alias da_igCheckboxFlags = bool function(const char* label,uint* flags,uint flags_value);
    alias da_igTextUnformatted = void function(const char* text,const char* text_end = null);
    alias da_ImGuiIO_ImGuiIO = ImGuiIO* function();
    alias da_igValueInt = void function(const char* prefix,int v);
    alias da_igIsItemClicked = bool function(ImGuiMouseButton mouse_button = 0);
    alias da_igGetColorU32 = ImU32 function(ImGuiCol idx,float alpha_mul = 1.0f);
    //alias //da_ImVector_push_front = void function(ImVector* self,const T v);
    alias da_ImDrawList_PathLineTo = void function(ImDrawList* self,const ImVec2 pos);
    alias da_igSetNextItemWidth = void function(float item_width);
    alias da_igBeginGroup = void function();
    alias da_ImGuiTextBuffer_empty = bool function(ImGuiTextBuffer* self);
    alias da_ImDrawListSplitter_SetCurrentChannel = void function(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
    alias da_igSaveIniSettingsToMemory = const(char)* function(size_t* out_ini_size = null);
    alias da_ImFontAtlas_destroy = void function(ImFontAtlas* self);
    alias da_ImGuiTextBuffer_appendfv = void function(ImGuiTextBuffer* self,const char* fmt,va_list args);
    alias da_ImFontAtlas_CalcCustomRectUV = void function(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
    alias da_igEndDragDropSource = void function();
    alias da_ImGuiIO_destroy = void function(ImGuiIO* self);
    alias da_igIsItemDeactivatedAfterEdit = bool function();
    alias da_igLabelText = void function(const char* label,const char* fmt,...);
    alias da_ImGuiTextFilter_IsActive = bool function(ImGuiTextFilter* self);
    alias da_ImGuiPlatformMonitor_ImGuiPlatformMonitor = ImGuiPlatformMonitor* function();
    alias da_ImDrawList_UpdateClipRect = void function(ImDrawList* self);
    alias da_igSetWindowPosVec2 = void function(const ImVec2 pos,ImGuiCond cond = 0);
    alias da_ImFontAtlas_AddFontFromMemoryCompressedTTF = ImFont* function(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg = null,const ImWchar* glyph_ranges = null);
    alias da_igTreeNodeExStrStr = bool function(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    alias da_ImDrawList_PushClipRect = void function(ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect = false);
    alias da_igSetStateStorage = void function(ImGuiStorage* storage);
    alias da_igSetTooltip = void function(const char* fmt,...);
    alias da_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon = const(ImWchar)* function(ImFontAtlas* self);
    alias da_igGetContentRegionAvail_nonUDT = void function(ImVec2 *pOut);
    alias da_igLogToClipboard = void function(int auto_open_depth = -1);
    alias da_igDragFloat2 = bool function(const char* label,ref float[2] v,float v_speed = 1.0f,float v_min = 0.0f,float v_max = 0.0f,const char* format = "%.3f",float power = 1.0f);
    alias da_igDragFloat3 = bool function(const char* label,ref float[3] v,float v_speed = 1.0f,float v_min = 0.0f,float v_max = 0.0f,const char* format = "%.3f",float power = 1.0f);
    alias da_igDragFloat4 = bool function(const char* label,ref float[4] v,float v_speed = 1.0f,float v_min = 0.0f,float v_max = 0.0f,const char* format = "%.3f",float power = 1.0f);
    alias da_ImDrawList_ClearFreeMemory = void function(ImDrawList* self);
    alias da_igBeginChildID = bool function(ImGuiID id,const ImVec2 size = ImVec2(0,0),bool border = false,ImGuiWindowFlags flags = 0);
    alias da_ImDrawListSplitter_destroy = void function(ImDrawListSplitter* self);
    alias da_ImDrawList_AddNgonFilled = void function(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
    alias da_igPlotHistogramFloatPtr = void function(const char* label,const float* values,int values_count,int values_offset = 0,const char* overlay_text = null,float scale_min = float.max,float scale_max = float.max,ImVec2 graph_size = ImVec2(0,0),int stride = float.sizeof);
    alias da_igGetIDPtr = ImGuiID function(const void* ptr_id);
    alias da_igSetColumnOffset = void function(int column_index,float offset_x);
    alias da_ImGuiStorage_SetBool = void function(ImGuiStorage* self,ImGuiID key,bool val);
    alias da_igTreeNodeExPtr = bool function(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    alias da_ImFontAtlasCustomRect_destroy = void function(ImFontAtlasCustomRect* self);
    alias da_ImGuiTextFilter_Clear = void function(ImGuiTextFilter* self);
    alias da_ImDrawList_AddQuadFilled = void function(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
    alias da_ImVec2_destroy = void function(ImVec2* self);
    alias da_igSaveIniSettingsToDisk = void function(const char* ini_filename);
    alias da_igIsWindowDocked = bool function();
    alias da_igSetNextWindowSize = void function(const ImVec2 size,ImGuiCond cond = 0);
    alias da_igIsMousePosValid = bool function(const ImVec2* mouse_pos = null);
    alias da_ImGuiTextRange_ImGuiTextRangeStr = ImGuiTextRange* function(const char* _b,const char* _e);
    //alias //da_ImVector_end_const = const(T)* function(ImVector* self);
    alias da_ImGuiListClipper_End = void function(ImGuiListClipper* self);
    alias da_igFindViewportByPlatformHandle = ImGuiViewport* function(void* platform_handle);
    alias da_ImFontAtlas_ClearFonts = void function(ImFontAtlas* self);
    alias da_ImFont_SetFallbackChar = void function(ImFont* self,ImWchar c);
    alias da_igSetScrollY = void function(float scroll_y);
    alias da_igSetScrollX = void function(float scroll_x);
    alias da_ImColor_SetHSV = void function(ImColor* self,float h,float s,float v,float a = 1.0f);
    alias da_igGetContentRegionMax_nonUDT = void function(ImVec2 *pOut);
    alias da_igGetKeyIndex = int function(ImGuiKey imgui_key);
    alias da_igBeginChildFrame = bool function(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags = 0);
    alias da_igInputFloat3 = bool function(const char* label,ref float[3] v,const char* format = "%.3f",ImGuiInputTextFlags flags = 0);
    alias da_igInputFloat2 = bool function(const char* label,ref float[2] v,const char* format = "%.3f",ImGuiInputTextFlags flags = 0);
    alias da_ImFont_ClearOutputData = void function(ImFont* self);
    alias da_igPushIDPtr = void function(const void* ptr_id);
    alias da_ImFontAtlas_Clear = void function(ImFontAtlas* self);
    alias da_ImVec4_ImVec4 = ImVec4* function();
    alias da_ImFontAtlas_Build = bool function(ImFontAtlas* self);
    alias da_igColorEdit3 = bool function(const char* label,ref float[3] col,ImGuiColorEditFlags flags = 0);
    alias da_ImGuiTextBuffer_reserve = void function(ImGuiTextBuffer* self,int capacity);
    alias da_igColorEdit4 = bool function(const char* label,ref float[4] col,ImGuiColorEditFlags flags = 0);
    alias da_igInputInt = bool function(const char* label,int* v,int step = 1,int step_fast = 100,ImGuiInputTextFlags flags = 0);
    alias da_igGetTime = double function();
    alias da_ImColor_ImColorVec4 = ImColor* function(const ImVec4 col);
    alias da_igSetNextWindowCollapsed = void function(bool collapsed,ImGuiCond cond = 0);
    alias da_ImDrawData_ScaleClipRects = void function(ImDrawData* self,const ImVec2 fb_scale);
    alias da_ImDrawList_PrimWriteVtx = void function(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    alias da_ImGuiTextBuffer_size = int function(ImGuiTextBuffer* self);
    alias da_igSetScrollFromPosY = void function(float local_y,float center_y_ratio = 0.5f);
    alias da_ImFontAtlas_GetMouseCursorTexData = bool function(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ref ImVec2[2] out_uv_border,ref ImVec2[2] out_uv_fill);
    alias da_igInputInt2 = bool function(const char* label,ref int[2] v,ImGuiInputTextFlags flags = 0);
    alias da_igSelectableBoolPtr = bool function(const char* label,bool* p_selected,ImGuiSelectableFlags flags = 0,const ImVec2 size = ImVec2(0,0));
    alias da_igGetItemRectMax_nonUDT = void function(ImVec2 *pOut);
    alias da_igDockSpaceOverViewport = ImGuiID function(ImGuiViewport* viewport = null,ImGuiDockNodeFlags flags = 0,const ImGuiWindowClass* window_class = null);
    alias da_igInputInt4 = bool function(const char* label,ref int[4] v,ImGuiInputTextFlags flags = 0);
    alias da_igSetWindowFocus = void function();
    alias da_igImageButton = bool function(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0 = ImVec2(0,0),const ImVec2 uv1 = ImVec2(1,1),int frame_padding = -1,const ImVec4 bg_col = ImVec4(0,0,0,0),const ImVec4 tint_col = ImVec4(1,1,1,1));
    alias da_igDestroyContext = void function(ImGuiContext* ctx = null);
    //alias //da_ImVector_eraseTPtr = T* function(ImVector* self,const T* it,const T* it_last);
    alias da_igGetIO = ImGuiIO* function();
    alias da_igGetKeyPressedAmount = int function(int key_index,float repeat_delay,float rate);
    alias da_igUnindent = void function(float indent_w = 0.0f);
    alias da_igCollapsingHeaderBoolPtr = bool function(const char* label,bool* p_open,ImGuiTreeNodeFlags flags = 0);
    alias da_igLoadIniSettingsFromDisk = void function(const char* ini_filename);
    alias da_igPlotLines = void function(const char* label,const float* values,int values_count,int values_offset = 0,const char* overlay_text = null,float scale_min = float.max,float scale_max = float.max,ImVec2 graph_size = ImVec2(0,0),int stride = float.sizeof);
    //alias //da_ImVector_find = T* function(ImVector* self,const T v);
    alias da_igNewFrame = void function();
    alias da_igSliderScalar = bool function(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format = null,float power = 1.0f);
    alias da_igIsKeyDown = bool function(int user_key_index);
    alias da_ImDrawCmd_destroy = void function(ImDrawCmd* self);
    alias da_ImVec4_destroy = void function(ImVec4* self);
    alias da_igBulletTextV = void function(const char* fmt,va_list args);
    alias da_igPopClipRect = void function();
    alias da_ImDrawList_PrimWriteIdx = void function(ImDrawList* self,ImDrawIdx idx);
    alias da_igIsMouseDown = bool function(ImGuiMouseButton button);
    alias da_igIsItemActivated = bool function();
    alias da_igShowStyleEditor = void function(ImGuiStyle* ref_);
    alias da_igIsRectVisibleVec2 = bool function(const ImVec2 rect_min,const ImVec2 rect_max);
    alias da_ImDrawList_AddImageQuad = void function(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1 = ImVec2(0,0),const ImVec2 uv2 = ImVec2(1,0),const ImVec2 uv3 = ImVec2(1,1),const ImVec2 uv4 = ImVec2(0,1),ImU32 col = ((cast(ImU32)255<<24)|(cast(ImU32)255<<16)|(cast(ImU32)255<<8)|(cast(ImU32)255<<0)));
    alias da_ImGuiViewport_GetWorkSize_nonUDT = void function(ImVec2 *pOut,ImGuiViewport* self);
    alias da_igDragFloat = bool function(const char* label,float* v,float v_speed = 1.0f,float v_min = 0.0f,float v_max = 0.0f,const char* format = "%.3f",float power = 1.0f);
    alias da_ImColor_ImColorInt = ImColor* function(int r,int g,int b,int a = 255);
    alias da_igIsAnyItemFocused = bool function();
    alias da_igCombo = bool function(const char* label,int* current_item,const char** items,int items_count,int popup_max_height_in_items = -1);
    //alias //da_ImVector_begin_const = const(T)* function(ImVector* self);
    alias da_igCreateContext = ImGuiContext* function(ImFontAtlas* shared_font_atlas = null);
    alias da_igGetTextLineHeight = float function();
    alias da_igTextV = void function(const char* fmt,va_list args);
    alias da_ImFont_GetCharAdvance = float function(ImFont* self,ImWchar c);
    alias da_ImGuiTextBuffer_appendf = void function(ImGuiTextBuffer* self,const char* fmt,...);
    //alias //da_ImVector_insert = T* function(ImVector* self,const T* it,const T v);
    alias da_ImGuiListClipper_Step = bool function(ImGuiListClipper* self);
    alias da_ImFontAtlas_GetGlyphRangesThai = const(ImWchar)* function(ImFontAtlas* self);
    alias da_ImFont_FindGlyphNoFallback = const(ImFontGlyph)* function(ImFont* self,ImWchar c);
    alias da_igShowMetricsWindow = void function(bool* p_open = null);
    alias da_igVSliderInt = bool function(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format = "%d");
    alias da_ImDrawData_ImDrawData = ImDrawData* function();
    alias da_igGetMousePosOnOpeningCurrentPopup_nonUDT = void function(ImVec2 *pOut);
    alias da_igTreeNodeExVStr = bool function(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    alias da_igGetStyle = ImGuiStyle* function();
    alias da_igTreePop = void function();
    alias da_igGetFontSize = float function();
    alias da_igPopAllowKeyboardFocus = void function();
    alias da_ImDrawList_AddDrawCmd = void function(ImDrawList* self);
    alias da_igEnd = void function();
    alias da_ImDrawList_AddTextFontPtr = void function(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end = null,float wrap_width = 0.0f,const ImVec4* cpu_fine_clip_rect = null);
    alias da_ImColor_ImColorFloat = ImColor* function(float r,float g,float b,float a = 1.0f);
    alias da_igSetMouseCursor = void function(ImGuiMouseCursor cursor_type);
    alias da_igPushIDStr = void function(const char* str_id);
    alias da_igGetCursorPos_nonUDT = void function(ImVec2 *pOut);
    alias da_igSetNextWindowDockID = void function(ImGuiID dock_id,ImGuiCond cond = 0);
    //alias //da_ImVector_front_const = const(T)* function(ImVector* self);
    alias da_ImDrawList_PrimRectUV = void function(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
    alias da_ImGuiTextBuffer_c_str = const(char)* function(ImGuiTextBuffer* self);
    alias da_igIsWindowCollapsed = bool function();
    alias da_igIsMouseReleased = bool function(ImGuiMouseButton button);
    alias da_igInputFloat4 = bool function(const char* label,ref float[4] v,const char* format = "%.3f",ImGuiInputTextFlags flags = 0);
    alias da_ImGuiTextFilter_PassFilter = bool function(ImGuiTextFilter* self,const char* text,const char* text_end = null);
    alias da_igSetWindowSizeStr = void function(const char* name,const ImVec2 size,ImGuiCond cond = 0);
    alias da_igSetItemAllowOverlap = void function();
    alias da_igGetColumnIndex = int function();
    alias da_ImDrawList_PrimUnreserve = void function(ImDrawList* self,int idx_count,int vtx_count);
    alias da_igSliderAngle = bool function(const char* label,float* v_rad,float v_degrees_min = -360.0f,float v_degrees_max = +360.0f,const char* format = "%.0f deg");
    alias da_ImGuiStorage_Clear = void function(ImGuiStorage* self);
    alias da_igCalcTextSize_nonUDT = void function(ImVec2 *pOut,const char* text,const char* text_end = null,bool hide_text_after_double_hash = false,float wrap_width = -1.0f);
    alias da_ImDrawList_PopTextureID = void function(ImDrawList* self);
    alias da_igSameLine = void function(float offset_from_start_x = 0.0f,float spacing = -1.0f);
    alias da_igPushButtonRepeat = void function(bool repeat);
    alias da_igSetNextWindowSizeConstraints = void function(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback = null,void* custom_callback_data = null);
    alias da_ImDrawList_ImDrawList = ImDrawList* function(const ImDrawListSharedData* shared_data);
    alias da_ImGuiListClipper_ImGuiListClipper = ImGuiListClipper* function(int items_count = -1,float items_height = -1.0f);
    alias da_ImVec4_ImVec4Float = ImVec4* function(float _x,float _y,float _z,float _w);
    alias da_ImDrawList_ChannelsSetCurrent = void function(ImDrawList* self,int n);
    alias da_ImDrawCmd_ImDrawCmd = ImDrawCmd* function();
    alias da_igEndGroup = void function();
    alias da_ImGuiPlatformMonitor_destroy = void function(ImGuiPlatformMonitor* self);
    alias da_igMenuItemBool = bool function(const char* label,const char* shortcut = null,bool selected = false,bool enabled = true);
    alias da_igBeginMenuBar = bool function();
    alias da_igRenderPlatformWindowsDefault = void function(void* platform_arg = null,void* renderer_arg = null);
    alias da_igCalcListClipping = void function(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end);
    alias da_ImGuiStorage_GetInt = int function(ImGuiStorage* self,ImGuiID key,int default_val = 0);
}

__gshared
{
	da_ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder;
	da_ImGuiPayload_destroy ImGuiPayload_destroy;
	da_ImDrawList_AddCallback ImDrawList_AddCallback;
	da_ImGuiTextRange_ImGuiTextRange ImGuiTextRange_ImGuiTextRange;
	da_igIsItemHovered igIsItemHovered;
	da_igSetCursorScreenPos igSetCursorScreenPos;
	da_igSetCursorPos igSetCursorPos;
	da_ImDrawList_PopClipRect ImDrawList_PopClipRect;
	da_igBeginDragDropSource igBeginDragDropSource;
	da_igTreeNodeExStr igTreeNodeExStr;
	da_ImGuiStyle_ScaleAllSizes ImGuiStyle_ScaleAllSizes;
	da_ImDrawList_ChannelsMerge ImDrawList_ChannelsMerge;
	da_igPushIDRange igPushIDRange;
	//da_ImVector_find_erase ImVector_find_erase;
	da_igIsWindowAppearing igIsWindowAppearing;
	da_ImFont_BuildLookupTable ImFont_BuildLookupTable;
	da_ImFontAtlas_GetGlyphRangesKorean ImFontAtlas_GetGlyphRangesKorean;
	//da_ImVector_back ImVector_back;
	da_igShowDemoWindow igShowDemoWindow;
	da_ImDrawList_PathBezierCurveTo ImDrawList_PathBezierCurveTo;
	da_igPushStyleVarVec2 igPushStyleVarVec2;
	//da_ImVector_clear ImVector_clear;
	da_ImFontAtlas_GetGlyphRangesChineseFull ImFontAtlas_GetGlyphRangesChineseFull;
	da_igListBoxFnPtr igListBoxFnPtr;
	da_igPushTextWrapPos igPushTextWrapPos;
	da_igPopStyleColor igPopStyleColor;
	da_ImDrawList_GetClipRectMax_nonUDT ImDrawList_GetClipRectMax_nonUDT;
	da_igSetWindowFontScale igSetWindowFontScale;
	da_ImFontAtlas_ClearInputData ImFontAtlas_ClearInputData;
	da_igIsItemActive igIsItemActive;
	da_igBeginMenu igBeginMenu;
	da_igIsMouseClicked igIsMouseClicked;
	da_igPlotHistogramFnPtr igPlotHistogramFnPtr;
	da_igOpenPopupOnItemClick igOpenPopupOnItemClick;
	da_ImDrawList_AddCircle ImDrawList_AddCircle;
	da_ImFontAtlas_AddFontFromFileTTF ImFontAtlas_AddFontFromFileTTF;
	da_igIsItemEdited igIsItemEdited;
	da_igMemAlloc igMemAlloc;
	da_igGetWindowPos_nonUDT igGetWindowPos_nonUDT;
	da_ImFontGlyphRangesBuilder_destroy ImFontGlyphRangesBuilder_destroy;
	da_igSetTooltipV igSetTooltipV;
	da_ImGuiStoragePair_ImGuiStoragePairFloat ImGuiStoragePair_ImGuiStoragePairFloat;
	da_ImGuiTextBuffer_destroy ImGuiTextBuffer_destroy;
	da_ImGuiListClipper_destroy ImGuiListClipper_destroy;
	//da_ImVector_size ImVector_size;
	da_ImDrawList_PathClear ImDrawList_PathClear;
	da_ImDrawListSplitter_ClearFreeMemory ImDrawListSplitter_ClearFreeMemory;
	da_ImDrawList_PathLineToMergeDuplicate ImDrawList_PathLineToMergeDuplicate;
	//da_ImVector_end ImVector_end;
	da_igShowUserGuide igShowUserGuide;
	//da_ImVector_pop_back ImVector_pop_back;
	da_igLabelTextV igLabelTextV;
	da_ImDrawList_AddText ImDrawList_AddText;
	da_igGetDrawListSharedData igGetDrawListSharedData;
	da_ImDrawData_DeIndexAllBuffers ImDrawData_DeIndexAllBuffers;
	da_igSetScrollHereY igSetScrollHereY;
	da_igSetScrollHereX igSetScrollHereX;
	da_igGetClipboardText igGetClipboardText;
	da_igSetWindowFocusStr igSetWindowFocusStr;
	da_igBeginMainMenuBar igBeginMainMenuBar;
	da_ImGuiPayload_ImGuiPayload ImGuiPayload_ImGuiPayload;
	da_ImDrawList_AddRectFilledMultiColor ImDrawList_AddRectFilledMultiColor;
	da_igCheckbox igCheckbox;
	da_igStyleColorsDark igStyleColorsDark;
	da_ImFontConfig_ImFontConfig ImFontConfig_ImFontConfig;
	da_igGetWindowDockID igGetWindowDockID;
	da_ImGuiTextFilter_Draw ImGuiTextFilter_Draw;
	da_igGetCurrentContext igGetCurrentContext;
	da_ImGuiWindowClass_destroy ImGuiWindowClass_destroy;
	da_ImDrawList_PrimQuadUV ImDrawList_PrimQuadUV;
	da_ImGuiPayload_Clear ImGuiPayload_Clear;
	da_igTextWrapped igTextWrapped;
	da_ImGuiPayload_IsDataType ImGuiPayload_IsDataType;
	da_ImDrawList_AddNgon ImDrawList_AddNgon;
	da_igGetCursorStartPos_nonUDT igGetCursorStartPos_nonUDT;
	da_igGetCursorScreenPos_nonUDT igGetCursorScreenPos_nonUDT;
	da_igValueUint igValueUint;
	da_ImFontAtlas_ClearTexData ImFontAtlas_ClearTexData;
	da_igIsWindowFocused igIsWindowFocused;
	da_igSetNextItemOpen igSetNextItemOpen;
	da_igPushItemWidth igPushItemWidth;
	da_igTreePushStr igTreePushStr;
	da_ImFontGlyphRangesBuilder_AddText ImFontGlyphRangesBuilder_AddText;
	da_igSetScrollFromPosX igSetScrollFromPosX;
	//da_ImVector_begin ImVector_begin;
	da_igCalcItemWidth igCalcItemWidth;
	da_igDragScalar igDragScalar;
	da_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF ImFontAtlas_AddFontFromMemoryCompressedBase85TTF;
	//da_ImVector_back_const ImVector_back_const;
	da_ImGuiTextRange_empty ImGuiTextRange_empty;
	da_igStyleColorsClassic igStyleColorsClassic;
	da_ImFont_GetDebugName ImFont_GetDebugName;
	da_ImColor_HSV_nonUDT ImColor_HSV_nonUDT;
	da_ImDrawList_PathStroke ImDrawList_PathStroke;
	da_igTreeNodeVStr igTreeNodeVStr;
	da_igValueFloat igValueFloat;
	da_ImFont_IsLoaded ImFont_IsLoaded;
	da_igGetTreeNodeToLabelSpacing igGetTreeNodeToLabelSpacing;
	da_ImGuiViewport_GetWorkPos_nonUDT ImGuiViewport_GetWorkPos_nonUDT;
	da_ImDrawList_UpdateTextureID ImDrawList_UpdateTextureID;
	da_ImDrawList_PrimRect ImDrawList_PrimRect;
	da_ImFont_GrowIndex ImFont_GrowIndex;
	da_ImFont_ImFont ImFont_ImFont;
	da_ImDrawList_AddPolyline ImDrawList_AddPolyline;
	da_igGetWindowContentRegionMax_nonUDT igGetWindowContentRegionMax_nonUDT;
	da_igNextColumn igNextColumn;
	da_ImGuiStorage_SetInt ImGuiStorage_SetInt;
	da_igListBoxStr_arr igListBoxStr_arr;
	da_igGetBackgroundDrawList igGetBackgroundDrawList;
	da_igDragFloatRange2 igDragFloatRange2;
	da_igAcceptDragDropPayload igAcceptDragDropPayload;
	da_ImGuiOnceUponAFrame_destroy ImGuiOnceUponAFrame_destroy;
	da_ImGuiTextBuffer_end ImGuiTextBuffer_end;
	da_igBullet igBullet;
	da_igBegin igBegin;
	da_igShowStyleSelector igShowStyleSelector;
	//da_ImVector_destroy ImVector_destroy;
	da_igSetWindowCollapsedBool igSetWindowCollapsedBool;
	da_igSliderFloat igSliderFloat;
	da_igGetFontTexUvWhitePixel_nonUDT igGetFontTexUvWhitePixel_nonUDT;
	da_igComboStr igComboStr;
	da_igDestroyPlatformWindows igDestroyPlatformWindows;
	da_igListBoxHeaderVec2 igListBoxHeaderVec2;
	da_ImColor_destroy ImColor_destroy;
	da_igSetDragDropPayload igSetDragDropPayload;
	da_ImGuiStorage_GetVoidPtrRef ImGuiStorage_GetVoidPtrRef;
	da_igSetWindowSizeVec2 igSetWindowSizeVec2;
	da_igListBoxHeaderInt igListBoxHeaderInt;
	//da_ImVector_capacity ImVector_capacity;
	da_igLogToFile igLogToFile;
	da_igBeginPopupContextWindow igBeginPopupContextWindow;
	da_ImGuiViewport_destroy ImGuiViewport_destroy;
	da_igInputFloat igInputFloat;
	da_ImFont_CalcWordWrapPositionA ImFont_CalcWordWrapPositionA;
	da_igShowFontSelector igShowFontSelector;
	da_igMemFree igMemFree;
	da_ImDrawData_Clear ImDrawData_Clear;
	da_ImFontAtlas_AddCustomRectRegular ImFontAtlas_AddCustomRectRegular;
	da_igGetWindowContentRegionMin_nonUDT igGetWindowContentRegionMin_nonUDT;
	da_igColorButton igColorButton;
	da_igGetForegroundDrawList igGetForegroundDrawList;
	da_igIsMouseDoubleClicked igIsMouseDoubleClicked;
	da_igSetNextWindowFocus igSetNextWindowFocus;
	da_igIsKeyPressed igIsKeyPressed;
	da_igInputScalar igInputScalar;
	da_ImDrawList_AddImageRounded ImDrawList_AddImageRounded;
	da_igGetFont igGetFont;
	da_ImGuiStorage_SetVoidPtr ImGuiStorage_SetVoidPtr;
	da_igIsPopupOpen igIsPopupOpen;
	da_igSelectable igSelectable;
	da_igGetPlatformIO igGetPlatformIO;
	da_igEndTabBar igEndTabBar;
	da_igPopButtonRepeat igPopButtonRepeat;
	da_igEndMenuBar igEndMenuBar;
	da_ImGuiTextFilter_Build ImGuiTextFilter_Build;
	da_ImGuiStorage_SetFloat ImGuiStorage_SetFloat;
	da_igIsItemDeactivated igIsItemDeactivated;
	da_igDebugCheckVersionAndDataLayout igDebugCheckVersionAndDataLayout;
	da_ImFont_RenderChar ImFont_RenderChar;
	da_igBeginTabItem igBeginTabItem;
	da_igDragInt igDragInt;
	da_igIsAnyItemHovered igIsAnyItemHovered;
	da_igLoadIniSettingsFromMemory igLoadIniSettingsFromMemory;
	da_igEndMenu igEndMenu;
	da_igEndFrame igEndFrame;
	da_ImFontAtlas_GetTexDataAsAlpha8 ImFontAtlas_GetTexDataAsAlpha8;
	da_igBeginChild igBeginChild;
	da_igPushAllowKeyboardFocus igPushAllowKeyboardFocus;
	da_ImDrawList_destroy ImDrawList_destroy;
	da_igSeparator igSeparator;
	da_ImGuiTextBuffer_clear ImGuiTextBuffer_clear;
	da_ImFont_destroy ImFont_destroy;
	da_igSetItemDefaultFocus igSetItemDefaultFocus;
	da_igTreePushPtr igTreePushPtr;
	da_ImGuiWindowClass_ImGuiWindowClass ImGuiWindowClass_ImGuiWindowClass;
	da_ImColor_ImColorU32 ImColor_ImColorU32;
	da_ImFontAtlas_GetTexDataAsRGBA32 ImFontAtlas_GetTexDataAsRGBA32;
	da_ImDrawList_PrimVtx ImDrawList_PrimVtx;
	da_igIsItemVisible igIsItemVisible;
	da_igGetItemRectSize_nonUDT igGetItemRectSize_nonUDT;
	da_ImGuiTextRange_destroy ImGuiTextRange_destroy;
	da_ImGuiPlatformIO_destroy ImGuiPlatformIO_destroy;
	da_ImFont_RenderText ImFont_RenderText;
	da_ImDrawList_AddTriangle ImDrawList_AddTriangle;
	da_igBulletText igBulletText;
	da_igCaptureMouseFromApp igCaptureMouseFromApp;
	da_igRadioButtonIntPtr igRadioButtonIntPtr;
	da_igBeginCombo igBeginCombo;
	da_igPopTextWrapPos igPopTextWrapPos;
	//da_ImVector_reserve ImVector_reserve;
	da_igGetFrameHeight igGetFrameHeight;
	da_igDragScalarN igDragScalarN;
	da_igGetBackgroundDrawListViewportPtr igGetBackgroundDrawListViewportPtr;
	da_ImGuiStyle_destroy ImGuiStyle_destroy;
	da_igComboFnPtr igComboFnPtr;
	da_igEndPopup igEndPopup;
	da_igGetVersion igGetVersion;
	da_igIsAnyItemActive igIsAnyItemActive;
	da_ImFontGlyphRangesBuilder_Clear ImFontGlyphRangesBuilder_Clear;
	da_igTreeNodeExVPtr igTreeNodeExVPtr;
	da_ImDrawList_AddLine ImDrawList_AddLine;
	da_igSetKeyboardFocusHere igSetKeyboardFocusHere;
	da_igEndTooltip igEndTooltip;
	da_ImGuiTextFilter_destroy ImGuiTextFilter_destroy;
	da_igBeginTooltip igBeginTooltip;
	da_igSetColorEditOptions igSetColorEditOptions;
	da_ImGuiTextBuffer_ImGuiTextBuffer ImGuiTextBuffer_ImGuiTextBuffer;
	da_igGetMouseCursor igGetMouseCursor;
	da_ImDrawList_PathArcToFast ImDrawList_PathArcToFast;
	da_igSetNextWindowPos igSetNextWindowPos;
	da_ImFontConfig_destroy ImFontConfig_destroy;
	da_ImFontAtlas_ImFontAtlas ImFontAtlas_ImFontAtlas;
	da_igEndMainMenuBar igEndMainMenuBar;
	//da_ImVector_size_in_bytes ImVector_size_in_bytes;
	da_igSmallButton igSmallButton;
	da_igInputDouble igInputDouble;
	da_igTextColored igTextColored;
	da_igSetNextWindowBgAlpha igSetNextWindowBgAlpha;
	da_ImDrawList_ChannelsSplit ImDrawList_ChannelsSplit;
	da_igIsMouseDragging igIsMouseDragging;
	da_igTextColoredV igTextColoredV;
	da_igDockSpace igDockSpace;
	da_igBeginPopupContextItem igBeginPopupContextItem;
	da_igVSliderFloat igVSliderFloat;
	da_igColorConvertRGBtoHSV igColorConvertRGBtoHSV;
	da_ImColor_ImColor ImColor_ImColor;
	//da_ImVector_ImVector ImVector_ImVector;
	da_igIsKeyReleased igIsKeyReleased;
	da_igText igText;
	da_ImFontAtlas_GetGlyphRangesCyrillic ImFontAtlas_GetGlyphRangesCyrillic;
	//da_ImVector_front ImVector_front;
	da_igImage igImage;
	da_igGetColumnOffset igGetColumnOffset;
	da_ImGuiIO_ClearInputCharacters ImGuiIO_ClearInputCharacters;
	da_igCloseCurrentPopup igCloseCurrentPopup;
	da_igPushStyleColorU32 igPushStyleColorU32;
	da_ImGuiTextBuffer_begin ImGuiTextBuffer_begin;
	da_igColorPicker4 igColorPicker4;
	da_igColorPicker3 igColorPicker3;
	da_igPushFont igPushFont;
	da_igEndDragDropTarget igEndDragDropTarget;
	da_ImGuiTextRange_split ImGuiTextRange_split;
	da_ImGuiTextFilter_ImGuiTextFilter ImGuiTextFilter_ImGuiTextFilter;
	da_ImDrawList_PrimReserve ImDrawList_PrimReserve;
	da_ImGuiPayload_IsPreview ImGuiPayload_IsPreview;
	da_ImGuiStorage_SetAllInt ImGuiStorage_SetAllInt;
	da_igGetScrollY igGetScrollY;
	da_igGetScrollX igGetScrollX;
	da_ImFontAtlas_AddFont ImFontAtlas_AddFont;
	da_ImGuiStoragePair_ImGuiStoragePairPtr ImGuiStoragePair_ImGuiStoragePairPtr;
	da_ImDrawList_Clear ImDrawList_Clear;
	da_igLogText igLogText;
	da_igInputTextMultiline igInputTextMultiline;
	da_igLogButtons igLogButtons;
	da_igDummy igDummy;
	da_ImFont_FindGlyph ImFont_FindGlyph;
	da_igTreeNodeVPtr igTreeNodeVPtr;
	//da_ImVector_erase_unsorted ImVector_erase_unsorted;
	da_igDragInt4 igDragInt4;
	da_igSetWindowCollapsedStr igSetWindowCollapsedStr;
	da_igGetWindowDrawList igGetWindowDrawList;
	da_igDragInt3 igDragInt3;
	da_igDragInt2 igDragInt2;
	da_ImFontAtlas_IsBuilt ImFontAtlas_IsBuilt;
	da_igDragIntRange2 igDragIntRange2;
	//da_ImVector_ImVectorVector ImVector_ImVectorVector;
	da_ImGuiPayload_IsDelivery ImGuiPayload_IsDelivery;
	da_igProgressBar igProgressBar;
	da_igSetCursorPosY igSetCursorPosY;
	da_igSliderFloat4 igSliderFloat4;
	da_igSliderFloat3 igSliderFloat3;
	da_igSliderFloat2 igSliderFloat2;
	da_ImFont_AddRemapChar ImFont_AddRemapChar;
	da_igGetForegroundDrawListViewportPtr igGetForegroundDrawListViewportPtr;
	da_igTextDisabledV igTextDisabledV;
	da_igSetColumnWidth igSetColumnWidth;
	da_igStyleColorsLight igStyleColorsLight;
	da_igColorConvertFloat4ToU32 igColorConvertFloat4ToU32;
	da_ImFontAtlas_GetGlyphRangesVietnamese ImFontAtlas_GetGlyphRangesVietnamese;
	da_igVSliderScalar igVSliderScalar;
	//da_ImVector_find_const ImVector_find_const;
	//da_ImVector_find_erase_unsorted ImVector_find_erase_unsorted;
	da_igGetWindowDpiScale igGetWindowDpiScale;
	da_igGetCursorPosY igGetCursorPosY;
	da_igGetCursorPosX igGetCursorPosX;
	da_igGetStateStorage igGetStateStorage;
	da_igGetWindowHeight igGetWindowHeight;
	da_ImGuiIO_AddInputCharactersUTF8 ImGuiIO_AddInputCharactersUTF8;
	da_igEndTabItem igEndTabItem;
	da_igGetStyleColorName igGetStyleColorName;
	da_igMenuItemBoolPtr igMenuItemBoolPtr;
	da_ImFontGlyphRangesBuilder_SetBit ImFontGlyphRangesBuilder_SetBit;
	da_ImDrawList_AddBezierCurve ImDrawList_AddBezierCurve;
	da_ImDrawList_PathArcTo ImDrawList_PathArcTo;
	da_igGetMouseDragDelta_nonUDT igGetMouseDragDelta_nonUDT;
	da_igEndCombo igEndCombo;
	da_ImGuiStorage_GetVoidPtr ImGuiStorage_GetVoidPtr;
	da_igPushClipRect igPushClipRect;
	da_igTreeNodePtr igTreeNodePtr;
	da_ImDrawList_PushTextureID ImDrawList_PushTextureID;
	da_igButton igButton;
	da_igIsItemFocused igIsItemFocused;
	//da_ImVector_resizeT ImVector_resizeT;
	da_ImDrawList_GetClipRectMin_nonUDT ImDrawList_GetClipRectMin_nonUDT;
	da_ImDrawListSplitter_Split ImDrawListSplitter_Split;
	da_ImGuiStoragePair_ImGuiStoragePairInt ImGuiStoragePair_ImGuiStoragePairInt;
	da_igGetIDRange igGetIDRange;
	da_igGetDrawData igGetDrawData;
	da_ImFontGlyphRangesBuilder_AddChar ImFontGlyphRangesBuilder_AddChar;
	da_igFindViewportByID igFindViewportByID;
	da_igIsRectVisible igIsRectVisible;
	da_igPopStyleVar igPopStyleVar;
	da_ImFontAtlas_SetTexID ImFontAtlas_SetTexID;
	da_ImGuiInputTextCallbackData_DeleteChars ImGuiInputTextCallbackData_DeleteChars;
	da_igGetWindowWidth igGetWindowWidth;
	da_igIsMouseHoveringRect igIsMouseHoveringRect;
	da_igGetColorU32U32 igGetColorU32U32;
	da_igIsAnyMouseDown igIsAnyMouseDown;
	da_ImGuiStorage_GetFloat ImGuiStorage_GetFloat;
	da_ImFontAtlasCustomRect_ImFontAtlasCustomRect ImFontAtlasCustomRect_ImFontAtlasCustomRect;
	da_igColorConvertHSVtoRGB igColorConvertHSVtoRGB;
	da_igTextWrappedV igTextWrappedV;
	da_igSliderInt4 igSliderInt4;
	da_ImDrawList_PathRect ImDrawList_PathRect;
	da_igSliderInt2 igSliderInt2;
	da_igSliderInt3 igSliderInt3;
	da_igCollapsingHeader igCollapsingHeader;
	da_ImGuiInputTextCallbackData_InsertChars ImGuiInputTextCallbackData_InsertChars;
	da_igEndChild igEndChild;
	da_igGetTextLineHeightWithSpacing igGetTextLineHeightWithSpacing;
	da_igGetColumnsCount igGetColumnsCount;
	da_ImDrawList_AddConvexPolyFilled ImDrawList_AddConvexPolyFilled;
	da_ImDrawListSplitter_Merge ImDrawListSplitter_Merge;
	da_igColorConvertU32ToFloat4_nonUDT igColorConvertU32ToFloat4_nonUDT;
	//da_ImVector_resize ImVector_resize;
	da_ImVec2_ImVec2 ImVec2_ImVec2;
	//da_ImVector_index_from_ptr ImVector_index_from_ptr;
	da_ImGuiViewport_ImGuiViewport ImGuiViewport_ImGuiViewport;
	da_igLogToTTY igLogToTTY;
	da_igSetNextWindowClass igSetNextWindowClass;
	da_ImGuiListClipper_Begin ImGuiListClipper_Begin;
	da_igPopFont igPopFont;
	da_ImFontAtlas_GetCustomRectByIndex ImFontAtlas_GetCustomRectByIndex;
	da_igGetIDStr igGetIDStr;
	da_igRender igRender;
	//da_ImVector_erase ImVector_erase;
	da_igPushStyleColor igPushStyleColor;
	da_ImDrawList_AddTriangleFilled ImDrawList_AddTriangleFilled;
	da_ImDrawList_PushClipRectFullScreen ImDrawList_PushClipRectFullScreen;
	da_igGetColorU32Vec4 igGetColorU32Vec4;
	da_igBeginPopupContextVoid igBeginPopupContextVoid;
	da_igGetFrameCount igGetFrameCount;
	da_ImFontAtlas_AddFontFromMemoryTTF ImFontAtlas_AddFontFromMemoryTTF;
	da_igLogFinish igLogFinish;
	da_igTreeNodeStrStr igTreeNodeStrStr;
	da_igPopItemWidth igPopItemWidth;
	da_ImVec2_ImVec2Float ImVec2_ImVec2Float;
	da_igEndChildFrame igEndChildFrame;
	da_ImGuiStorage_BuildSortByKey ImGuiStorage_BuildSortByKey;
	da_ImDrawList_AddImage ImDrawList_AddImage;
	da_ImGuiStyle_ImGuiStyle ImGuiStyle_ImGuiStyle;
	da_igNewLine igNewLine;
	da_igColumns igColumns;
	da_igAlignTextToFramePadding igAlignTextToFramePadding;
	da_igGetWindowSize_nonUDT igGetWindowSize_nonUDT;
	da_ImFontGlyphRangesBuilder_AddRanges ImFontGlyphRangesBuilder_AddRanges;
	da_igPopID igPopID;
	da_igResetMouseDragDelta igResetMouseDragDelta;
	da_ImFontAtlas_GetGlyphRangesJapanese ImFontAtlas_GetGlyphRangesJapanese;
	da_ImDrawListSplitter_ImDrawListSplitter ImDrawListSplitter_ImDrawListSplitter;
	//da_ImVector_push_back ImVector_push_back;
	da_ImGuiStorage_GetBoolRef ImGuiStorage_GetBoolRef;
	da_igSetNextWindowContentSize igSetNextWindowContentSize;
	da_ImGuiPlatformIO_ImGuiPlatformIO ImGuiPlatformIO_ImGuiPlatformIO;
	da_igOpenPopup igOpenPopup;
	da_igGetMainViewport igGetMainViewport;
	//da_ImVector_empty ImVector_empty;
	da_ImFontAtlas_AddCustomRectFontGlyph ImFontAtlas_AddCustomRectFontGlyph;
	da_igShowAboutWindow igShowAboutWindow;
	da_igSetCursorPosX igSetCursorPosX;
	da_igBeginPopup igBeginPopup;
	da_ImGuiStorage_GetBool ImGuiStorage_GetBool;
	da_igInputText igInputText;
	da_igGetWindowViewport igGetWindowViewport;
	da_igValueBool igValueBool;
	da_igSetWindowPosStr igSetWindowPosStr;
	da_ImDrawList_AddRect ImDrawList_AddRect;
	da_ImDrawData_destroy ImDrawData_destroy;
	da_ImGuiStorage_GetIntRef ImGuiStorage_GetIntRef;
	da_igInputScalarN igInputScalarN;
	da_igListBoxFooter igListBoxFooter;
	da_ImGuiTextBuffer_append ImGuiTextBuffer_append;
	da_igIsWindowHovered igIsWindowHovered;
	//da_ImVector_swap ImVector_swap;
	da_igSliderInt igSliderInt;
	da_igGetItemRectMin_nonUDT igGetItemRectMin_nonUDT;
	da_igBeginTabBar igBeginTabBar;
	da_igPushStyleVarFloat igPushStyleVarFloat;
	da_ImGuiInputTextCallbackData_ImGuiInputTextCallbackData ImGuiInputTextCallbackData_ImGuiInputTextCallbackData;
	da_ImFontAtlasCustomRect_IsPacked ImFontAtlasCustomRect_IsPacked;
	da_igRadioButtonBool igRadioButtonBool;
	da_ImFont_AddGlyph ImFont_AddGlyph;
	da_igBeginPopupModal igBeginPopupModal;
	da_igBeginDragDropTarget igBeginDragDropTarget;
	da_ImFontAtlas_GetGlyphRangesDefault ImFontAtlas_GetGlyphRangesDefault;
	da_igPlotLinesFnPtr igPlotLinesFnPtr;
	da_ImFontGlyphRangesBuilder_GetBit ImFontGlyphRangesBuilder_GetBit;
	da_ImDrawList_AddCircleFilled ImDrawList_AddCircleFilled;
	da_ImFont_CalcTextSizeA_nonUDT ImFont_CalcTextSizeA_nonUDT;
	da_igSpacing igSpacing;
	da_ImDrawList_AddRectFilled ImDrawList_AddRectFilled;
	//da_ImVector__grow_capacity ImVector__grow_capacity;
	da_igPushIDInt igPushIDInt;
	da_igInputTextWithHint igInputTextWithHint;
	da_igGetColumnWidth igGetColumnWidth;
	da_ImGuiIO_AddInputCharacter ImGuiIO_AddInputCharacter;
	da_igIndent igIndent;
	da_igSetNextWindowViewport igSetNextWindowViewport;
	da_igGetScrollMaxX igGetScrollMaxX;
	da_igGetScrollMaxY igGetScrollMaxY;
	//da_ImVector_contains ImVector_contains;
	//da_ImVector_shrink ImVector_shrink;
	da_ImGuiStoragePair_destroy ImGuiStoragePair_destroy;
	da_ImFontAtlas_AddFontDefault ImFontAtlas_AddFontDefault;
	da_ImDrawList_CloneOutput ImDrawList_CloneOutput;
	da_igIsItemToggledOpen igIsItemToggledOpen;
	da_ImFont_SetGlyphVisible ImFont_SetGlyphVisible;
	da_ImDrawList_PathFillConvex ImDrawList_PathFillConvex;
	da_igCaptureKeyboardFromApp igCaptureKeyboardFromApp;
	da_ImGuiInputTextCallbackData_HasSelection ImGuiInputTextCallbackData_HasSelection;
	da_igInputInt3 igInputInt3;
	da_igSetClipboardText igSetClipboardText;
	da_ImFontGlyphRangesBuilder_BuildRanges ImFontGlyphRangesBuilder_BuildRanges;
	da_igGetStyleColorVec4 igGetStyleColorVec4;
	da_igSetAllocatorFunctions igSetAllocatorFunctions;
	da_igGetFrameHeightWithSpacing igGetFrameHeightWithSpacing;
	da_igInvisibleButton igInvisibleButton;
	da_igSetTabItemClosed igSetTabItemClosed;
	da_igGetDragDropPayload igGetDragDropPayload;
	da_igGetMousePos_nonUDT igGetMousePos_nonUDT;
	da_igGetWindowContentRegionWidth igGetWindowContentRegionWidth;
	da_igArrowButton igArrowButton;
	da_ImGuiInputTextCallbackData_destroy ImGuiInputTextCallbackData_destroy;
	da_ImGuiStorage_GetFloatRef ImGuiStorage_GetFloatRef;
	da_igSliderScalarN igSliderScalarN;
	da_ImDrawListSplitter_Clear ImDrawListSplitter_Clear;
	da_igTreeNodeStr igTreeNodeStr;
	da_igUpdatePlatformWindows igUpdatePlatformWindows;
	da_igTextDisabled igTextDisabled;
	da_igSetCurrentContext igSetCurrentContext;
	da_ImDrawList_AddQuad ImDrawList_AddQuad;
	da_ImGuiOnceUponAFrame_ImGuiOnceUponAFrame ImGuiOnceUponAFrame_ImGuiOnceUponAFrame;
	da_igCheckboxFlags igCheckboxFlags;
	da_igTextUnformatted igTextUnformatted;
	da_ImGuiIO_ImGuiIO ImGuiIO_ImGuiIO;
	da_igValueInt igValueInt;
	da_igIsItemClicked igIsItemClicked;
	da_igGetColorU32 igGetColorU32;
	//da_ImVector_push_front ImVector_push_front;
	da_ImDrawList_PathLineTo ImDrawList_PathLineTo;
	da_igSetNextItemWidth igSetNextItemWidth;
	da_igBeginGroup igBeginGroup;
	da_ImGuiTextBuffer_empty ImGuiTextBuffer_empty;
	da_ImDrawListSplitter_SetCurrentChannel ImDrawListSplitter_SetCurrentChannel;
	da_igSaveIniSettingsToMemory igSaveIniSettingsToMemory;
	da_ImFontAtlas_destroy ImFontAtlas_destroy;
	da_ImGuiTextBuffer_appendfv ImGuiTextBuffer_appendfv;
	da_ImFontAtlas_CalcCustomRectUV ImFontAtlas_CalcCustomRectUV;
	da_igEndDragDropSource igEndDragDropSource;
	da_ImGuiIO_destroy ImGuiIO_destroy;
	da_igIsItemDeactivatedAfterEdit igIsItemDeactivatedAfterEdit;
	da_igLabelText igLabelText;
	da_ImGuiTextFilter_IsActive ImGuiTextFilter_IsActive;
	da_ImGuiPlatformMonitor_ImGuiPlatformMonitor ImGuiPlatformMonitor_ImGuiPlatformMonitor;
	da_ImDrawList_UpdateClipRect ImDrawList_UpdateClipRect;
	da_igSetWindowPosVec2 igSetWindowPosVec2;
	da_ImFontAtlas_AddFontFromMemoryCompressedTTF ImFontAtlas_AddFontFromMemoryCompressedTTF;
	da_igTreeNodeExStrStr igTreeNodeExStrStr;
	da_ImDrawList_PushClipRect ImDrawList_PushClipRect;
	da_igSetStateStorage igSetStateStorage;
	da_igSetTooltip igSetTooltip;
	da_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon;
	da_igGetContentRegionAvail_nonUDT igGetContentRegionAvail_nonUDT;
	da_igLogToClipboard igLogToClipboard;
	da_igDragFloat2 igDragFloat2;
	da_igDragFloat3 igDragFloat3;
	da_igDragFloat4 igDragFloat4;
	da_ImDrawList_ClearFreeMemory ImDrawList_ClearFreeMemory;
	da_igBeginChildID igBeginChildID;
	da_ImDrawListSplitter_destroy ImDrawListSplitter_destroy;
	da_ImDrawList_AddNgonFilled ImDrawList_AddNgonFilled;
	da_igPlotHistogramFloatPtr igPlotHistogramFloatPtr;
	da_igGetIDPtr igGetIDPtr;
	da_igSetColumnOffset igSetColumnOffset;
	da_ImGuiStorage_SetBool ImGuiStorage_SetBool;
	da_igTreeNodeExPtr igTreeNodeExPtr;
	da_ImFontAtlasCustomRect_destroy ImFontAtlasCustomRect_destroy;
	da_ImGuiTextFilter_Clear ImGuiTextFilter_Clear;
	da_ImDrawList_AddQuadFilled ImDrawList_AddQuadFilled;
	da_ImVec2_destroy ImVec2_destroy;
	da_igSaveIniSettingsToDisk igSaveIniSettingsToDisk;
	da_igIsWindowDocked igIsWindowDocked;
	da_igSetNextWindowSize igSetNextWindowSize;
	da_igIsMousePosValid igIsMousePosValid;
	da_ImGuiTextRange_ImGuiTextRangeStr ImGuiTextRange_ImGuiTextRangeStr;
	//da_ImVector_end_const ImVector_end_const;
	da_ImGuiListClipper_End ImGuiListClipper_End;
	da_igFindViewportByPlatformHandle igFindViewportByPlatformHandle;
	da_ImFontAtlas_ClearFonts ImFontAtlas_ClearFonts;
	da_ImFont_SetFallbackChar ImFont_SetFallbackChar;
	da_igSetScrollY igSetScrollY;
	da_igSetScrollX igSetScrollX;
	da_ImColor_SetHSV ImColor_SetHSV;
	da_igGetContentRegionMax_nonUDT igGetContentRegionMax_nonUDT;
	da_igGetKeyIndex igGetKeyIndex;
	da_igBeginChildFrame igBeginChildFrame;
	da_igInputFloat3 igInputFloat3;
	da_igInputFloat2 igInputFloat2;
	da_ImFont_ClearOutputData ImFont_ClearOutputData;
	da_igPushIDPtr igPushIDPtr;
	da_ImFontAtlas_Clear ImFontAtlas_Clear;
	da_ImVec4_ImVec4 ImVec4_ImVec4;
	da_ImFontAtlas_Build ImFontAtlas_Build;
	da_igColorEdit3 igColorEdit3;
	da_ImGuiTextBuffer_reserve ImGuiTextBuffer_reserve;
	da_igColorEdit4 igColorEdit4;
	da_igInputInt igInputInt;
	da_igGetTime igGetTime;
	da_ImColor_ImColorVec4 ImColor_ImColorVec4;
	da_igSetNextWindowCollapsed igSetNextWindowCollapsed;
	da_ImDrawData_ScaleClipRects ImDrawData_ScaleClipRects;
	da_ImDrawList_PrimWriteVtx ImDrawList_PrimWriteVtx;
	da_ImGuiTextBuffer_size ImGuiTextBuffer_size;
	da_igSetScrollFromPosY igSetScrollFromPosY;
	da_ImFontAtlas_GetMouseCursorTexData ImFontAtlas_GetMouseCursorTexData;
	da_igInputInt2 igInputInt2;
	da_igSelectableBoolPtr igSelectableBoolPtr;
	da_igGetItemRectMax_nonUDT igGetItemRectMax_nonUDT;
	da_igDockSpaceOverViewport igDockSpaceOverViewport;
	da_igInputInt4 igInputInt4;
	da_igSetWindowFocus igSetWindowFocus;
	da_igImageButton igImageButton;
	da_igDestroyContext igDestroyContext;
	//da_ImVector_eraseTPtr ImVector_eraseTPtr;
	da_igGetIO igGetIO;
	da_igGetKeyPressedAmount igGetKeyPressedAmount;
	da_igUnindent igUnindent;
	da_igCollapsingHeaderBoolPtr igCollapsingHeaderBoolPtr;
	da_igLoadIniSettingsFromDisk igLoadIniSettingsFromDisk;
	da_igPlotLines igPlotLines;
	//da_ImVector_find ImVector_find;
	da_igNewFrame igNewFrame;
	da_igSliderScalar igSliderScalar;
	da_igIsKeyDown igIsKeyDown;
	da_ImDrawCmd_destroy ImDrawCmd_destroy;
	da_ImVec4_destroy ImVec4_destroy;
	da_igBulletTextV igBulletTextV;
	da_igPopClipRect igPopClipRect;
	da_ImDrawList_PrimWriteIdx ImDrawList_PrimWriteIdx;
	da_igIsMouseDown igIsMouseDown;
	da_igIsItemActivated igIsItemActivated;
	da_igShowStyleEditor igShowStyleEditor;
	da_igIsRectVisibleVec2 igIsRectVisibleVec2;
	da_ImDrawList_AddImageQuad ImDrawList_AddImageQuad;
	da_ImGuiViewport_GetWorkSize_nonUDT ImGuiViewport_GetWorkSize_nonUDT;
	da_igDragFloat igDragFloat;
	da_ImColor_ImColorInt ImColor_ImColorInt;
	da_igIsAnyItemFocused igIsAnyItemFocused;
	da_igCombo igCombo;
	//da_ImVector_begin_const ImVector_begin_const;
	da_igCreateContext igCreateContext;
	da_igGetTextLineHeight igGetTextLineHeight;
	da_igTextV igTextV;
	da_ImFont_GetCharAdvance ImFont_GetCharAdvance;
	da_ImGuiTextBuffer_appendf ImGuiTextBuffer_appendf;
	//da_ImVector_insert ImVector_insert;
	da_ImGuiListClipper_Step ImGuiListClipper_Step;
	da_ImFontAtlas_GetGlyphRangesThai ImFontAtlas_GetGlyphRangesThai;
	da_ImFont_FindGlyphNoFallback ImFont_FindGlyphNoFallback;
	da_igShowMetricsWindow igShowMetricsWindow;
	da_igVSliderInt igVSliderInt;
	da_ImDrawData_ImDrawData ImDrawData_ImDrawData;
	da_igGetMousePosOnOpeningCurrentPopup_nonUDT igGetMousePosOnOpeningCurrentPopup_nonUDT;
	da_igTreeNodeExVStr igTreeNodeExVStr;
	da_igGetStyle igGetStyle;
	da_igTreePop igTreePop;
	da_igGetFontSize igGetFontSize;
	da_igPopAllowKeyboardFocus igPopAllowKeyboardFocus;
	da_ImDrawList_AddDrawCmd ImDrawList_AddDrawCmd;
	da_igEnd igEnd;
	da_ImDrawList_AddTextFontPtr ImDrawList_AddTextFontPtr;
	da_ImColor_ImColorFloat ImColor_ImColorFloat;
	da_igSetMouseCursor igSetMouseCursor;
	da_igPushIDStr igPushIDStr;
	da_igGetCursorPos_nonUDT igGetCursorPos_nonUDT;
	da_igSetNextWindowDockID igSetNextWindowDockID;
	//da_ImVector_front_const ImVector_front_const;
	da_ImDrawList_PrimRectUV ImDrawList_PrimRectUV;
	da_ImGuiTextBuffer_c_str ImGuiTextBuffer_c_str;
	da_igIsWindowCollapsed igIsWindowCollapsed;
	da_igIsMouseReleased igIsMouseReleased;
	da_igInputFloat4 igInputFloat4;
	da_ImGuiTextFilter_PassFilter ImGuiTextFilter_PassFilter;
	da_igSetWindowSizeStr igSetWindowSizeStr;
	da_igSetItemAllowOverlap igSetItemAllowOverlap;
	da_igGetColumnIndex igGetColumnIndex;
	da_ImDrawList_PrimUnreserve ImDrawList_PrimUnreserve;
	da_igSliderAngle igSliderAngle;
	da_ImGuiStorage_Clear ImGuiStorage_Clear;
	da_igCalcTextSize_nonUDT igCalcTextSize_nonUDT;
	da_ImDrawList_PopTextureID ImDrawList_PopTextureID;
	da_igSameLine igSameLine;
	da_igPushButtonRepeat igPushButtonRepeat;
	da_igSetNextWindowSizeConstraints igSetNextWindowSizeConstraints;
	da_ImDrawList_ImDrawList ImDrawList_ImDrawList;
	da_ImGuiListClipper_ImGuiListClipper ImGuiListClipper_ImGuiListClipper;
	da_ImVec4_ImVec4Float ImVec4_ImVec4Float;
	da_ImDrawList_ChannelsSetCurrent ImDrawList_ChannelsSetCurrent;
	da_ImDrawCmd_ImDrawCmd ImDrawCmd_ImDrawCmd;
	da_igEndGroup igEndGroup;
	da_ImGuiPlatformMonitor_destroy ImGuiPlatformMonitor_destroy;
	da_igMenuItemBool igMenuItemBool;
	da_igBeginMenuBar igBeginMenuBar;
	da_igRenderPlatformWindowsDefault igRenderPlatformWindowsDefault;
	da_igCalcListClipping igCalcListClipping;
	da_ImGuiStorage_GetInt ImGuiStorage_GetInt;
}


private
{
    import engine.thirdparty.derelict.util.loader;

    version(darwin)
        version = MacOSX;
    version(OSX)
        version = MacOSX;
}

private
{
    import engine.thirdparty.derelict.util.loader;
    import engine.thirdparty.derelict.util.system;

    static if(Derelict_OS_Windows)
        enum libNames = "cimgui.dll";
    else static if (Derelict_OS_Mac)
        enum libNames = "cimgui.dylib";
    else static if (Derelict_OS_Linux)
        enum libNames = "cimgui.so";
    else
        static assert(0, "Need to implement imgui libNames for this operating system.");
}

final class DerelictImguiLoader : SharedLibLoader
{
    protected
    {
        override void loadSymbols()
        {
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder, "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder");
			bindFunc(cast(void**)&ImGuiPayload_destroy, "ImGuiPayload_destroy");
			bindFunc(cast(void**)&ImDrawList_AddCallback, "ImDrawList_AddCallback");
			bindFunc(cast(void**)&ImGuiTextRange_ImGuiTextRange, "ImGuiTextRange_ImGuiTextRange");
			bindFunc(cast(void**)&igIsItemHovered, "igIsItemHovered");
			bindFunc(cast(void**)&igSetCursorScreenPos, "igSetCursorScreenPos");
			bindFunc(cast(void**)&igSetCursorPos, "igSetCursorPos");
			bindFunc(cast(void**)&ImDrawList_PopClipRect, "ImDrawList_PopClipRect");
			bindFunc(cast(void**)&igBeginDragDropSource, "igBeginDragDropSource");
			bindFunc(cast(void**)&igTreeNodeExStr, "igTreeNodeExStr");
			bindFunc(cast(void**)&ImGuiStyle_ScaleAllSizes, "ImGuiStyle_ScaleAllSizes");
			bindFunc(cast(void**)&ImDrawList_ChannelsMerge, "ImDrawList_ChannelsMerge");
			bindFunc(cast(void**)&igPushIDRange, "igPushIDRange");
			//bindFunc(cast(void**)&ImVector_find_erase, "ImVector_find_erase");
			bindFunc(cast(void**)&igIsWindowAppearing, "igIsWindowAppearing");
			bindFunc(cast(void**)&ImFont_BuildLookupTable, "ImFont_BuildLookupTable");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesKorean, "ImFontAtlas_GetGlyphRangesKorean");
			//bindFunc(cast(void**)&ImVector_back, "ImVector_back");
			bindFunc(cast(void**)&igShowDemoWindow, "igShowDemoWindow");
			bindFunc(cast(void**)&ImDrawList_PathBezierCurveTo, "ImDrawList_PathBezierCurveTo");
			bindFunc(cast(void**)&igPushStyleVarVec2, "igPushStyleVarVec2");
			//bindFunc(cast(void**)&ImVector_clear, "ImVector_clear");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesChineseFull, "ImFontAtlas_GetGlyphRangesChineseFull");
			bindFunc(cast(void**)&igListBoxFnPtr, "igListBoxFnPtr");
			bindFunc(cast(void**)&igPushTextWrapPos, "igPushTextWrapPos");
			bindFunc(cast(void**)&igPopStyleColor, "igPopStyleColor");
			bindFunc(cast(void**)&ImDrawList_GetClipRectMax_nonUDT, "ImDrawList_GetClipRectMax_nonUDT");
			bindFunc(cast(void**)&igSetWindowFontScale, "igSetWindowFontScale");
			bindFunc(cast(void**)&ImFontAtlas_ClearInputData, "ImFontAtlas_ClearInputData");
			bindFunc(cast(void**)&igIsItemActive, "igIsItemActive");
			bindFunc(cast(void**)&igBeginMenu, "igBeginMenu");
			bindFunc(cast(void**)&igIsMouseClicked, "igIsMouseClicked");
			bindFunc(cast(void**)&igPlotHistogramFnPtr, "igPlotHistogramFnPtr");
			bindFunc(cast(void**)&igOpenPopupOnItemClick, "igOpenPopupOnItemClick");
			bindFunc(cast(void**)&ImDrawList_AddCircle, "ImDrawList_AddCircle");
			bindFunc(cast(void**)&ImFontAtlas_AddFontFromFileTTF, "ImFontAtlas_AddFontFromFileTTF");
			bindFunc(cast(void**)&igIsItemEdited, "igIsItemEdited");
			bindFunc(cast(void**)&igMemAlloc, "igMemAlloc");
			bindFunc(cast(void**)&igGetWindowPos_nonUDT, "igGetWindowPos_nonUDT");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_destroy, "ImFontGlyphRangesBuilder_destroy");
			bindFunc(cast(void**)&igSetTooltipV, "igSetTooltipV");
			bindFunc(cast(void**)&ImGuiStoragePair_ImGuiStoragePairFloat, "ImGuiStoragePair_ImGuiStoragePairFloat");
			bindFunc(cast(void**)&ImGuiTextBuffer_destroy, "ImGuiTextBuffer_destroy");
			bindFunc(cast(void**)&ImGuiListClipper_destroy, "ImGuiListClipper_destroy");
			//bindFunc(cast(void**)&ImVector_size, "ImVector_size");
			bindFunc(cast(void**)&ImDrawList_PathClear, "ImDrawList_PathClear");
			bindFunc(cast(void**)&ImDrawListSplitter_ClearFreeMemory, "ImDrawListSplitter_ClearFreeMemory");
			bindFunc(cast(void**)&ImDrawList_PathLineToMergeDuplicate, "ImDrawList_PathLineToMergeDuplicate");
			//bindFunc(cast(void**)&ImVector_end, "ImVector_end");
			bindFunc(cast(void**)&igShowUserGuide, "igShowUserGuide");
			//bindFunc(cast(void**)&ImVector_pop_back, "ImVector_pop_back");
			bindFunc(cast(void**)&igLabelTextV, "igLabelTextV");
			bindFunc(cast(void**)&ImDrawList_AddText, "ImDrawList_AddText");
			bindFunc(cast(void**)&igGetDrawListSharedData, "igGetDrawListSharedData");
			bindFunc(cast(void**)&ImDrawData_DeIndexAllBuffers, "ImDrawData_DeIndexAllBuffers");
			bindFunc(cast(void**)&igSetScrollHereY, "igSetScrollHereY");
			bindFunc(cast(void**)&igSetScrollHereX, "igSetScrollHereX");
			bindFunc(cast(void**)&igGetClipboardText, "igGetClipboardText");
			bindFunc(cast(void**)&igSetWindowFocusStr, "igSetWindowFocusStr");
			bindFunc(cast(void**)&igBeginMainMenuBar, "igBeginMainMenuBar");
			bindFunc(cast(void**)&ImGuiPayload_ImGuiPayload, "ImGuiPayload_ImGuiPayload");
			bindFunc(cast(void**)&ImDrawList_AddRectFilledMultiColor, "ImDrawList_AddRectFilledMultiColor");
			bindFunc(cast(void**)&igCheckbox, "igCheckbox");
			bindFunc(cast(void**)&igStyleColorsDark, "igStyleColorsDark");
			bindFunc(cast(void**)&ImFontConfig_ImFontConfig, "ImFontConfig_ImFontConfig");
			bindFunc(cast(void**)&igGetWindowDockID, "igGetWindowDockID");
			bindFunc(cast(void**)&ImGuiTextFilter_Draw, "ImGuiTextFilter_Draw");
			bindFunc(cast(void**)&igGetCurrentContext, "igGetCurrentContext");
			bindFunc(cast(void**)&ImGuiWindowClass_destroy, "ImGuiWindowClass_destroy");
			bindFunc(cast(void**)&ImDrawList_PrimQuadUV, "ImDrawList_PrimQuadUV");
			bindFunc(cast(void**)&ImGuiPayload_Clear, "ImGuiPayload_Clear");
			bindFunc(cast(void**)&igTextWrapped, "igTextWrapped");
			bindFunc(cast(void**)&ImGuiPayload_IsDataType, "ImGuiPayload_IsDataType");
			bindFunc(cast(void**)&ImDrawList_AddNgon, "ImDrawList_AddNgon");
			bindFunc(cast(void**)&igGetCursorStartPos_nonUDT, "igGetCursorStartPos_nonUDT");
			bindFunc(cast(void**)&igGetCursorScreenPos_nonUDT, "igGetCursorScreenPos_nonUDT");
			bindFunc(cast(void**)&igValueUint, "igValueUint");
			bindFunc(cast(void**)&ImFontAtlas_ClearTexData, "ImFontAtlas_ClearTexData");
			bindFunc(cast(void**)&igIsWindowFocused, "igIsWindowFocused");
			bindFunc(cast(void**)&igSetNextItemOpen, "igSetNextItemOpen");
			bindFunc(cast(void**)&igPushItemWidth, "igPushItemWidth");
			bindFunc(cast(void**)&igTreePushStr, "igTreePushStr");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_AddText, "ImFontGlyphRangesBuilder_AddText");
			bindFunc(cast(void**)&igSetScrollFromPosX, "igSetScrollFromPosX");
			//bindFunc(cast(void**)&ImVector_begin, "ImVector_begin");
			bindFunc(cast(void**)&igCalcItemWidth, "igCalcItemWidth");
			bindFunc(cast(void**)&igDragScalar, "igDragScalar");
			bindFunc(cast(void**)&ImFontAtlas_AddFontFromMemoryCompressedBase85TTF, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF");
			//bindFunc(cast(void**)&ImVector_back_const, "ImVector_back_const");
			bindFunc(cast(void**)&ImGuiTextRange_empty, "ImGuiTextRange_empty");
			bindFunc(cast(void**)&igStyleColorsClassic, "igStyleColorsClassic");
			bindFunc(cast(void**)&ImFont_GetDebugName, "ImFont_GetDebugName");
			bindFunc(cast(void**)&ImColor_HSV_nonUDT, "ImColor_HSV_nonUDT");
			bindFunc(cast(void**)&ImDrawList_PathStroke, "ImDrawList_PathStroke");
			bindFunc(cast(void**)&igTreeNodeVStr, "igTreeNodeVStr");
			bindFunc(cast(void**)&igValueFloat, "igValueFloat");
			bindFunc(cast(void**)&ImFont_IsLoaded, "ImFont_IsLoaded");
			bindFunc(cast(void**)&igGetTreeNodeToLabelSpacing, "igGetTreeNodeToLabelSpacing");
			bindFunc(cast(void**)&ImGuiViewport_GetWorkPos_nonUDT, "ImGuiViewport_GetWorkPos_nonUDT");
			bindFunc(cast(void**)&ImDrawList_UpdateTextureID, "ImDrawList_UpdateTextureID");
			bindFunc(cast(void**)&ImDrawList_PrimRect, "ImDrawList_PrimRect");
			bindFunc(cast(void**)&ImFont_GrowIndex, "ImFont_GrowIndex");
			bindFunc(cast(void**)&ImFont_ImFont, "ImFont_ImFont");
			bindFunc(cast(void**)&ImDrawList_AddPolyline, "ImDrawList_AddPolyline");
			bindFunc(cast(void**)&igGetWindowContentRegionMax_nonUDT, "igGetWindowContentRegionMax_nonUDT");
			bindFunc(cast(void**)&igNextColumn, "igNextColumn");
			bindFunc(cast(void**)&ImGuiStorage_SetInt, "ImGuiStorage_SetInt");
			bindFunc(cast(void**)&igListBoxStr_arr, "igListBoxStr_arr");
			bindFunc(cast(void**)&igGetBackgroundDrawList, "igGetBackgroundDrawList");
			bindFunc(cast(void**)&igDragFloatRange2, "igDragFloatRange2");
			bindFunc(cast(void**)&igAcceptDragDropPayload, "igAcceptDragDropPayload");
			bindFunc(cast(void**)&ImGuiOnceUponAFrame_destroy, "ImGuiOnceUponAFrame_destroy");
			bindFunc(cast(void**)&ImGuiTextBuffer_end, "ImGuiTextBuffer_end");
			bindFunc(cast(void**)&igBullet, "igBullet");
			bindFunc(cast(void**)&igBegin, "igBegin");
			bindFunc(cast(void**)&igShowStyleSelector, "igShowStyleSelector");
			//bindFunc(cast(void**)&ImVector_destroy, "ImVector_destroy");
			bindFunc(cast(void**)&igSetWindowCollapsedBool, "igSetWindowCollapsedBool");
			bindFunc(cast(void**)&igSliderFloat, "igSliderFloat");
			bindFunc(cast(void**)&igGetFontTexUvWhitePixel_nonUDT, "igGetFontTexUvWhitePixel_nonUDT");
			bindFunc(cast(void**)&igComboStr, "igComboStr");
			bindFunc(cast(void**)&igDestroyPlatformWindows, "igDestroyPlatformWindows");
			bindFunc(cast(void**)&igListBoxHeaderVec2, "igListBoxHeaderVec2");
			bindFunc(cast(void**)&ImColor_destroy, "ImColor_destroy");
			bindFunc(cast(void**)&igSetDragDropPayload, "igSetDragDropPayload");
			bindFunc(cast(void**)&ImGuiStorage_GetVoidPtrRef, "ImGuiStorage_GetVoidPtrRef");
			bindFunc(cast(void**)&igSetWindowSizeVec2, "igSetWindowSizeVec2");
			bindFunc(cast(void**)&igListBoxHeaderInt, "igListBoxHeaderInt");
			//bindFunc(cast(void**)&ImVector_capacity, "ImVector_capacity");
			bindFunc(cast(void**)&igLogToFile, "igLogToFile");
			bindFunc(cast(void**)&igBeginPopupContextWindow, "igBeginPopupContextWindow");
			bindFunc(cast(void**)&ImGuiViewport_destroy, "ImGuiViewport_destroy");
			bindFunc(cast(void**)&igInputFloat, "igInputFloat");
			bindFunc(cast(void**)&ImFont_CalcWordWrapPositionA, "ImFont_CalcWordWrapPositionA");
			bindFunc(cast(void**)&igShowFontSelector, "igShowFontSelector");
			bindFunc(cast(void**)&igMemFree, "igMemFree");
			bindFunc(cast(void**)&ImDrawData_Clear, "ImDrawData_Clear");
			bindFunc(cast(void**)&ImFontAtlas_AddCustomRectRegular, "ImFontAtlas_AddCustomRectRegular");
			bindFunc(cast(void**)&igGetWindowContentRegionMin_nonUDT, "igGetWindowContentRegionMin_nonUDT");
			bindFunc(cast(void**)&igColorButton, "igColorButton");
			bindFunc(cast(void**)&igGetForegroundDrawList, "igGetForegroundDrawList");
			bindFunc(cast(void**)&igIsMouseDoubleClicked, "igIsMouseDoubleClicked");
			bindFunc(cast(void**)&igSetNextWindowFocus, "igSetNextWindowFocus");
			bindFunc(cast(void**)&igIsKeyPressed, "igIsKeyPressed");
			bindFunc(cast(void**)&igInputScalar, "igInputScalar");
			bindFunc(cast(void**)&ImDrawList_AddImageRounded, "ImDrawList_AddImageRounded");
			bindFunc(cast(void**)&igGetFont, "igGetFont");
			bindFunc(cast(void**)&ImGuiStorage_SetVoidPtr, "ImGuiStorage_SetVoidPtr");
			bindFunc(cast(void**)&igIsPopupOpen, "igIsPopupOpen");
			bindFunc(cast(void**)&igSelectable, "igSelectable");
			bindFunc(cast(void**)&igGetPlatformIO, "igGetPlatformIO");
			bindFunc(cast(void**)&igEndTabBar, "igEndTabBar");
			bindFunc(cast(void**)&igPopButtonRepeat, "igPopButtonRepeat");
			bindFunc(cast(void**)&igEndMenuBar, "igEndMenuBar");
			bindFunc(cast(void**)&ImGuiTextFilter_Build, "ImGuiTextFilter_Build");
			bindFunc(cast(void**)&ImGuiStorage_SetFloat, "ImGuiStorage_SetFloat");
			bindFunc(cast(void**)&igIsItemDeactivated, "igIsItemDeactivated");
			bindFunc(cast(void**)&igDebugCheckVersionAndDataLayout, "igDebugCheckVersionAndDataLayout");
			bindFunc(cast(void**)&ImFont_RenderChar, "ImFont_RenderChar");
			bindFunc(cast(void**)&igBeginTabItem, "igBeginTabItem");
			bindFunc(cast(void**)&igDragInt, "igDragInt");
			bindFunc(cast(void**)&igIsAnyItemHovered, "igIsAnyItemHovered");
			bindFunc(cast(void**)&igLoadIniSettingsFromMemory, "igLoadIniSettingsFromMemory");
			bindFunc(cast(void**)&igEndMenu, "igEndMenu");
			bindFunc(cast(void**)&igEndFrame, "igEndFrame");
			bindFunc(cast(void**)&ImFontAtlas_GetTexDataAsAlpha8, "ImFontAtlas_GetTexDataAsAlpha8");
			bindFunc(cast(void**)&igBeginChild, "igBeginChild");
			bindFunc(cast(void**)&igPushAllowKeyboardFocus, "igPushAllowKeyboardFocus");
			bindFunc(cast(void**)&ImDrawList_destroy, "ImDrawList_destroy");
			bindFunc(cast(void**)&igSeparator, "igSeparator");
			bindFunc(cast(void**)&ImGuiTextBuffer_clear, "ImGuiTextBuffer_clear");
			bindFunc(cast(void**)&ImFont_destroy, "ImFont_destroy");
			bindFunc(cast(void**)&igSetItemDefaultFocus, "igSetItemDefaultFocus");
			bindFunc(cast(void**)&igTreePushPtr, "igTreePushPtr");
			bindFunc(cast(void**)&ImGuiWindowClass_ImGuiWindowClass, "ImGuiWindowClass_ImGuiWindowClass");
			bindFunc(cast(void**)&ImColor_ImColorU32, "ImColor_ImColorU32");
			bindFunc(cast(void**)&ImFontAtlas_GetTexDataAsRGBA32, "ImFontAtlas_GetTexDataAsRGBA32");
			bindFunc(cast(void**)&ImDrawList_PrimVtx, "ImDrawList_PrimVtx");
			bindFunc(cast(void**)&igIsItemVisible, "igIsItemVisible");
			bindFunc(cast(void**)&igGetItemRectSize_nonUDT, "igGetItemRectSize_nonUDT");
			bindFunc(cast(void**)&ImGuiTextRange_destroy, "ImGuiTextRange_destroy");
			bindFunc(cast(void**)&ImGuiPlatformIO_destroy, "ImGuiPlatformIO_destroy");
			bindFunc(cast(void**)&ImFont_RenderText, "ImFont_RenderText");
			bindFunc(cast(void**)&ImDrawList_AddTriangle, "ImDrawList_AddTriangle");
			bindFunc(cast(void**)&igBulletText, "igBulletText");
			bindFunc(cast(void**)&igCaptureMouseFromApp, "igCaptureMouseFromApp");
			bindFunc(cast(void**)&igRadioButtonIntPtr, "igRadioButtonIntPtr");
			bindFunc(cast(void**)&igBeginCombo, "igBeginCombo");
			bindFunc(cast(void**)&igPopTextWrapPos, "igPopTextWrapPos");
			//bindFunc(cast(void**)&ImVector_reserve, "ImVector_reserve");
			bindFunc(cast(void**)&igGetFrameHeight, "igGetFrameHeight");
			bindFunc(cast(void**)&igDragScalarN, "igDragScalarN");
			bindFunc(cast(void**)&igGetBackgroundDrawListViewportPtr, "igGetBackgroundDrawListViewportPtr");
			bindFunc(cast(void**)&ImGuiStyle_destroy, "ImGuiStyle_destroy");
			bindFunc(cast(void**)&igComboFnPtr, "igComboFnPtr");
			bindFunc(cast(void**)&igEndPopup, "igEndPopup");
			bindFunc(cast(void**)&igGetVersion, "igGetVersion");
			bindFunc(cast(void**)&igIsAnyItemActive, "igIsAnyItemActive");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_Clear, "ImFontGlyphRangesBuilder_Clear");
			bindFunc(cast(void**)&igTreeNodeExVPtr, "igTreeNodeExVPtr");
			bindFunc(cast(void**)&ImDrawList_AddLine, "ImDrawList_AddLine");
			bindFunc(cast(void**)&igSetKeyboardFocusHere, "igSetKeyboardFocusHere");
			bindFunc(cast(void**)&igEndTooltip, "igEndTooltip");
			bindFunc(cast(void**)&ImGuiTextFilter_destroy, "ImGuiTextFilter_destroy");
			bindFunc(cast(void**)&igBeginTooltip, "igBeginTooltip");
			bindFunc(cast(void**)&igSetColorEditOptions, "igSetColorEditOptions");
			bindFunc(cast(void**)&ImGuiTextBuffer_ImGuiTextBuffer, "ImGuiTextBuffer_ImGuiTextBuffer");
			bindFunc(cast(void**)&igGetMouseCursor, "igGetMouseCursor");
			bindFunc(cast(void**)&ImDrawList_PathArcToFast, "ImDrawList_PathArcToFast");
			bindFunc(cast(void**)&igSetNextWindowPos, "igSetNextWindowPos");
			bindFunc(cast(void**)&ImFontConfig_destroy, "ImFontConfig_destroy");
			bindFunc(cast(void**)&ImFontAtlas_ImFontAtlas, "ImFontAtlas_ImFontAtlas");
			bindFunc(cast(void**)&igEndMainMenuBar, "igEndMainMenuBar");
			//bindFunc(cast(void**)&ImVector_size_in_bytes, "ImVector_size_in_bytes");
			bindFunc(cast(void**)&igSmallButton, "igSmallButton");
			bindFunc(cast(void**)&igInputDouble, "igInputDouble");
			bindFunc(cast(void**)&igTextColored, "igTextColored");
			bindFunc(cast(void**)&igSetNextWindowBgAlpha, "igSetNextWindowBgAlpha");
			bindFunc(cast(void**)&ImDrawList_ChannelsSplit, "ImDrawList_ChannelsSplit");
			bindFunc(cast(void**)&igIsMouseDragging, "igIsMouseDragging");
			bindFunc(cast(void**)&igTextColoredV, "igTextColoredV");
			bindFunc(cast(void**)&igDockSpace, "igDockSpace");
			bindFunc(cast(void**)&igBeginPopupContextItem, "igBeginPopupContextItem");
			bindFunc(cast(void**)&igVSliderFloat, "igVSliderFloat");
			bindFunc(cast(void**)&igColorConvertRGBtoHSV, "igColorConvertRGBtoHSV");
			bindFunc(cast(void**)&ImColor_ImColor, "ImColor_ImColor");
			//bindFunc(cast(void**)&ImVector_ImVector, "ImVector_ImVector");
			bindFunc(cast(void**)&igIsKeyReleased, "igIsKeyReleased");
			bindFunc(cast(void**)&igText, "igText");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesCyrillic, "ImFontAtlas_GetGlyphRangesCyrillic");
			//bindFunc(cast(void**)&ImVector_front, "ImVector_front");
			bindFunc(cast(void**)&igImage, "igImage");
			bindFunc(cast(void**)&igGetColumnOffset, "igGetColumnOffset");
			bindFunc(cast(void**)&ImGuiIO_ClearInputCharacters, "ImGuiIO_ClearInputCharacters");
			bindFunc(cast(void**)&igCloseCurrentPopup, "igCloseCurrentPopup");
			bindFunc(cast(void**)&igPushStyleColorU32, "igPushStyleColorU32");
			bindFunc(cast(void**)&ImGuiTextBuffer_begin, "ImGuiTextBuffer_begin");
			bindFunc(cast(void**)&igColorPicker4, "igColorPicker4");
			bindFunc(cast(void**)&igColorPicker3, "igColorPicker3");
			bindFunc(cast(void**)&igPushFont, "igPushFont");
			bindFunc(cast(void**)&igEndDragDropTarget, "igEndDragDropTarget");
			bindFunc(cast(void**)&ImGuiTextRange_split, "ImGuiTextRange_split");
			bindFunc(cast(void**)&ImGuiTextFilter_ImGuiTextFilter, "ImGuiTextFilter_ImGuiTextFilter");
			bindFunc(cast(void**)&ImDrawList_PrimReserve, "ImDrawList_PrimReserve");
			bindFunc(cast(void**)&ImGuiPayload_IsPreview, "ImGuiPayload_IsPreview");
			bindFunc(cast(void**)&ImGuiStorage_SetAllInt, "ImGuiStorage_SetAllInt");
			bindFunc(cast(void**)&igGetScrollY, "igGetScrollY");
			bindFunc(cast(void**)&igGetScrollX, "igGetScrollX");
			bindFunc(cast(void**)&ImFontAtlas_AddFont, "ImFontAtlas_AddFont");
			bindFunc(cast(void**)&ImGuiStoragePair_ImGuiStoragePairPtr, "ImGuiStoragePair_ImGuiStoragePairPtr");
			bindFunc(cast(void**)&ImDrawList_Clear, "ImDrawList_Clear");
			bindFunc(cast(void**)&igLogText, "igLogText");
			bindFunc(cast(void**)&igInputTextMultiline, "igInputTextMultiline");
			bindFunc(cast(void**)&igLogButtons, "igLogButtons");
			bindFunc(cast(void**)&igDummy, "igDummy");
			bindFunc(cast(void**)&ImFont_FindGlyph, "ImFont_FindGlyph");
			bindFunc(cast(void**)&igTreeNodeVPtr, "igTreeNodeVPtr");
			//bindFunc(cast(void**)&ImVector_erase_unsorted, "ImVector_erase_unsorted");
			bindFunc(cast(void**)&igDragInt4, "igDragInt4");
			bindFunc(cast(void**)&igSetWindowCollapsedStr, "igSetWindowCollapsedStr");
			bindFunc(cast(void**)&igGetWindowDrawList, "igGetWindowDrawList");
			bindFunc(cast(void**)&igDragInt3, "igDragInt3");
			bindFunc(cast(void**)&igDragInt2, "igDragInt2");
			bindFunc(cast(void**)&ImFontAtlas_IsBuilt, "ImFontAtlas_IsBuilt");
			bindFunc(cast(void**)&igDragIntRange2, "igDragIntRange2");
			//bindFunc(cast(void**)&ImVector_ImVectorVector, "ImVector_ImVectorVector");
			bindFunc(cast(void**)&ImGuiPayload_IsDelivery, "ImGuiPayload_IsDelivery");
			bindFunc(cast(void**)&igProgressBar, "igProgressBar");
			bindFunc(cast(void**)&igSetCursorPosY, "igSetCursorPosY");
			bindFunc(cast(void**)&igSliderFloat4, "igSliderFloat4");
			bindFunc(cast(void**)&igSliderFloat3, "igSliderFloat3");
			bindFunc(cast(void**)&igSliderFloat2, "igSliderFloat2");
			bindFunc(cast(void**)&ImFont_AddRemapChar, "ImFont_AddRemapChar");
			bindFunc(cast(void**)&igGetForegroundDrawListViewportPtr, "igGetForegroundDrawListViewportPtr");
			bindFunc(cast(void**)&igTextDisabledV, "igTextDisabledV");
			bindFunc(cast(void**)&igSetColumnWidth, "igSetColumnWidth");
			bindFunc(cast(void**)&igStyleColorsLight, "igStyleColorsLight");
			bindFunc(cast(void**)&igColorConvertFloat4ToU32, "igColorConvertFloat4ToU32");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesVietnamese, "ImFontAtlas_GetGlyphRangesVietnamese");
			bindFunc(cast(void**)&igVSliderScalar, "igVSliderScalar");
			//bindFunc(cast(void**)&ImVector_find_const, "ImVector_find_const");
			//bindFunc(cast(void**)&ImVector_find_erase_unsorted, "ImVector_find_erase_unsorted");
			bindFunc(cast(void**)&igGetWindowDpiScale, "igGetWindowDpiScale");
			bindFunc(cast(void**)&igGetCursorPosY, "igGetCursorPosY");
			bindFunc(cast(void**)&igGetCursorPosX, "igGetCursorPosX");
			bindFunc(cast(void**)&igGetStateStorage, "igGetStateStorage");
			bindFunc(cast(void**)&igGetWindowHeight, "igGetWindowHeight");
			bindFunc(cast(void**)&ImGuiIO_AddInputCharactersUTF8, "ImGuiIO_AddInputCharactersUTF8");
			bindFunc(cast(void**)&igEndTabItem, "igEndTabItem");
			bindFunc(cast(void**)&igGetStyleColorName, "igGetStyleColorName");
			bindFunc(cast(void**)&igMenuItemBoolPtr, "igMenuItemBoolPtr");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_SetBit, "ImFontGlyphRangesBuilder_SetBit");
			bindFunc(cast(void**)&ImDrawList_AddBezierCurve, "ImDrawList_AddBezierCurve");
			bindFunc(cast(void**)&ImDrawList_PathArcTo, "ImDrawList_PathArcTo");
			bindFunc(cast(void**)&igGetMouseDragDelta_nonUDT, "igGetMouseDragDelta_nonUDT");
			bindFunc(cast(void**)&igEndCombo, "igEndCombo");
			bindFunc(cast(void**)&ImGuiStorage_GetVoidPtr, "ImGuiStorage_GetVoidPtr");
			bindFunc(cast(void**)&igPushClipRect, "igPushClipRect");
			bindFunc(cast(void**)&igTreeNodePtr, "igTreeNodePtr");
			bindFunc(cast(void**)&ImDrawList_PushTextureID, "ImDrawList_PushTextureID");
			bindFunc(cast(void**)&igButton, "igButton");
			bindFunc(cast(void**)&igIsItemFocused, "igIsItemFocused");
			//bindFunc(cast(void**)&ImVector_resizeT, "ImVector_resizeT");
			bindFunc(cast(void**)&ImDrawList_GetClipRectMin_nonUDT, "ImDrawList_GetClipRectMin_nonUDT");
			bindFunc(cast(void**)&ImDrawListSplitter_Split, "ImDrawListSplitter_Split");
			bindFunc(cast(void**)&ImGuiStoragePair_ImGuiStoragePairInt, "ImGuiStoragePair_ImGuiStoragePairInt");
			bindFunc(cast(void**)&igGetIDRange, "igGetIDRange");
			bindFunc(cast(void**)&igGetDrawData, "igGetDrawData");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_AddChar, "ImFontGlyphRangesBuilder_AddChar");
			bindFunc(cast(void**)&igFindViewportByID, "igFindViewportByID");
			bindFunc(cast(void**)&igIsRectVisible, "igIsRectVisible");
			bindFunc(cast(void**)&igPopStyleVar, "igPopStyleVar");
			bindFunc(cast(void**)&ImFontAtlas_SetTexID, "ImFontAtlas_SetTexID");
			bindFunc(cast(void**)&ImGuiInputTextCallbackData_DeleteChars, "ImGuiInputTextCallbackData_DeleteChars");
			bindFunc(cast(void**)&igGetWindowWidth, "igGetWindowWidth");
			bindFunc(cast(void**)&igIsMouseHoveringRect, "igIsMouseHoveringRect");
			bindFunc(cast(void**)&igGetColorU32U32, "igGetColorU32U32");
			bindFunc(cast(void**)&igIsAnyMouseDown, "igIsAnyMouseDown");
			bindFunc(cast(void**)&ImGuiStorage_GetFloat, "ImGuiStorage_GetFloat");
			bindFunc(cast(void**)&ImFontAtlasCustomRect_ImFontAtlasCustomRect, "ImFontAtlasCustomRect_ImFontAtlasCustomRect");
			bindFunc(cast(void**)&igColorConvertHSVtoRGB, "igColorConvertHSVtoRGB");
			bindFunc(cast(void**)&igTextWrappedV, "igTextWrappedV");
			bindFunc(cast(void**)&igSliderInt4, "igSliderInt4");
			bindFunc(cast(void**)&ImDrawList_PathRect, "ImDrawList_PathRect");
			bindFunc(cast(void**)&igSliderInt2, "igSliderInt2");
			bindFunc(cast(void**)&igSliderInt3, "igSliderInt3");
			bindFunc(cast(void**)&igCollapsingHeader, "igCollapsingHeader");
			bindFunc(cast(void**)&ImGuiInputTextCallbackData_InsertChars, "ImGuiInputTextCallbackData_InsertChars");
			bindFunc(cast(void**)&igEndChild, "igEndChild");
			bindFunc(cast(void**)&igGetTextLineHeightWithSpacing, "igGetTextLineHeightWithSpacing");
			bindFunc(cast(void**)&igGetColumnsCount, "igGetColumnsCount");
			bindFunc(cast(void**)&ImDrawList_AddConvexPolyFilled, "ImDrawList_AddConvexPolyFilled");
			bindFunc(cast(void**)&ImDrawListSplitter_Merge, "ImDrawListSplitter_Merge");
			bindFunc(cast(void**)&igColorConvertU32ToFloat4_nonUDT, "igColorConvertU32ToFloat4_nonUDT");
			//bindFunc(cast(void**)&ImVector_resize, "ImVector_resize");
			bindFunc(cast(void**)&ImVec2_ImVec2, "ImVec2_ImVec2");
			//bindFunc(cast(void**)&ImVector_index_from_ptr, "ImVector_index_from_ptr");
			bindFunc(cast(void**)&ImGuiViewport_ImGuiViewport, "ImGuiViewport_ImGuiViewport");
			bindFunc(cast(void**)&igLogToTTY, "igLogToTTY");
			bindFunc(cast(void**)&igSetNextWindowClass, "igSetNextWindowClass");
			bindFunc(cast(void**)&ImGuiListClipper_Begin, "ImGuiListClipper_Begin");
			bindFunc(cast(void**)&igPopFont, "igPopFont");
			bindFunc(cast(void**)&ImFontAtlas_GetCustomRectByIndex, "ImFontAtlas_GetCustomRectByIndex");
			bindFunc(cast(void**)&igGetIDStr, "igGetIDStr");
			bindFunc(cast(void**)&igRender, "igRender");
			//bindFunc(cast(void**)&ImVector_erase, "ImVector_erase");
			bindFunc(cast(void**)&igPushStyleColor, "igPushStyleColor");
			bindFunc(cast(void**)&ImDrawList_AddTriangleFilled, "ImDrawList_AddTriangleFilled");
			bindFunc(cast(void**)&ImDrawList_PushClipRectFullScreen, "ImDrawList_PushClipRectFullScreen");
			bindFunc(cast(void**)&igGetColorU32Vec4, "igGetColorU32Vec4");
			bindFunc(cast(void**)&igBeginPopupContextVoid, "igBeginPopupContextVoid");
			bindFunc(cast(void**)&igGetFrameCount, "igGetFrameCount");
			bindFunc(cast(void**)&ImFontAtlas_AddFontFromMemoryTTF, "ImFontAtlas_AddFontFromMemoryTTF");
			bindFunc(cast(void**)&igLogFinish, "igLogFinish");
			bindFunc(cast(void**)&igTreeNodeStrStr, "igTreeNodeStrStr");
			bindFunc(cast(void**)&igPopItemWidth, "igPopItemWidth");
			bindFunc(cast(void**)&ImVec2_ImVec2Float, "ImVec2_ImVec2Float");
			bindFunc(cast(void**)&igEndChildFrame, "igEndChildFrame");
			bindFunc(cast(void**)&ImGuiStorage_BuildSortByKey, "ImGuiStorage_BuildSortByKey");
			bindFunc(cast(void**)&ImDrawList_AddImage, "ImDrawList_AddImage");
			bindFunc(cast(void**)&ImGuiStyle_ImGuiStyle, "ImGuiStyle_ImGuiStyle");
			bindFunc(cast(void**)&igNewLine, "igNewLine");
			bindFunc(cast(void**)&igColumns, "igColumns");
			bindFunc(cast(void**)&igAlignTextToFramePadding, "igAlignTextToFramePadding");
			bindFunc(cast(void**)&igGetWindowSize_nonUDT, "igGetWindowSize_nonUDT");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_AddRanges, "ImFontGlyphRangesBuilder_AddRanges");
			bindFunc(cast(void**)&igPopID, "igPopID");
			bindFunc(cast(void**)&igResetMouseDragDelta, "igResetMouseDragDelta");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesJapanese, "ImFontAtlas_GetGlyphRangesJapanese");
			bindFunc(cast(void**)&ImDrawListSplitter_ImDrawListSplitter, "ImDrawListSplitter_ImDrawListSplitter");
			//bindFunc(cast(void**)&ImVector_push_back, "ImVector_push_back");
			bindFunc(cast(void**)&ImGuiStorage_GetBoolRef, "ImGuiStorage_GetBoolRef");
			bindFunc(cast(void**)&igSetNextWindowContentSize, "igSetNextWindowContentSize");
			bindFunc(cast(void**)&ImGuiPlatformIO_ImGuiPlatformIO, "ImGuiPlatformIO_ImGuiPlatformIO");
			bindFunc(cast(void**)&igOpenPopup, "igOpenPopup");
			bindFunc(cast(void**)&igGetMainViewport, "igGetMainViewport");
			//bindFunc(cast(void**)&ImVector_empty, "ImVector_empty");
			bindFunc(cast(void**)&ImFontAtlas_AddCustomRectFontGlyph, "ImFontAtlas_AddCustomRectFontGlyph");
			bindFunc(cast(void**)&igShowAboutWindow, "igShowAboutWindow");
			bindFunc(cast(void**)&igSetCursorPosX, "igSetCursorPosX");
			bindFunc(cast(void**)&igBeginPopup, "igBeginPopup");
			bindFunc(cast(void**)&ImGuiStorage_GetBool, "ImGuiStorage_GetBool");
			bindFunc(cast(void**)&igInputText, "igInputText");
			bindFunc(cast(void**)&igGetWindowViewport, "igGetWindowViewport");
			bindFunc(cast(void**)&igValueBool, "igValueBool");
			bindFunc(cast(void**)&igSetWindowPosStr, "igSetWindowPosStr");
			bindFunc(cast(void**)&ImDrawList_AddRect, "ImDrawList_AddRect");
			bindFunc(cast(void**)&ImDrawData_destroy, "ImDrawData_destroy");
			bindFunc(cast(void**)&ImGuiStorage_GetIntRef, "ImGuiStorage_GetIntRef");
			bindFunc(cast(void**)&igInputScalarN, "igInputScalarN");
			bindFunc(cast(void**)&igListBoxFooter, "igListBoxFooter");
			bindFunc(cast(void**)&ImGuiTextBuffer_append, "ImGuiTextBuffer_append");
			bindFunc(cast(void**)&igIsWindowHovered, "igIsWindowHovered");
			//bindFunc(cast(void**)&ImVector_swap, "ImVector_swap");
			bindFunc(cast(void**)&igSliderInt, "igSliderInt");
			bindFunc(cast(void**)&igGetItemRectMin_nonUDT, "igGetItemRectMin_nonUDT");
			bindFunc(cast(void**)&igBeginTabBar, "igBeginTabBar");
			bindFunc(cast(void**)&igPushStyleVarFloat, "igPushStyleVarFloat");
			bindFunc(cast(void**)&ImGuiInputTextCallbackData_ImGuiInputTextCallbackData, "ImGuiInputTextCallbackData_ImGuiInputTextCallbackData");
			bindFunc(cast(void**)&ImFontAtlasCustomRect_IsPacked, "ImFontAtlasCustomRect_IsPacked");
			bindFunc(cast(void**)&igRadioButtonBool, "igRadioButtonBool");
			bindFunc(cast(void**)&ImFont_AddGlyph, "ImFont_AddGlyph");
			bindFunc(cast(void**)&igBeginPopupModal, "igBeginPopupModal");
			bindFunc(cast(void**)&igBeginDragDropTarget, "igBeginDragDropTarget");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesDefault, "ImFontAtlas_GetGlyphRangesDefault");
			bindFunc(cast(void**)&igPlotLinesFnPtr, "igPlotLinesFnPtr");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_GetBit, "ImFontGlyphRangesBuilder_GetBit");
			bindFunc(cast(void**)&ImDrawList_AddCircleFilled, "ImDrawList_AddCircleFilled");
			bindFunc(cast(void**)&ImFont_CalcTextSizeA_nonUDT, "ImFont_CalcTextSizeA_nonUDT");
			bindFunc(cast(void**)&igSpacing, "igSpacing");
			bindFunc(cast(void**)&ImDrawList_AddRectFilled, "ImDrawList_AddRectFilled");
			//bindFunc(cast(void**)&ImVector__grow_capacity, "ImVector__grow_capacity");
			bindFunc(cast(void**)&igPushIDInt, "igPushIDInt");
			bindFunc(cast(void**)&igInputTextWithHint, "igInputTextWithHint");
			bindFunc(cast(void**)&igGetColumnWidth, "igGetColumnWidth");
			bindFunc(cast(void**)&ImGuiIO_AddInputCharacter, "ImGuiIO_AddInputCharacter");
			bindFunc(cast(void**)&igIndent, "igIndent");
			bindFunc(cast(void**)&igSetNextWindowViewport, "igSetNextWindowViewport");
			bindFunc(cast(void**)&igGetScrollMaxX, "igGetScrollMaxX");
			bindFunc(cast(void**)&igGetScrollMaxY, "igGetScrollMaxY");
			//bindFunc(cast(void**)&ImVector_contains, "ImVector_contains");
			//bindFunc(cast(void**)&ImVector_shrink, "ImVector_shrink");
			bindFunc(cast(void**)&ImGuiStoragePair_destroy, "ImGuiStoragePair_destroy");
			bindFunc(cast(void**)&ImFontAtlas_AddFontDefault, "ImFontAtlas_AddFontDefault");
			bindFunc(cast(void**)&ImDrawList_CloneOutput, "ImDrawList_CloneOutput");
			bindFunc(cast(void**)&igIsItemToggledOpen, "igIsItemToggledOpen");
			bindFunc(cast(void**)&ImFont_SetGlyphVisible, "ImFont_SetGlyphVisible");
			bindFunc(cast(void**)&ImDrawList_PathFillConvex, "ImDrawList_PathFillConvex");
			bindFunc(cast(void**)&igCaptureKeyboardFromApp, "igCaptureKeyboardFromApp");
			bindFunc(cast(void**)&ImGuiInputTextCallbackData_HasSelection, "ImGuiInputTextCallbackData_HasSelection");
			bindFunc(cast(void**)&igInputInt3, "igInputInt3");
			bindFunc(cast(void**)&igSetClipboardText, "igSetClipboardText");
			bindFunc(cast(void**)&ImFontGlyphRangesBuilder_BuildRanges, "ImFontGlyphRangesBuilder_BuildRanges");
			bindFunc(cast(void**)&igGetStyleColorVec4, "igGetStyleColorVec4");
			bindFunc(cast(void**)&igSetAllocatorFunctions, "igSetAllocatorFunctions");
			bindFunc(cast(void**)&igGetFrameHeightWithSpacing, "igGetFrameHeightWithSpacing");
			bindFunc(cast(void**)&igInvisibleButton, "igInvisibleButton");
			bindFunc(cast(void**)&igSetTabItemClosed, "igSetTabItemClosed");
			bindFunc(cast(void**)&igGetDragDropPayload, "igGetDragDropPayload");
			bindFunc(cast(void**)&igGetMousePos_nonUDT, "igGetMousePos_nonUDT");
			bindFunc(cast(void**)&igGetWindowContentRegionWidth, "igGetWindowContentRegionWidth");
			bindFunc(cast(void**)&igArrowButton, "igArrowButton");
			bindFunc(cast(void**)&ImGuiInputTextCallbackData_destroy, "ImGuiInputTextCallbackData_destroy");
			bindFunc(cast(void**)&ImGuiStorage_GetFloatRef, "ImGuiStorage_GetFloatRef");
			bindFunc(cast(void**)&igSliderScalarN, "igSliderScalarN");
			bindFunc(cast(void**)&ImDrawListSplitter_Clear, "ImDrawListSplitter_Clear");
			bindFunc(cast(void**)&igTreeNodeStr, "igTreeNodeStr");
			bindFunc(cast(void**)&igUpdatePlatformWindows, "igUpdatePlatformWindows");
			bindFunc(cast(void**)&igTextDisabled, "igTextDisabled");
			bindFunc(cast(void**)&igSetCurrentContext, "igSetCurrentContext");
			bindFunc(cast(void**)&ImDrawList_AddQuad, "ImDrawList_AddQuad");
			bindFunc(cast(void**)&ImGuiOnceUponAFrame_ImGuiOnceUponAFrame, "ImGuiOnceUponAFrame_ImGuiOnceUponAFrame");
			bindFunc(cast(void**)&igCheckboxFlags, "igCheckboxFlags");
			bindFunc(cast(void**)&igTextUnformatted, "igTextUnformatted");
			bindFunc(cast(void**)&ImGuiIO_ImGuiIO, "ImGuiIO_ImGuiIO");
			bindFunc(cast(void**)&igValueInt, "igValueInt");
			bindFunc(cast(void**)&igIsItemClicked, "igIsItemClicked");
			bindFunc(cast(void**)&igGetColorU32, "igGetColorU32");
			//bindFunc(cast(void**)&ImVector_push_front, "ImVector_push_front");
			bindFunc(cast(void**)&ImDrawList_PathLineTo, "ImDrawList_PathLineTo");
			bindFunc(cast(void**)&igSetNextItemWidth, "igSetNextItemWidth");
			bindFunc(cast(void**)&igBeginGroup, "igBeginGroup");
			bindFunc(cast(void**)&ImGuiTextBuffer_empty, "ImGuiTextBuffer_empty");
			bindFunc(cast(void**)&ImDrawListSplitter_SetCurrentChannel, "ImDrawListSplitter_SetCurrentChannel");
			bindFunc(cast(void**)&igSaveIniSettingsToMemory, "igSaveIniSettingsToMemory");
			bindFunc(cast(void**)&ImFontAtlas_destroy, "ImFontAtlas_destroy");
			bindFunc(cast(void**)&ImGuiTextBuffer_appendfv, "ImGuiTextBuffer_appendfv");
			bindFunc(cast(void**)&ImFontAtlas_CalcCustomRectUV, "ImFontAtlas_CalcCustomRectUV");
			bindFunc(cast(void**)&igEndDragDropSource, "igEndDragDropSource");
			bindFunc(cast(void**)&ImGuiIO_destroy, "ImGuiIO_destroy");
			bindFunc(cast(void**)&igIsItemDeactivatedAfterEdit, "igIsItemDeactivatedAfterEdit");
			bindFunc(cast(void**)&igLabelText, "igLabelText");
			bindFunc(cast(void**)&ImGuiTextFilter_IsActive, "ImGuiTextFilter_IsActive");
			bindFunc(cast(void**)&ImGuiPlatformMonitor_ImGuiPlatformMonitor, "ImGuiPlatformMonitor_ImGuiPlatformMonitor");
			bindFunc(cast(void**)&ImDrawList_UpdateClipRect, "ImDrawList_UpdateClipRect");
			bindFunc(cast(void**)&igSetWindowPosVec2, "igSetWindowPosVec2");
			bindFunc(cast(void**)&ImFontAtlas_AddFontFromMemoryCompressedTTF, "ImFontAtlas_AddFontFromMemoryCompressedTTF");
			bindFunc(cast(void**)&igTreeNodeExStrStr, "igTreeNodeExStrStr");
			bindFunc(cast(void**)&ImDrawList_PushClipRect, "ImDrawList_PushClipRect");
			bindFunc(cast(void**)&igSetStateStorage, "igSetStateStorage");
			bindFunc(cast(void**)&igSetTooltip, "igSetTooltip");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon");
			bindFunc(cast(void**)&igGetContentRegionAvail_nonUDT, "igGetContentRegionAvail_nonUDT");
			bindFunc(cast(void**)&igLogToClipboard, "igLogToClipboard");
			bindFunc(cast(void**)&igDragFloat2, "igDragFloat2");
			bindFunc(cast(void**)&igDragFloat3, "igDragFloat3");
			bindFunc(cast(void**)&igDragFloat4, "igDragFloat4");
			bindFunc(cast(void**)&ImDrawList_ClearFreeMemory, "ImDrawList_ClearFreeMemory");
			bindFunc(cast(void**)&igBeginChildID, "igBeginChildID");
			bindFunc(cast(void**)&ImDrawListSplitter_destroy, "ImDrawListSplitter_destroy");
			bindFunc(cast(void**)&ImDrawList_AddNgonFilled, "ImDrawList_AddNgonFilled");
			bindFunc(cast(void**)&igPlotHistogramFloatPtr, "igPlotHistogramFloatPtr");
			bindFunc(cast(void**)&igGetIDPtr, "igGetIDPtr");
			bindFunc(cast(void**)&igSetColumnOffset, "igSetColumnOffset");
			bindFunc(cast(void**)&ImGuiStorage_SetBool, "ImGuiStorage_SetBool");
			bindFunc(cast(void**)&igTreeNodeExPtr, "igTreeNodeExPtr");
			bindFunc(cast(void**)&ImFontAtlasCustomRect_destroy, "ImFontAtlasCustomRect_destroy");
			bindFunc(cast(void**)&ImGuiTextFilter_Clear, "ImGuiTextFilter_Clear");
			bindFunc(cast(void**)&ImDrawList_AddQuadFilled, "ImDrawList_AddQuadFilled");
			bindFunc(cast(void**)&ImVec2_destroy, "ImVec2_destroy");
			bindFunc(cast(void**)&igSaveIniSettingsToDisk, "igSaveIniSettingsToDisk");
			bindFunc(cast(void**)&igIsWindowDocked, "igIsWindowDocked");
			bindFunc(cast(void**)&igSetNextWindowSize, "igSetNextWindowSize");
			bindFunc(cast(void**)&igIsMousePosValid, "igIsMousePosValid");
			bindFunc(cast(void**)&ImGuiTextRange_ImGuiTextRangeStr, "ImGuiTextRange_ImGuiTextRangeStr");
			//bindFunc(cast(void**)&ImVector_end_const, "ImVector_end_const");
			bindFunc(cast(void**)&ImGuiListClipper_End, "ImGuiListClipper_End");
			bindFunc(cast(void**)&igFindViewportByPlatformHandle, "igFindViewportByPlatformHandle");
			bindFunc(cast(void**)&ImFontAtlas_ClearFonts, "ImFontAtlas_ClearFonts");
			bindFunc(cast(void**)&ImFont_SetFallbackChar, "ImFont_SetFallbackChar");
			bindFunc(cast(void**)&igSetScrollY, "igSetScrollY");
			bindFunc(cast(void**)&igSetScrollX, "igSetScrollX");
			bindFunc(cast(void**)&ImColor_SetHSV, "ImColor_SetHSV");
			bindFunc(cast(void**)&igGetContentRegionMax_nonUDT, "igGetContentRegionMax_nonUDT");
			bindFunc(cast(void**)&igGetKeyIndex, "igGetKeyIndex");
			bindFunc(cast(void**)&igBeginChildFrame, "igBeginChildFrame");
			bindFunc(cast(void**)&igInputFloat3, "igInputFloat3");
			bindFunc(cast(void**)&igInputFloat2, "igInputFloat2");
			bindFunc(cast(void**)&ImFont_ClearOutputData, "ImFont_ClearOutputData");
			bindFunc(cast(void**)&igPushIDPtr, "igPushIDPtr");
			bindFunc(cast(void**)&ImFontAtlas_Clear, "ImFontAtlas_Clear");
			bindFunc(cast(void**)&ImVec4_ImVec4, "ImVec4_ImVec4");
			bindFunc(cast(void**)&ImFontAtlas_Build, "ImFontAtlas_Build");
			bindFunc(cast(void**)&igColorEdit3, "igColorEdit3");
			bindFunc(cast(void**)&ImGuiTextBuffer_reserve, "ImGuiTextBuffer_reserve");
			bindFunc(cast(void**)&igColorEdit4, "igColorEdit4");
			bindFunc(cast(void**)&igInputInt, "igInputInt");
			bindFunc(cast(void**)&igGetTime, "igGetTime");
			bindFunc(cast(void**)&ImColor_ImColorVec4, "ImColor_ImColorVec4");
			bindFunc(cast(void**)&igSetNextWindowCollapsed, "igSetNextWindowCollapsed");
			bindFunc(cast(void**)&ImDrawData_ScaleClipRects, "ImDrawData_ScaleClipRects");
			bindFunc(cast(void**)&ImDrawList_PrimWriteVtx, "ImDrawList_PrimWriteVtx");
			bindFunc(cast(void**)&ImGuiTextBuffer_size, "ImGuiTextBuffer_size");
			bindFunc(cast(void**)&igSetScrollFromPosY, "igSetScrollFromPosY");
			bindFunc(cast(void**)&ImFontAtlas_GetMouseCursorTexData, "ImFontAtlas_GetMouseCursorTexData");
			bindFunc(cast(void**)&igInputInt2, "igInputInt2");
			bindFunc(cast(void**)&igSelectableBoolPtr, "igSelectableBoolPtr");
			bindFunc(cast(void**)&igGetItemRectMax_nonUDT, "igGetItemRectMax_nonUDT");
			bindFunc(cast(void**)&igDockSpaceOverViewport, "igDockSpaceOverViewport");
			bindFunc(cast(void**)&igInputInt4, "igInputInt4");
			bindFunc(cast(void**)&igSetWindowFocus, "igSetWindowFocus");
			bindFunc(cast(void**)&igImageButton, "igImageButton");
			bindFunc(cast(void**)&igDestroyContext, "igDestroyContext");
			//bindFunc(cast(void**)&ImVector_eraseTPtr, "ImVector_eraseTPtr");
			bindFunc(cast(void**)&igGetIO, "igGetIO");
			bindFunc(cast(void**)&igGetKeyPressedAmount, "igGetKeyPressedAmount");
			bindFunc(cast(void**)&igUnindent, "igUnindent");
			bindFunc(cast(void**)&igCollapsingHeaderBoolPtr, "igCollapsingHeaderBoolPtr");
			bindFunc(cast(void**)&igLoadIniSettingsFromDisk, "igLoadIniSettingsFromDisk");
			bindFunc(cast(void**)&igPlotLines, "igPlotLines");
			//bindFunc(cast(void**)&ImVector_find, "ImVector_find");
			bindFunc(cast(void**)&igNewFrame, "igNewFrame");
			bindFunc(cast(void**)&igSliderScalar, "igSliderScalar");
			bindFunc(cast(void**)&igIsKeyDown, "igIsKeyDown");
			bindFunc(cast(void**)&ImDrawCmd_destroy, "ImDrawCmd_destroy");
			bindFunc(cast(void**)&ImVec4_destroy, "ImVec4_destroy");
			bindFunc(cast(void**)&igBulletTextV, "igBulletTextV");
			bindFunc(cast(void**)&igPopClipRect, "igPopClipRect");
			bindFunc(cast(void**)&ImDrawList_PrimWriteIdx, "ImDrawList_PrimWriteIdx");
			bindFunc(cast(void**)&igIsMouseDown, "igIsMouseDown");
			bindFunc(cast(void**)&igIsItemActivated, "igIsItemActivated");
			bindFunc(cast(void**)&igShowStyleEditor, "igShowStyleEditor");
			bindFunc(cast(void**)&igIsRectVisibleVec2, "igIsRectVisibleVec2");
			bindFunc(cast(void**)&ImDrawList_AddImageQuad, "ImDrawList_AddImageQuad");
			bindFunc(cast(void**)&ImGuiViewport_GetWorkSize_nonUDT, "ImGuiViewport_GetWorkSize_nonUDT");
			bindFunc(cast(void**)&igDragFloat, "igDragFloat");
			bindFunc(cast(void**)&ImColor_ImColorInt, "ImColor_ImColorInt");
			bindFunc(cast(void**)&igIsAnyItemFocused, "igIsAnyItemFocused");
			bindFunc(cast(void**)&igCombo, "igCombo");
			//bindFunc(cast(void**)&ImVector_begin_const, "ImVector_begin_const");
			bindFunc(cast(void**)&igCreateContext, "igCreateContext");
			bindFunc(cast(void**)&igGetTextLineHeight, "igGetTextLineHeight");
			bindFunc(cast(void**)&igTextV, "igTextV");
			bindFunc(cast(void**)&ImFont_GetCharAdvance, "ImFont_GetCharAdvance");
			bindFunc(cast(void**)&ImGuiTextBuffer_appendf, "ImGuiTextBuffer_appendf");
			//bindFunc(cast(void**)&ImVector_insert, "ImVector_insert");
			bindFunc(cast(void**)&ImGuiListClipper_Step, "ImGuiListClipper_Step");
			bindFunc(cast(void**)&ImFontAtlas_GetGlyphRangesThai, "ImFontAtlas_GetGlyphRangesThai");
			bindFunc(cast(void**)&ImFont_FindGlyphNoFallback, "ImFont_FindGlyphNoFallback");
			bindFunc(cast(void**)&igShowMetricsWindow, "igShowMetricsWindow");
			bindFunc(cast(void**)&igVSliderInt, "igVSliderInt");
			bindFunc(cast(void**)&ImDrawData_ImDrawData, "ImDrawData_ImDrawData");
			bindFunc(cast(void**)&igGetMousePosOnOpeningCurrentPopup_nonUDT, "igGetMousePosOnOpeningCurrentPopup_nonUDT");
			bindFunc(cast(void**)&igTreeNodeExVStr, "igTreeNodeExVStr");
			bindFunc(cast(void**)&igGetStyle, "igGetStyle");
			bindFunc(cast(void**)&igTreePop, "igTreePop");
			bindFunc(cast(void**)&igGetFontSize, "igGetFontSize");
			bindFunc(cast(void**)&igPopAllowKeyboardFocus, "igPopAllowKeyboardFocus");
			bindFunc(cast(void**)&ImDrawList_AddDrawCmd, "ImDrawList_AddDrawCmd");
			bindFunc(cast(void**)&igEnd, "igEnd");
			bindFunc(cast(void**)&ImDrawList_AddTextFontPtr, "ImDrawList_AddTextFontPtr");
			bindFunc(cast(void**)&ImColor_ImColorFloat, "ImColor_ImColorFloat");
			bindFunc(cast(void**)&igSetMouseCursor, "igSetMouseCursor");
			bindFunc(cast(void**)&igPushIDStr, "igPushIDStr");
			bindFunc(cast(void**)&igGetCursorPos_nonUDT, "igGetCursorPos_nonUDT");
			bindFunc(cast(void**)&igSetNextWindowDockID, "igSetNextWindowDockID");
			//bindFunc(cast(void**)&ImVector_front_const, "ImVector_front_const");
			bindFunc(cast(void**)&ImDrawList_PrimRectUV, "ImDrawList_PrimRectUV");
			bindFunc(cast(void**)&ImGuiTextBuffer_c_str, "ImGuiTextBuffer_c_str");
			bindFunc(cast(void**)&igIsWindowCollapsed, "igIsWindowCollapsed");
			bindFunc(cast(void**)&igIsMouseReleased, "igIsMouseReleased");
			bindFunc(cast(void**)&igInputFloat4, "igInputFloat4");
			bindFunc(cast(void**)&ImGuiTextFilter_PassFilter, "ImGuiTextFilter_PassFilter");
			bindFunc(cast(void**)&igSetWindowSizeStr, "igSetWindowSizeStr");
			bindFunc(cast(void**)&igSetItemAllowOverlap, "igSetItemAllowOverlap");
			bindFunc(cast(void**)&igGetColumnIndex, "igGetColumnIndex");
			bindFunc(cast(void**)&ImDrawList_PrimUnreserve, "ImDrawList_PrimUnreserve");
			bindFunc(cast(void**)&igSliderAngle, "igSliderAngle");
			bindFunc(cast(void**)&ImGuiStorage_Clear, "ImGuiStorage_Clear");
			bindFunc(cast(void**)&igCalcTextSize_nonUDT, "igCalcTextSize_nonUDT");
			bindFunc(cast(void**)&ImDrawList_PopTextureID, "ImDrawList_PopTextureID");
			bindFunc(cast(void**)&igSameLine, "igSameLine");
			bindFunc(cast(void**)&igPushButtonRepeat, "igPushButtonRepeat");
			bindFunc(cast(void**)&igSetNextWindowSizeConstraints, "igSetNextWindowSizeConstraints");
			bindFunc(cast(void**)&ImDrawList_ImDrawList, "ImDrawList_ImDrawList");
			bindFunc(cast(void**)&ImGuiListClipper_ImGuiListClipper, "ImGuiListClipper_ImGuiListClipper");
			bindFunc(cast(void**)&ImVec4_ImVec4Float, "ImVec4_ImVec4Float");
			bindFunc(cast(void**)&ImDrawList_ChannelsSetCurrent, "ImDrawList_ChannelsSetCurrent");
			bindFunc(cast(void**)&ImDrawCmd_ImDrawCmd, "ImDrawCmd_ImDrawCmd");
			bindFunc(cast(void**)&igEndGroup, "igEndGroup");
			bindFunc(cast(void**)&ImGuiPlatformMonitor_destroy, "ImGuiPlatformMonitor_destroy");
			bindFunc(cast(void**)&igMenuItemBool, "igMenuItemBool");
			bindFunc(cast(void**)&igBeginMenuBar, "igBeginMenuBar");
			bindFunc(cast(void**)&igRenderPlatformWindowsDefault, "igRenderPlatformWindowsDefault");
			bindFunc(cast(void**)&igCalcListClipping, "igCalcListClipping");
			bindFunc(cast(void**)&ImGuiStorage_GetInt, "ImGuiStorage_GetInt");
		}
    }

    public
    {
        this()
        {
            super(libNames);
        }
    }
}

// UDT converters
ImVec2 ImDrawList_GetClipRectMax(A...)(A a) { ImVec2 ret; ImDrawList_GetClipRectMax_nonUDT(&ret, a); return ret; }
ImVec2 igGetWindowPos(A...)(A a) { ImVec2 ret; igGetWindowPos_nonUDT(&ret, a); return ret; }
ImVec2 igGetCursorStartPos(A...)(A a) { ImVec2 ret; igGetCursorStartPos_nonUDT(&ret, a); return ret; }
ImVec2 igGetCursorScreenPos(A...)(A a) { ImVec2 ret; igGetCursorScreenPos_nonUDT(&ret, a); return ret; }
ImColor ImColor_HSV(A...)(A a) { ImColor ret; ImColor_HSV_nonUDT(&ret, a); return ret; }
ImVec2 ImGuiViewport_GetWorkPos(A...)(A a) { ImVec2 ret; ImGuiViewport_GetWorkPos_nonUDT(&ret, a); return ret; }
ImVec2 igGetWindowContentRegionMax(A...)(A a) { ImVec2 ret; igGetWindowContentRegionMax_nonUDT(&ret, a); return ret; }
ImVec2 igGetFontTexUvWhitePixel(A...)(A a) { ImVec2 ret; igGetFontTexUvWhitePixel_nonUDT(&ret, a); return ret; }
ImVec2 igGetWindowContentRegionMin(A...)(A a) { ImVec2 ret; igGetWindowContentRegionMin_nonUDT(&ret, a); return ret; }
ImVec2 igGetItemRectSize(A...)(A a) { ImVec2 ret; igGetItemRectSize_nonUDT(&ret, a); return ret; }
ImVec2 igGetMouseDragDelta(A...)(A a) { ImVec2 ret; igGetMouseDragDelta_nonUDT(&ret, a); return ret; }
ImVec2 ImDrawList_GetClipRectMin(A...)(A a) { ImVec2 ret; ImDrawList_GetClipRectMin_nonUDT(&ret, a); return ret; }
ImVec4 igColorConvertU32ToFloat4(A...)(A a) { ImVec4 ret; igColorConvertU32ToFloat4_nonUDT(&ret, a); return ret; }
ImVec2 igGetWindowSize(A...)(A a) { ImVec2 ret; igGetWindowSize_nonUDT(&ret, a); return ret; }
ImVec2 igGetItemRectMin(A...)(A a) { ImVec2 ret; igGetItemRectMin_nonUDT(&ret, a); return ret; }
ImVec2 ImFont_CalcTextSizeA(A...)(A a) { ImVec2 ret; ImFont_CalcTextSizeA_nonUDT(&ret, a); return ret; }
ImVec2 igGetMousePos(A...)(A a) { ImVec2 ret; igGetMousePos_nonUDT(&ret, a); return ret; }
ImVec2 igGetContentRegionAvail(A...)(A a) { ImVec2 ret; igGetContentRegionAvail_nonUDT(&ret, a); return ret; }
ImVec2 igGetContentRegionMax(A...)(A a) { ImVec2 ret; igGetContentRegionMax_nonUDT(&ret, a); return ret; }
ImVec2 igGetItemRectMax(A...)(A a) { ImVec2 ret; igGetItemRectMax_nonUDT(&ret, a); return ret; }
ImVec2 ImGuiViewport_GetWorkSize(A...)(A a) { ImVec2 ret; ImGuiViewport_GetWorkSize_nonUDT(&ret, a); return ret; }
ImVec2 igGetMousePosOnOpeningCurrentPopup(A...)(A a) { ImVec2 ret; igGetMousePosOnOpeningCurrentPopup_nonUDT(&ret, a); return ret; }
ImVec2 igGetCursorPos(A...)(A a) { ImVec2 ret; igGetCursorPos_nonUDT(&ret, a); return ret; }
ImVec2 igCalcTextSize(A...)(A a) { ImVec2 ret; igCalcTextSize_nonUDT(&ret, a); return ret; }


__gshared DerelictImguiLoader DerelictImgui;

shared static this()
{
    DerelictImgui = new DerelictImguiLoader();
}

