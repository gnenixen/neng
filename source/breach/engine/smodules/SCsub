#!/usr/bin/env python

Import( '*' )

import os;

register_file_name = "register.d";

register_file_header = """/*
    THIS FILE IS AUTOGENERATED,
    DO NOT EDIT IT,
    FOR REFS SEE smodules/SCsub
*/
module engine.smodules.register;

private template TRegisterSModule_Check( string name ) {
    import std.string;

    enum TRegisterSModule_Check = format(
        "
        import engine.smodules.%1$s;

        static if (
            !__traits( compiles, mixin( \\"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\\" ) )
        ) {
            pragma( msg, \\"Module ( %1$s ) invalid registration, please create %1$s__register && %1$s__unregister in smodules/%1$s/package.d\\" );
        }
        ",
        name
    );
}

private template TRegisterSModule_Reg( string name ) {
    import std.string;
    
    enum TRegisterSModule_Reg = TRegisterSModule_Check!name ~ format(
        "
        {
            import engine.smodules.%1$s;

            static if (
                __traits( compiles, mixin( \\"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\\" ) )
            ) {
                %1$s__register();
            }
        }
        ",
        name
    );
}

private template TRegisterSModule_Unreg( string name ) {
    import std.string;
    
    enum TRegisterSModule_Unreg = format(
        "
        {
            import engine.smodules.%1$s;

            static if (
                __traits( compiles, mixin( \\"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\\" ) )
            ) {
                %1$s__unregister();
            }
        }
        ",
        name
    );
}

""";

class CModule:
    def __init__( self ):
        subfolders = [ f.path for f in os.scandir( env.Dir( "." ).abspath ) if f.is_dir() ]
        
        reg_lines = "void registerSModules() {\n";
        unreg_lines = "void unregisterSModules() {\n"

        for i in subfolders:
            reg_lines += "\tmixin( TRegisterSModule_Reg!\"" + os.path.basename( i ) + "\" );\n";
            unreg_lines += "\tmixin( TRegisterSModule_Unreg!\"" + os.path.basename( i ) + "\" );\n";
        
        reg_lines += "}\n\n";
        unreg_lines += "}\n";

        file_content = register_file_header + reg_lines + unreg_lines;
        
        reg_file = open( env.Dir( "." ).abspath + "/" + register_file_name, "w+" );
        reg_file.write( file_content );
        reg_file.close();
    
    def mod_src( self ):
        return env.get_source_files();

    def mod_build( self ):
        return env.CLibraryBR();

    def mod_sub( self ):
        return ["thirdparty"];

env.reg_module( "smodules", CModule() );
