/*
    THIS FILE IS AUTOGENERATED,
    DO NOT EDIT IT,
    FOR REFS SEE smodules/SCsub
*/
module engine.smodules.register;

private template TRegisterSModule_Check( string name ) {
    import std.string;

    enum TRegisterSModule_Check = format(
        "
        import engine.smodules.%1$s;

        static if (
            !__traits( compiles, mixin( \"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\" ) )
        ) {
            pragma( msg, \"Module ( %1$s ) invalid registration, please create %1$s__register && %1$s__unregister in smodules/%1$s/package.d\" );
        }
        ",
        name
    );
}

private template TRegisterSModule_Reg( string name ) {
    import std.string;
    
    enum TRegisterSModule_Reg = TRegisterSModule_Check!name ~ format(
        "
        {
            import engine.smodules.%1$s;

            static if (
                __traits( compiles, mixin( \"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\" ) )
            ) {
                %1$s__register();
            }
        }
        ",
        name
    );
}

private template TRegisterSModule_Unreg( string name ) {
    import std.string;
    
    enum TRegisterSModule_Unreg = format(
        "
        {
            import engine.smodules.%1$s;

            static if (
                __traits( compiles, mixin( \"{ import engine.smodules.%1$s; %1$s__register(); %1$s__unregister(); }\" ) )
            ) {
                %1$s__unregister();
            }
        }
        ",
        name
    );
}

void registerSModules() {
	mixin( TRegisterSModule_Reg!"fmod" );
	mixin( TRegisterSModule_Reg!"display_server" );
	mixin( TRegisterSModule_Reg!"box2d_physics" );
	mixin( TRegisterSModule_Reg!"rd_ogl" );
}

void unregisterSModules() {
	mixin( TRegisterSModule_Unreg!"fmod" );
	mixin( TRegisterSModule_Unreg!"display_server" );
	mixin( TRegisterSModule_Unreg!"box2d_physics" );
	mixin( TRegisterSModule_Unreg!"rd_ogl" );
}
